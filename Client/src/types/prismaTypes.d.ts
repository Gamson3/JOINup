
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Category
 * 
 */
export type Category = $Result.DefaultSelection<Prisma.$CategoryPayload>
/**
 * Model Event
 * 
 */
export type Event = $Result.DefaultSelection<Prisma.$EventPayload>
/**
 * Model Location
 * 
 */
export type Location = $Result.DefaultSelection<Prisma.$LocationPayload>
/**
 * Model EventImage
 * 
 */
export type EventImage = $Result.DefaultSelection<Prisma.$EventImagePayload>
/**
 * Model EventAttendee
 * 
 */
export type EventAttendee = $Result.DefaultSelection<Prisma.$EventAttendeePayload>
/**
 * Model ConferenceDay
 * 
 */
export type ConferenceDay = $Result.DefaultSelection<Prisma.$ConferenceDayPayload>
/**
 * Model Section
 * 
 */
export type Section = $Result.DefaultSelection<Prisma.$SectionPayload>
/**
 * Model Presentation
 * 
 */
export type Presentation = $Result.DefaultSelection<Prisma.$PresentationPayload>
/**
 * Model PresentationAuthor
 * 
 */
export type PresentationAuthor = $Result.DefaultSelection<Prisma.$PresentationAuthorPayload>
/**
 * Model Affiliation
 * 
 */
export type Affiliation = $Result.DefaultSelection<Prisma.$AffiliationPayload>
/**
 * Model PresentationMaterial
 * 
 */
export type PresentationMaterial = $Result.DefaultSelection<Prisma.$PresentationMaterialPayload>
/**
 * Model Break
 * 
 */
export type Break = $Result.DefaultSelection<Prisma.$BreakPayload>
/**
 * Model Favorite
 * 
 */
export type Favorite = $Result.DefaultSelection<Prisma.$FavoritePayload>
/**
 * Model AdminActionLog
 * 
 */
export type AdminActionLog = $Result.DefaultSelection<Prisma.$AdminActionLogPayload>
/**
 * Model UserProfile
 * 
 */
export type UserProfile = $Result.DefaultSelection<Prisma.$UserProfilePayload>
/**
 * Model ConferenceRegistration
 * 
 */
export type ConferenceRegistration = $Result.DefaultSelection<Prisma.$ConferenceRegistrationPayload>
/**
 * Model PresentationMetrics
 * 
 */
export type PresentationMetrics = $Result.DefaultSelection<Prisma.$PresentationMetricsPayload>
/**
 * Model RefreshToken
 * 
 */
export type RefreshToken = $Result.DefaultSelection<Prisma.$RefreshTokenPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  ADMIN: 'ADMIN',
  ORGANIZER: 'ORGANIZER',
  ATTENDEE: 'ATTENDEE',
  PENDING: 'PENDING'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const EventStatus: {
  DRAFT: 'DRAFT',
  PUBLISHED: 'PUBLISHED',
  CANCELLED: 'CANCELLED',
  COMPLETED: 'COMPLETED'
};

export type EventStatus = (typeof EventStatus)[keyof typeof EventStatus]


export const AttendeeStatus: {
  REGISTERED: 'REGISTERED',
  CONFIRMED: 'CONFIRMED',
  ATTENDED: 'ATTENDED',
  NO_SHOW: 'NO_SHOW'
};

export type AttendeeStatus = (typeof AttendeeStatus)[keyof typeof AttendeeStatus]


export const MaterialType: {
  SLIDES: 'SLIDES',
  POSTER: 'POSTER',
  PAPER: 'PAPER',
  VIDEO: 'VIDEO',
  OTHER: 'OTHER'
};

export type MaterialType = (typeof MaterialType)[keyof typeof MaterialType]


export const PresentationStatus: {
  DRAFT: 'DRAFT',
  SUBMITTED: 'SUBMITTED',
  REVISION_REQUIRED: 'REVISION_REQUIRED',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

export type PresentationStatus = (typeof PresentationStatus)[keyof typeof PresentationStatus]


export const SubmissionType: {
  TALK: 'TALK',
  POSTER: 'POSTER',
  DEMO: 'DEMO',
  LIGHTNING: 'LIGHTNING',
  WORKSHOP: 'WORKSHOP'
};

export type SubmissionType = (typeof SubmissionType)[keyof typeof SubmissionType]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type EventStatus = $Enums.EventStatus

export const EventStatus: typeof $Enums.EventStatus

export type AttendeeStatus = $Enums.AttendeeStatus

export const AttendeeStatus: typeof $Enums.AttendeeStatus

export type MaterialType = $Enums.MaterialType

export const MaterialType: typeof $Enums.MaterialType

export type PresentationStatus = $Enums.PresentationStatus

export const PresentationStatus: typeof $Enums.PresentationStatus

export type SubmissionType = $Enums.SubmissionType

export const SubmissionType: typeof $Enums.SubmissionType

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.event`: Exposes CRUD operations for the **Event** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Events
    * const events = await prisma.event.findMany()
    * ```
    */
  get event(): Prisma.EventDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.location`: Exposes CRUD operations for the **Location** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Locations
    * const locations = await prisma.location.findMany()
    * ```
    */
  get location(): Prisma.LocationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.eventImage`: Exposes CRUD operations for the **EventImage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EventImages
    * const eventImages = await prisma.eventImage.findMany()
    * ```
    */
  get eventImage(): Prisma.EventImageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.eventAttendee`: Exposes CRUD operations for the **EventAttendee** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EventAttendees
    * const eventAttendees = await prisma.eventAttendee.findMany()
    * ```
    */
  get eventAttendee(): Prisma.EventAttendeeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.conferenceDay`: Exposes CRUD operations for the **ConferenceDay** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ConferenceDays
    * const conferenceDays = await prisma.conferenceDay.findMany()
    * ```
    */
  get conferenceDay(): Prisma.ConferenceDayDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.section`: Exposes CRUD operations for the **Section** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sections
    * const sections = await prisma.section.findMany()
    * ```
    */
  get section(): Prisma.SectionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.presentation`: Exposes CRUD operations for the **Presentation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Presentations
    * const presentations = await prisma.presentation.findMany()
    * ```
    */
  get presentation(): Prisma.PresentationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.presentationAuthor`: Exposes CRUD operations for the **PresentationAuthor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PresentationAuthors
    * const presentationAuthors = await prisma.presentationAuthor.findMany()
    * ```
    */
  get presentationAuthor(): Prisma.PresentationAuthorDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.affiliation`: Exposes CRUD operations for the **Affiliation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Affiliations
    * const affiliations = await prisma.affiliation.findMany()
    * ```
    */
  get affiliation(): Prisma.AffiliationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.presentationMaterial`: Exposes CRUD operations for the **PresentationMaterial** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PresentationMaterials
    * const presentationMaterials = await prisma.presentationMaterial.findMany()
    * ```
    */
  get presentationMaterial(): Prisma.PresentationMaterialDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.break`: Exposes CRUD operations for the **Break** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Breaks
    * const breaks = await prisma.break.findMany()
    * ```
    */
  get break(): Prisma.BreakDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.favorite`: Exposes CRUD operations for the **Favorite** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Favorites
    * const favorites = await prisma.favorite.findMany()
    * ```
    */
  get favorite(): Prisma.FavoriteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.adminActionLog`: Exposes CRUD operations for the **AdminActionLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AdminActionLogs
    * const adminActionLogs = await prisma.adminActionLog.findMany()
    * ```
    */
  get adminActionLog(): Prisma.AdminActionLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userProfile`: Exposes CRUD operations for the **UserProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserProfiles
    * const userProfiles = await prisma.userProfile.findMany()
    * ```
    */
  get userProfile(): Prisma.UserProfileDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.conferenceRegistration`: Exposes CRUD operations for the **ConferenceRegistration** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ConferenceRegistrations
    * const conferenceRegistrations = await prisma.conferenceRegistration.findMany()
    * ```
    */
  get conferenceRegistration(): Prisma.ConferenceRegistrationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.presentationMetrics`: Exposes CRUD operations for the **PresentationMetrics** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PresentationMetrics
    * const presentationMetrics = await prisma.presentationMetrics.findMany()
    * ```
    */
  get presentationMetrics(): Prisma.PresentationMetricsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.refreshToken`: Exposes CRUD operations for the **RefreshToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RefreshTokens
    * const refreshTokens = await prisma.refreshToken.findMany()
    * ```
    */
  get refreshToken(): Prisma.RefreshTokenDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.13.0
   * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Category: 'Category',
    Event: 'Event',
    Location: 'Location',
    EventImage: 'EventImage',
    EventAttendee: 'EventAttendee',
    ConferenceDay: 'ConferenceDay',
    Section: 'Section',
    Presentation: 'Presentation',
    PresentationAuthor: 'PresentationAuthor',
    Affiliation: 'Affiliation',
    PresentationMaterial: 'PresentationMaterial',
    Break: 'Break',
    Favorite: 'Favorite',
    AdminActionLog: 'AdminActionLog',
    UserProfile: 'UserProfile',
    ConferenceRegistration: 'ConferenceRegistration',
    PresentationMetrics: 'PresentationMetrics',
    RefreshToken: 'RefreshToken'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "category" | "event" | "location" | "eventImage" | "eventAttendee" | "conferenceDay" | "section" | "presentation" | "presentationAuthor" | "affiliation" | "presentationMaterial" | "break" | "favorite" | "adminActionLog" | "userProfile" | "conferenceRegistration" | "presentationMetrics" | "refreshToken"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Category: {
        payload: Prisma.$CategoryPayload<ExtArgs>
        fields: Prisma.CategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findFirst: {
            args: Prisma.CategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findMany: {
            args: Prisma.CategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          create: {
            args: Prisma.CategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          createMany: {
            args: Prisma.CategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          delete: {
            args: Prisma.CategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          update: {
            args: Prisma.CategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          deleteMany: {
            args: Prisma.CategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CategoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          upsert: {
            args: Prisma.CategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.CategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryCountArgs<ExtArgs>
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      Event: {
        payload: Prisma.$EventPayload<ExtArgs>
        fields: Prisma.EventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          findFirst: {
            args: Prisma.EventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          findMany: {
            args: Prisma.EventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          create: {
            args: Prisma.EventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          createMany: {
            args: Prisma.EventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EventCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          delete: {
            args: Prisma.EventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          update: {
            args: Prisma.EventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          deleteMany: {
            args: Prisma.EventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EventUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          upsert: {
            args: Prisma.EventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          aggregate: {
            args: Prisma.EventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEvent>
          }
          groupBy: {
            args: Prisma.EventGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventCountArgs<ExtArgs>
            result: $Utils.Optional<EventCountAggregateOutputType> | number
          }
        }
      }
      Location: {
        payload: Prisma.$LocationPayload<ExtArgs>
        fields: Prisma.LocationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LocationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LocationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          findFirst: {
            args: Prisma.LocationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LocationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          findMany: {
            args: Prisma.LocationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>[]
          }
          create: {
            args: Prisma.LocationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          createMany: {
            args: Prisma.LocationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LocationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>[]
          }
          delete: {
            args: Prisma.LocationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          update: {
            args: Prisma.LocationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          deleteMany: {
            args: Prisma.LocationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LocationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LocationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>[]
          }
          upsert: {
            args: Prisma.LocationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          aggregate: {
            args: Prisma.LocationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLocation>
          }
          groupBy: {
            args: Prisma.LocationGroupByArgs<ExtArgs>
            result: $Utils.Optional<LocationGroupByOutputType>[]
          }
          count: {
            args: Prisma.LocationCountArgs<ExtArgs>
            result: $Utils.Optional<LocationCountAggregateOutputType> | number
          }
        }
      }
      EventImage: {
        payload: Prisma.$EventImagePayload<ExtArgs>
        fields: Prisma.EventImageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventImageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventImagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventImageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventImagePayload>
          }
          findFirst: {
            args: Prisma.EventImageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventImagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventImageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventImagePayload>
          }
          findMany: {
            args: Prisma.EventImageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventImagePayload>[]
          }
          create: {
            args: Prisma.EventImageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventImagePayload>
          }
          createMany: {
            args: Prisma.EventImageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EventImageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventImagePayload>[]
          }
          delete: {
            args: Prisma.EventImageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventImagePayload>
          }
          update: {
            args: Prisma.EventImageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventImagePayload>
          }
          deleteMany: {
            args: Prisma.EventImageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EventImageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EventImageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventImagePayload>[]
          }
          upsert: {
            args: Prisma.EventImageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventImagePayload>
          }
          aggregate: {
            args: Prisma.EventImageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEventImage>
          }
          groupBy: {
            args: Prisma.EventImageGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventImageGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventImageCountArgs<ExtArgs>
            result: $Utils.Optional<EventImageCountAggregateOutputType> | number
          }
        }
      }
      EventAttendee: {
        payload: Prisma.$EventAttendeePayload<ExtArgs>
        fields: Prisma.EventAttendeeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventAttendeeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventAttendeePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventAttendeeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventAttendeePayload>
          }
          findFirst: {
            args: Prisma.EventAttendeeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventAttendeePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventAttendeeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventAttendeePayload>
          }
          findMany: {
            args: Prisma.EventAttendeeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventAttendeePayload>[]
          }
          create: {
            args: Prisma.EventAttendeeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventAttendeePayload>
          }
          createMany: {
            args: Prisma.EventAttendeeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EventAttendeeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventAttendeePayload>[]
          }
          delete: {
            args: Prisma.EventAttendeeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventAttendeePayload>
          }
          update: {
            args: Prisma.EventAttendeeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventAttendeePayload>
          }
          deleteMany: {
            args: Prisma.EventAttendeeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EventAttendeeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EventAttendeeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventAttendeePayload>[]
          }
          upsert: {
            args: Prisma.EventAttendeeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventAttendeePayload>
          }
          aggregate: {
            args: Prisma.EventAttendeeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEventAttendee>
          }
          groupBy: {
            args: Prisma.EventAttendeeGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventAttendeeGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventAttendeeCountArgs<ExtArgs>
            result: $Utils.Optional<EventAttendeeCountAggregateOutputType> | number
          }
        }
      }
      ConferenceDay: {
        payload: Prisma.$ConferenceDayPayload<ExtArgs>
        fields: Prisma.ConferenceDayFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ConferenceDayFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConferenceDayPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ConferenceDayFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConferenceDayPayload>
          }
          findFirst: {
            args: Prisma.ConferenceDayFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConferenceDayPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ConferenceDayFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConferenceDayPayload>
          }
          findMany: {
            args: Prisma.ConferenceDayFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConferenceDayPayload>[]
          }
          create: {
            args: Prisma.ConferenceDayCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConferenceDayPayload>
          }
          createMany: {
            args: Prisma.ConferenceDayCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ConferenceDayCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConferenceDayPayload>[]
          }
          delete: {
            args: Prisma.ConferenceDayDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConferenceDayPayload>
          }
          update: {
            args: Prisma.ConferenceDayUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConferenceDayPayload>
          }
          deleteMany: {
            args: Prisma.ConferenceDayDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ConferenceDayUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ConferenceDayUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConferenceDayPayload>[]
          }
          upsert: {
            args: Prisma.ConferenceDayUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConferenceDayPayload>
          }
          aggregate: {
            args: Prisma.ConferenceDayAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateConferenceDay>
          }
          groupBy: {
            args: Prisma.ConferenceDayGroupByArgs<ExtArgs>
            result: $Utils.Optional<ConferenceDayGroupByOutputType>[]
          }
          count: {
            args: Prisma.ConferenceDayCountArgs<ExtArgs>
            result: $Utils.Optional<ConferenceDayCountAggregateOutputType> | number
          }
        }
      }
      Section: {
        payload: Prisma.$SectionPayload<ExtArgs>
        fields: Prisma.SectionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SectionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SectionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>
          }
          findFirst: {
            args: Prisma.SectionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SectionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>
          }
          findMany: {
            args: Prisma.SectionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>[]
          }
          create: {
            args: Prisma.SectionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>
          }
          createMany: {
            args: Prisma.SectionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SectionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>[]
          }
          delete: {
            args: Prisma.SectionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>
          }
          update: {
            args: Prisma.SectionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>
          }
          deleteMany: {
            args: Prisma.SectionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SectionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SectionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>[]
          }
          upsert: {
            args: Prisma.SectionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>
          }
          aggregate: {
            args: Prisma.SectionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSection>
          }
          groupBy: {
            args: Prisma.SectionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SectionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SectionCountArgs<ExtArgs>
            result: $Utils.Optional<SectionCountAggregateOutputType> | number
          }
        }
      }
      Presentation: {
        payload: Prisma.$PresentationPayload<ExtArgs>
        fields: Prisma.PresentationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PresentationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresentationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PresentationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresentationPayload>
          }
          findFirst: {
            args: Prisma.PresentationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresentationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PresentationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresentationPayload>
          }
          findMany: {
            args: Prisma.PresentationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresentationPayload>[]
          }
          create: {
            args: Prisma.PresentationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresentationPayload>
          }
          createMany: {
            args: Prisma.PresentationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PresentationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresentationPayload>[]
          }
          delete: {
            args: Prisma.PresentationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresentationPayload>
          }
          update: {
            args: Prisma.PresentationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresentationPayload>
          }
          deleteMany: {
            args: Prisma.PresentationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PresentationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PresentationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresentationPayload>[]
          }
          upsert: {
            args: Prisma.PresentationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresentationPayload>
          }
          aggregate: {
            args: Prisma.PresentationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePresentation>
          }
          groupBy: {
            args: Prisma.PresentationGroupByArgs<ExtArgs>
            result: $Utils.Optional<PresentationGroupByOutputType>[]
          }
          count: {
            args: Prisma.PresentationCountArgs<ExtArgs>
            result: $Utils.Optional<PresentationCountAggregateOutputType> | number
          }
        }
      }
      PresentationAuthor: {
        payload: Prisma.$PresentationAuthorPayload<ExtArgs>
        fields: Prisma.PresentationAuthorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PresentationAuthorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresentationAuthorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PresentationAuthorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresentationAuthorPayload>
          }
          findFirst: {
            args: Prisma.PresentationAuthorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresentationAuthorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PresentationAuthorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresentationAuthorPayload>
          }
          findMany: {
            args: Prisma.PresentationAuthorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresentationAuthorPayload>[]
          }
          create: {
            args: Prisma.PresentationAuthorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresentationAuthorPayload>
          }
          createMany: {
            args: Prisma.PresentationAuthorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PresentationAuthorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresentationAuthorPayload>[]
          }
          delete: {
            args: Prisma.PresentationAuthorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresentationAuthorPayload>
          }
          update: {
            args: Prisma.PresentationAuthorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresentationAuthorPayload>
          }
          deleteMany: {
            args: Prisma.PresentationAuthorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PresentationAuthorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PresentationAuthorUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresentationAuthorPayload>[]
          }
          upsert: {
            args: Prisma.PresentationAuthorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresentationAuthorPayload>
          }
          aggregate: {
            args: Prisma.PresentationAuthorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePresentationAuthor>
          }
          groupBy: {
            args: Prisma.PresentationAuthorGroupByArgs<ExtArgs>
            result: $Utils.Optional<PresentationAuthorGroupByOutputType>[]
          }
          count: {
            args: Prisma.PresentationAuthorCountArgs<ExtArgs>
            result: $Utils.Optional<PresentationAuthorCountAggregateOutputType> | number
          }
        }
      }
      Affiliation: {
        payload: Prisma.$AffiliationPayload<ExtArgs>
        fields: Prisma.AffiliationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AffiliationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AffiliationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AffiliationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AffiliationPayload>
          }
          findFirst: {
            args: Prisma.AffiliationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AffiliationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AffiliationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AffiliationPayload>
          }
          findMany: {
            args: Prisma.AffiliationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AffiliationPayload>[]
          }
          create: {
            args: Prisma.AffiliationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AffiliationPayload>
          }
          createMany: {
            args: Prisma.AffiliationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AffiliationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AffiliationPayload>[]
          }
          delete: {
            args: Prisma.AffiliationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AffiliationPayload>
          }
          update: {
            args: Prisma.AffiliationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AffiliationPayload>
          }
          deleteMany: {
            args: Prisma.AffiliationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AffiliationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AffiliationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AffiliationPayload>[]
          }
          upsert: {
            args: Prisma.AffiliationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AffiliationPayload>
          }
          aggregate: {
            args: Prisma.AffiliationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAffiliation>
          }
          groupBy: {
            args: Prisma.AffiliationGroupByArgs<ExtArgs>
            result: $Utils.Optional<AffiliationGroupByOutputType>[]
          }
          count: {
            args: Prisma.AffiliationCountArgs<ExtArgs>
            result: $Utils.Optional<AffiliationCountAggregateOutputType> | number
          }
        }
      }
      PresentationMaterial: {
        payload: Prisma.$PresentationMaterialPayload<ExtArgs>
        fields: Prisma.PresentationMaterialFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PresentationMaterialFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresentationMaterialPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PresentationMaterialFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresentationMaterialPayload>
          }
          findFirst: {
            args: Prisma.PresentationMaterialFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresentationMaterialPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PresentationMaterialFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresentationMaterialPayload>
          }
          findMany: {
            args: Prisma.PresentationMaterialFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresentationMaterialPayload>[]
          }
          create: {
            args: Prisma.PresentationMaterialCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresentationMaterialPayload>
          }
          createMany: {
            args: Prisma.PresentationMaterialCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PresentationMaterialCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresentationMaterialPayload>[]
          }
          delete: {
            args: Prisma.PresentationMaterialDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresentationMaterialPayload>
          }
          update: {
            args: Prisma.PresentationMaterialUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresentationMaterialPayload>
          }
          deleteMany: {
            args: Prisma.PresentationMaterialDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PresentationMaterialUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PresentationMaterialUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresentationMaterialPayload>[]
          }
          upsert: {
            args: Prisma.PresentationMaterialUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresentationMaterialPayload>
          }
          aggregate: {
            args: Prisma.PresentationMaterialAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePresentationMaterial>
          }
          groupBy: {
            args: Prisma.PresentationMaterialGroupByArgs<ExtArgs>
            result: $Utils.Optional<PresentationMaterialGroupByOutputType>[]
          }
          count: {
            args: Prisma.PresentationMaterialCountArgs<ExtArgs>
            result: $Utils.Optional<PresentationMaterialCountAggregateOutputType> | number
          }
        }
      }
      Break: {
        payload: Prisma.$BreakPayload<ExtArgs>
        fields: Prisma.BreakFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BreakFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BreakPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BreakFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BreakPayload>
          }
          findFirst: {
            args: Prisma.BreakFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BreakPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BreakFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BreakPayload>
          }
          findMany: {
            args: Prisma.BreakFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BreakPayload>[]
          }
          create: {
            args: Prisma.BreakCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BreakPayload>
          }
          createMany: {
            args: Prisma.BreakCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BreakCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BreakPayload>[]
          }
          delete: {
            args: Prisma.BreakDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BreakPayload>
          }
          update: {
            args: Prisma.BreakUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BreakPayload>
          }
          deleteMany: {
            args: Prisma.BreakDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BreakUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BreakUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BreakPayload>[]
          }
          upsert: {
            args: Prisma.BreakUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BreakPayload>
          }
          aggregate: {
            args: Prisma.BreakAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBreak>
          }
          groupBy: {
            args: Prisma.BreakGroupByArgs<ExtArgs>
            result: $Utils.Optional<BreakGroupByOutputType>[]
          }
          count: {
            args: Prisma.BreakCountArgs<ExtArgs>
            result: $Utils.Optional<BreakCountAggregateOutputType> | number
          }
        }
      }
      Favorite: {
        payload: Prisma.$FavoritePayload<ExtArgs>
        fields: Prisma.FavoriteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FavoriteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FavoriteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload>
          }
          findFirst: {
            args: Prisma.FavoriteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FavoriteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload>
          }
          findMany: {
            args: Prisma.FavoriteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload>[]
          }
          create: {
            args: Prisma.FavoriteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload>
          }
          createMany: {
            args: Prisma.FavoriteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FavoriteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload>[]
          }
          delete: {
            args: Prisma.FavoriteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload>
          }
          update: {
            args: Prisma.FavoriteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload>
          }
          deleteMany: {
            args: Prisma.FavoriteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FavoriteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FavoriteUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload>[]
          }
          upsert: {
            args: Prisma.FavoriteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload>
          }
          aggregate: {
            args: Prisma.FavoriteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFavorite>
          }
          groupBy: {
            args: Prisma.FavoriteGroupByArgs<ExtArgs>
            result: $Utils.Optional<FavoriteGroupByOutputType>[]
          }
          count: {
            args: Prisma.FavoriteCountArgs<ExtArgs>
            result: $Utils.Optional<FavoriteCountAggregateOutputType> | number
          }
        }
      }
      AdminActionLog: {
        payload: Prisma.$AdminActionLogPayload<ExtArgs>
        fields: Prisma.AdminActionLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdminActionLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminActionLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdminActionLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminActionLogPayload>
          }
          findFirst: {
            args: Prisma.AdminActionLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminActionLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdminActionLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminActionLogPayload>
          }
          findMany: {
            args: Prisma.AdminActionLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminActionLogPayload>[]
          }
          create: {
            args: Prisma.AdminActionLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminActionLogPayload>
          }
          createMany: {
            args: Prisma.AdminActionLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AdminActionLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminActionLogPayload>[]
          }
          delete: {
            args: Prisma.AdminActionLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminActionLogPayload>
          }
          update: {
            args: Prisma.AdminActionLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminActionLogPayload>
          }
          deleteMany: {
            args: Prisma.AdminActionLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AdminActionLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AdminActionLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminActionLogPayload>[]
          }
          upsert: {
            args: Prisma.AdminActionLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminActionLogPayload>
          }
          aggregate: {
            args: Prisma.AdminActionLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdminActionLog>
          }
          groupBy: {
            args: Prisma.AdminActionLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdminActionLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdminActionLogCountArgs<ExtArgs>
            result: $Utils.Optional<AdminActionLogCountAggregateOutputType> | number
          }
        }
      }
      UserProfile: {
        payload: Prisma.$UserProfilePayload<ExtArgs>
        fields: Prisma.UserProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          findFirst: {
            args: Prisma.UserProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          findMany: {
            args: Prisma.UserProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>[]
          }
          create: {
            args: Prisma.UserProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          createMany: {
            args: Prisma.UserProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>[]
          }
          delete: {
            args: Prisma.UserProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          update: {
            args: Prisma.UserProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          deleteMany: {
            args: Prisma.UserProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserProfileUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>[]
          }
          upsert: {
            args: Prisma.UserProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          aggregate: {
            args: Prisma.UserProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserProfile>
          }
          groupBy: {
            args: Prisma.UserProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserProfileCountArgs<ExtArgs>
            result: $Utils.Optional<UserProfileCountAggregateOutputType> | number
          }
        }
      }
      ConferenceRegistration: {
        payload: Prisma.$ConferenceRegistrationPayload<ExtArgs>
        fields: Prisma.ConferenceRegistrationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ConferenceRegistrationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConferenceRegistrationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ConferenceRegistrationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConferenceRegistrationPayload>
          }
          findFirst: {
            args: Prisma.ConferenceRegistrationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConferenceRegistrationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ConferenceRegistrationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConferenceRegistrationPayload>
          }
          findMany: {
            args: Prisma.ConferenceRegistrationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConferenceRegistrationPayload>[]
          }
          create: {
            args: Prisma.ConferenceRegistrationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConferenceRegistrationPayload>
          }
          createMany: {
            args: Prisma.ConferenceRegistrationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ConferenceRegistrationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConferenceRegistrationPayload>[]
          }
          delete: {
            args: Prisma.ConferenceRegistrationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConferenceRegistrationPayload>
          }
          update: {
            args: Prisma.ConferenceRegistrationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConferenceRegistrationPayload>
          }
          deleteMany: {
            args: Prisma.ConferenceRegistrationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ConferenceRegistrationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ConferenceRegistrationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConferenceRegistrationPayload>[]
          }
          upsert: {
            args: Prisma.ConferenceRegistrationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConferenceRegistrationPayload>
          }
          aggregate: {
            args: Prisma.ConferenceRegistrationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateConferenceRegistration>
          }
          groupBy: {
            args: Prisma.ConferenceRegistrationGroupByArgs<ExtArgs>
            result: $Utils.Optional<ConferenceRegistrationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ConferenceRegistrationCountArgs<ExtArgs>
            result: $Utils.Optional<ConferenceRegistrationCountAggregateOutputType> | number
          }
        }
      }
      PresentationMetrics: {
        payload: Prisma.$PresentationMetricsPayload<ExtArgs>
        fields: Prisma.PresentationMetricsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PresentationMetricsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresentationMetricsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PresentationMetricsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresentationMetricsPayload>
          }
          findFirst: {
            args: Prisma.PresentationMetricsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresentationMetricsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PresentationMetricsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresentationMetricsPayload>
          }
          findMany: {
            args: Prisma.PresentationMetricsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresentationMetricsPayload>[]
          }
          create: {
            args: Prisma.PresentationMetricsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresentationMetricsPayload>
          }
          createMany: {
            args: Prisma.PresentationMetricsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PresentationMetricsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresentationMetricsPayload>[]
          }
          delete: {
            args: Prisma.PresentationMetricsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresentationMetricsPayload>
          }
          update: {
            args: Prisma.PresentationMetricsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresentationMetricsPayload>
          }
          deleteMany: {
            args: Prisma.PresentationMetricsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PresentationMetricsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PresentationMetricsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresentationMetricsPayload>[]
          }
          upsert: {
            args: Prisma.PresentationMetricsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresentationMetricsPayload>
          }
          aggregate: {
            args: Prisma.PresentationMetricsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePresentationMetrics>
          }
          groupBy: {
            args: Prisma.PresentationMetricsGroupByArgs<ExtArgs>
            result: $Utils.Optional<PresentationMetricsGroupByOutputType>[]
          }
          count: {
            args: Prisma.PresentationMetricsCountArgs<ExtArgs>
            result: $Utils.Optional<PresentationMetricsCountAggregateOutputType> | number
          }
        }
      }
      RefreshToken: {
        payload: Prisma.$RefreshTokenPayload<ExtArgs>
        fields: Prisma.RefreshTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RefreshTokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RefreshTokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          findFirst: {
            args: Prisma.RefreshTokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RefreshTokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          findMany: {
            args: Prisma.RefreshTokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>[]
          }
          create: {
            args: Prisma.RefreshTokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          createMany: {
            args: Prisma.RefreshTokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RefreshTokenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>[]
          }
          delete: {
            args: Prisma.RefreshTokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          update: {
            args: Prisma.RefreshTokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          deleteMany: {
            args: Prisma.RefreshTokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RefreshTokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RefreshTokenUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>[]
          }
          upsert: {
            args: Prisma.RefreshTokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          aggregate: {
            args: Prisma.RefreshTokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRefreshToken>
          }
          groupBy: {
            args: Prisma.RefreshTokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<RefreshTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.RefreshTokenCountArgs<ExtArgs>
            result: $Utils.Optional<RefreshTokenCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    category?: CategoryOmit
    event?: EventOmit
    location?: LocationOmit
    eventImage?: EventImageOmit
    eventAttendee?: EventAttendeeOmit
    conferenceDay?: ConferenceDayOmit
    section?: SectionOmit
    presentation?: PresentationOmit
    presentationAuthor?: PresentationAuthorOmit
    affiliation?: AffiliationOmit
    presentationMaterial?: PresentationMaterialOmit
    break?: BreakOmit
    favorite?: FavoriteOmit
    adminActionLog?: AdminActionLogOmit
    userProfile?: UserProfileOmit
    conferenceRegistration?: ConferenceRegistrationOmit
    presentationMetrics?: PresentationMetricsOmit
    refreshToken?: RefreshTokenOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    organizedEvents: number
    attendedEvents: number
    favorites: number
    authoredPresentations: number
    adminActionsTaken: number
    adminLogsAsOrganizer: number
    conferenceRegistrations: number
    refreshTokens: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organizedEvents?: boolean | UserCountOutputTypeCountOrganizedEventsArgs
    attendedEvents?: boolean | UserCountOutputTypeCountAttendedEventsArgs
    favorites?: boolean | UserCountOutputTypeCountFavoritesArgs
    authoredPresentations?: boolean | UserCountOutputTypeCountAuthoredPresentationsArgs
    adminActionsTaken?: boolean | UserCountOutputTypeCountAdminActionsTakenArgs
    adminLogsAsOrganizer?: boolean | UserCountOutputTypeCountAdminLogsAsOrganizerArgs
    conferenceRegistrations?: boolean | UserCountOutputTypeCountConferenceRegistrationsArgs
    refreshTokens?: boolean | UserCountOutputTypeCountRefreshTokensArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOrganizedEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAttendedEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventAttendeeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFavoritesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FavoriteWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAuthoredPresentationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PresentationAuthorWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAdminActionsTakenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminActionLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAdminLogsAsOrganizerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminActionLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountConferenceRegistrationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConferenceRegistrationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRefreshTokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RefreshTokenWhereInput
  }


  /**
   * Count Type CategoryCountOutputType
   */

  export type CategoryCountOutputType = {
    events: number
  }

  export type CategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    events?: boolean | CategoryCountOutputTypeCountEventsArgs
  }

  // Custom InputTypes
  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
  }


  /**
   * Count Type EventCountOutputType
   */

  export type EventCountOutputType = {
    attendees: number
    days: number
    registrations: number
  }

  export type EventCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attendees?: boolean | EventCountOutputTypeCountAttendeesArgs
    days?: boolean | EventCountOutputTypeCountDaysArgs
    registrations?: boolean | EventCountOutputTypeCountRegistrationsArgs
  }

  // Custom InputTypes
  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventCountOutputType
     */
    select?: EventCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountAttendeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventAttendeeWhereInput
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountDaysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConferenceDayWhereInput
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountRegistrationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConferenceRegistrationWhereInput
  }


  /**
   * Count Type LocationCountOutputType
   */

  export type LocationCountOutputType = {
    events: number
  }

  export type LocationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    events?: boolean | LocationCountOutputTypeCountEventsArgs
  }

  // Custom InputTypes
  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationCountOutputType
     */
    select?: LocationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeCountEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
  }


  /**
   * Count Type ConferenceDayCountOutputType
   */

  export type ConferenceDayCountOutputType = {
    sections: number
  }

  export type ConferenceDayCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sections?: boolean | ConferenceDayCountOutputTypeCountSectionsArgs
  }

  // Custom InputTypes
  /**
   * ConferenceDayCountOutputType without action
   */
  export type ConferenceDayCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConferenceDayCountOutputType
     */
    select?: ConferenceDayCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ConferenceDayCountOutputType without action
   */
  export type ConferenceDayCountOutputTypeCountSectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SectionWhereInput
  }


  /**
   * Count Type SectionCountOutputType
   */

  export type SectionCountOutputType = {
    presentations: number
    breaks: number
  }

  export type SectionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    presentations?: boolean | SectionCountOutputTypeCountPresentationsArgs
    breaks?: boolean | SectionCountOutputTypeCountBreaksArgs
  }

  // Custom InputTypes
  /**
   * SectionCountOutputType without action
   */
  export type SectionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SectionCountOutputType
     */
    select?: SectionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SectionCountOutputType without action
   */
  export type SectionCountOutputTypeCountPresentationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PresentationWhereInput
  }

  /**
   * SectionCountOutputType without action
   */
  export type SectionCountOutputTypeCountBreaksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BreakWhereInput
  }


  /**
   * Count Type PresentationCountOutputType
   */

  export type PresentationCountOutputType = {
    authors: number
    materials: number
    favorites: number
  }

  export type PresentationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    authors?: boolean | PresentationCountOutputTypeCountAuthorsArgs
    materials?: boolean | PresentationCountOutputTypeCountMaterialsArgs
    favorites?: boolean | PresentationCountOutputTypeCountFavoritesArgs
  }

  // Custom InputTypes
  /**
   * PresentationCountOutputType without action
   */
  export type PresentationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PresentationCountOutputType
     */
    select?: PresentationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PresentationCountOutputType without action
   */
  export type PresentationCountOutputTypeCountAuthorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PresentationAuthorWhereInput
  }

  /**
   * PresentationCountOutputType without action
   */
  export type PresentationCountOutputTypeCountMaterialsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PresentationMaterialWhereInput
  }

  /**
   * PresentationCountOutputType without action
   */
  export type PresentationCountOutputTypeCountFavoritesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FavoriteWhereInput
  }


  /**
   * Count Type AffiliationCountOutputType
   */

  export type AffiliationCountOutputType = {
    authors: number
  }

  export type AffiliationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    authors?: boolean | AffiliationCountOutputTypeCountAuthorsArgs
  }

  // Custom InputTypes
  /**
   * AffiliationCountOutputType without action
   */
  export type AffiliationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AffiliationCountOutputType
     */
    select?: AffiliationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AffiliationCountOutputType without action
   */
  export type AffiliationCountOutputTypeCountAuthorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PresentationAuthorWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    password: string | null
    role: $Enums.UserRole | null
    createdAt: Date | null
    updatedAt: Date | null
    logo: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    password: string | null
    role: $Enums.UserRole | null
    createdAt: Date | null
    updatedAt: Date | null
    logo: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    password: number
    role: number
    createdAt: number
    updatedAt: number
    logo: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    logo?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    logo?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    logo?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    name: string
    password: string
    role: $Enums.UserRole
    createdAt: Date
    updatedAt: Date
    logo: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    logo?: boolean
    profile?: boolean | User$profileArgs<ExtArgs>
    organizedEvents?: boolean | User$organizedEventsArgs<ExtArgs>
    attendedEvents?: boolean | User$attendedEventsArgs<ExtArgs>
    favorites?: boolean | User$favoritesArgs<ExtArgs>
    authoredPresentations?: boolean | User$authoredPresentationsArgs<ExtArgs>
    adminActionsTaken?: boolean | User$adminActionsTakenArgs<ExtArgs>
    adminLogsAsOrganizer?: boolean | User$adminLogsAsOrganizerArgs<ExtArgs>
    conferenceRegistrations?: boolean | User$conferenceRegistrationsArgs<ExtArgs>
    refreshTokens?: boolean | User$refreshTokensArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    logo?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    logo?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    logo?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "name" | "password" | "role" | "createdAt" | "updatedAt" | "logo", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile?: boolean | User$profileArgs<ExtArgs>
    organizedEvents?: boolean | User$organizedEventsArgs<ExtArgs>
    attendedEvents?: boolean | User$attendedEventsArgs<ExtArgs>
    favorites?: boolean | User$favoritesArgs<ExtArgs>
    authoredPresentations?: boolean | User$authoredPresentationsArgs<ExtArgs>
    adminActionsTaken?: boolean | User$adminActionsTakenArgs<ExtArgs>
    adminLogsAsOrganizer?: boolean | User$adminLogsAsOrganizerArgs<ExtArgs>
    conferenceRegistrations?: boolean | User$conferenceRegistrationsArgs<ExtArgs>
    refreshTokens?: boolean | User$refreshTokensArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      profile: Prisma.$UserProfilePayload<ExtArgs> | null
      organizedEvents: Prisma.$EventPayload<ExtArgs>[]
      attendedEvents: Prisma.$EventAttendeePayload<ExtArgs>[]
      favorites: Prisma.$FavoritePayload<ExtArgs>[]
      authoredPresentations: Prisma.$PresentationAuthorPayload<ExtArgs>[]
      adminActionsTaken: Prisma.$AdminActionLogPayload<ExtArgs>[]
      adminLogsAsOrganizer: Prisma.$AdminActionLogPayload<ExtArgs>[]
      conferenceRegistrations: Prisma.$ConferenceRegistrationPayload<ExtArgs>[]
      refreshTokens: Prisma.$RefreshTokenPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      name: string
      password: string
      role: $Enums.UserRole
      createdAt: Date
      updatedAt: Date
      logo: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    profile<T extends User$profileArgs<ExtArgs> = {}>(args?: Subset<T, User$profileArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    organizedEvents<T extends User$organizedEventsArgs<ExtArgs> = {}>(args?: Subset<T, User$organizedEventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    attendedEvents<T extends User$attendedEventsArgs<ExtArgs> = {}>(args?: Subset<T, User$attendedEventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventAttendeePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    favorites<T extends User$favoritesArgs<ExtArgs> = {}>(args?: Subset<T, User$favoritesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    authoredPresentations<T extends User$authoredPresentationsArgs<ExtArgs> = {}>(args?: Subset<T, User$authoredPresentationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PresentationAuthorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    adminActionsTaken<T extends User$adminActionsTakenArgs<ExtArgs> = {}>(args?: Subset<T, User$adminActionsTakenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminActionLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    adminLogsAsOrganizer<T extends User$adminLogsAsOrganizerArgs<ExtArgs> = {}>(args?: Subset<T, User$adminLogsAsOrganizerArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminActionLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    conferenceRegistrations<T extends User$conferenceRegistrationsArgs<ExtArgs> = {}>(args?: Subset<T, User$conferenceRegistrationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConferenceRegistrationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    refreshTokens<T extends User$refreshTokensArgs<ExtArgs> = {}>(args?: Subset<T, User$refreshTokensArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly logo: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.profile
   */
  export type User$profileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    where?: UserProfileWhereInput
  }

  /**
   * User.organizedEvents
   */
  export type User$organizedEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    where?: EventWhereInput
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    cursor?: EventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * User.attendedEvents
   */
  export type User$attendedEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventAttendee
     */
    select?: EventAttendeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventAttendee
     */
    omit?: EventAttendeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventAttendeeInclude<ExtArgs> | null
    where?: EventAttendeeWhereInput
    orderBy?: EventAttendeeOrderByWithRelationInput | EventAttendeeOrderByWithRelationInput[]
    cursor?: EventAttendeeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventAttendeeScalarFieldEnum | EventAttendeeScalarFieldEnum[]
  }

  /**
   * User.favorites
   */
  export type User$favoritesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Favorite
     */
    omit?: FavoriteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteInclude<ExtArgs> | null
    where?: FavoriteWhereInput
    orderBy?: FavoriteOrderByWithRelationInput | FavoriteOrderByWithRelationInput[]
    cursor?: FavoriteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FavoriteScalarFieldEnum | FavoriteScalarFieldEnum[]
  }

  /**
   * User.authoredPresentations
   */
  export type User$authoredPresentationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PresentationAuthor
     */
    select?: PresentationAuthorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PresentationAuthor
     */
    omit?: PresentationAuthorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationAuthorInclude<ExtArgs> | null
    where?: PresentationAuthorWhereInput
    orderBy?: PresentationAuthorOrderByWithRelationInput | PresentationAuthorOrderByWithRelationInput[]
    cursor?: PresentationAuthorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PresentationAuthorScalarFieldEnum | PresentationAuthorScalarFieldEnum[]
  }

  /**
   * User.adminActionsTaken
   */
  export type User$adminActionsTakenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminActionLog
     */
    select?: AdminActionLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminActionLog
     */
    omit?: AdminActionLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminActionLogInclude<ExtArgs> | null
    where?: AdminActionLogWhereInput
    orderBy?: AdminActionLogOrderByWithRelationInput | AdminActionLogOrderByWithRelationInput[]
    cursor?: AdminActionLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AdminActionLogScalarFieldEnum | AdminActionLogScalarFieldEnum[]
  }

  /**
   * User.adminLogsAsOrganizer
   */
  export type User$adminLogsAsOrganizerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminActionLog
     */
    select?: AdminActionLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminActionLog
     */
    omit?: AdminActionLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminActionLogInclude<ExtArgs> | null
    where?: AdminActionLogWhereInput
    orderBy?: AdminActionLogOrderByWithRelationInput | AdminActionLogOrderByWithRelationInput[]
    cursor?: AdminActionLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AdminActionLogScalarFieldEnum | AdminActionLogScalarFieldEnum[]
  }

  /**
   * User.conferenceRegistrations
   */
  export type User$conferenceRegistrationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConferenceRegistration
     */
    select?: ConferenceRegistrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConferenceRegistration
     */
    omit?: ConferenceRegistrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConferenceRegistrationInclude<ExtArgs> | null
    where?: ConferenceRegistrationWhereInput
    orderBy?: ConferenceRegistrationOrderByWithRelationInput | ConferenceRegistrationOrderByWithRelationInput[]
    cursor?: ConferenceRegistrationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConferenceRegistrationScalarFieldEnum | ConferenceRegistrationScalarFieldEnum[]
  }

  /**
   * User.refreshTokens
   */
  export type User$refreshTokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    where?: RefreshTokenWhereInput
    orderBy?: RefreshTokenOrderByWithRelationInput | RefreshTokenOrderByWithRelationInput[]
    cursor?: RefreshTokenWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RefreshTokenScalarFieldEnum | RefreshTokenScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryMinAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    description: string | null
    color: string | null
    isActive: boolean | null
    createdAt: Date | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    description: string | null
    color: string | null
    isActive: boolean | null
    createdAt: Date | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    name: number
    slug: number
    description: number
    color: number
    isActive: number
    createdAt: number
    _all: number
  }


  export type CategoryMinAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    description?: true
    color?: true
    isActive?: true
    createdAt?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    description?: true
    color?: true
    isActive?: true
    createdAt?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    description?: true
    color?: true
    isActive?: true
    createdAt?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithAggregationInput | CategoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    id: string
    name: string
    slug: string
    description: string | null
    color: string
    isActive: boolean
    createdAt: Date
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    description?: boolean
    color?: boolean
    isActive?: boolean
    createdAt?: boolean
    events?: boolean | Category$eventsArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    description?: boolean
    color?: boolean
    isActive?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["category"]>

  export type CategorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    description?: boolean
    color?: boolean
    isActive?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["category"]>

  export type CategorySelectScalar = {
    id?: boolean
    name?: boolean
    slug?: boolean
    description?: boolean
    color?: boolean
    isActive?: boolean
    createdAt?: boolean
  }

  export type CategoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "slug" | "description" | "color" | "isActive" | "createdAt", ExtArgs["result"]["category"]>
  export type CategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    events?: boolean | Category$eventsArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CategoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Category"
    objects: {
      events: Prisma.$EventPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      slug: string
      description: string | null
      color: string
      isActive: boolean
      createdAt: Date
    }, ExtArgs["result"]["category"]>
    composites: {}
  }

  type CategoryGetPayload<S extends boolean | null | undefined | CategoryDefaultArgs> = $Result.GetResult<Prisma.$CategoryPayload, S>

  type CategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Category'], meta: { name: 'Category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoryFindUniqueArgs>(args: SelectSubset<T, CategoryFindUniqueArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Category that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoryFindFirstArgs>(args?: SelectSubset<T, CategoryFindFirstArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CategoryFindManyArgs>(args?: SelectSubset<T, CategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
     */
    create<T extends CategoryCreateArgs>(args: SelectSubset<T, CategoryCreateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Categories.
     * @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoryCreateManyArgs>(args?: SelectSubset<T, CategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Categories and returns the data saved in the database.
     * @param {CategoryCreateManyAndReturnArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Categories and only return the `id`
     * const categoryWithIdOnly = await prisma.category.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, CategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
     */
    delete<T extends CategoryDeleteArgs>(args: SelectSubset<T, CategoryDeleteArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoryUpdateArgs>(args: SelectSubset<T, CategoryUpdateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoryDeleteManyArgs>(args?: SelectSubset<T, CategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoryUpdateManyArgs>(args: SelectSubset<T, CategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories and returns the data updated in the database.
     * @param {CategoryUpdateManyAndReturnArgs} args - Arguments to update many Categories.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Categories and only return the `id`
     * const categoryWithIdOnly = await prisma.category.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CategoryUpdateManyAndReturnArgs>(args: SelectSubset<T, CategoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
     */
    upsert<T extends CategoryUpsertArgs>(args: SelectSubset<T, CategoryUpsertArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Category model
   */
  readonly fields: CategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    events<T extends Category$eventsArgs<ExtArgs> = {}>(args?: Subset<T, Category$eventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Category model
   */
  interface CategoryFieldRefs {
    readonly id: FieldRef<"Category", 'String'>
    readonly name: FieldRef<"Category", 'String'>
    readonly slug: FieldRef<"Category", 'String'>
    readonly description: FieldRef<"Category", 'String'>
    readonly color: FieldRef<"Category", 'String'>
    readonly isActive: FieldRef<"Category", 'Boolean'>
    readonly createdAt: FieldRef<"Category", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findMany
   */
  export type CategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category create
   */
  export type CategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Category.
     */
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }

  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category createManyAndReturn
   */
  export type CategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category update
   */
  export type CategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to update.
     */
    limit?: number
  }

  /**
   * Category updateManyAndReturn
   */
  export type CategoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to update.
     */
    limit?: number
  }

  /**
   * Category upsert
   */
  export type CategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }

  /**
   * Category delete
   */
  export type CategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to delete.
     */
    limit?: number
  }

  /**
   * Category.events
   */
  export type Category$eventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    where?: EventWhereInput
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    cursor?: EventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Category without action
   */
  export type CategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
  }


  /**
   * Model Event
   */

  export type AggregateEvent = {
    _count: EventCountAggregateOutputType | null
    _avg: EventAvgAggregateOutputType | null
    _sum: EventSumAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  export type EventAvgAggregateOutputType = {
    maxCapacity: number | null
    viewCount: number | null
    attendeeCount: number | null
  }

  export type EventSumAggregateOutputType = {
    maxCapacity: number | null
    viewCount: number | null
    attendeeCount: number | null
  }

  export type EventMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    startDate: Date | null
    endDate: Date | null
    slug: string | null
    status: $Enums.EventStatus | null
    isFeatured: boolean | null
    locationId: string | null
    maxCapacity: number | null
    isEducational: boolean | null
    organizerId: string | null
    categoryId: string | null
    viewCount: number | null
    attendeeCount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EventMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    startDate: Date | null
    endDate: Date | null
    slug: string | null
    status: $Enums.EventStatus | null
    isFeatured: boolean | null
    locationId: string | null
    maxCapacity: number | null
    isEducational: boolean | null
    organizerId: string | null
    categoryId: string | null
    viewCount: number | null
    attendeeCount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EventCountAggregateOutputType = {
    id: number
    title: number
    description: number
    startDate: number
    endDate: number
    slug: number
    status: number
    isFeatured: number
    locationId: number
    maxCapacity: number
    isEducational: number
    organizerId: number
    categoryId: number
    viewCount: number
    attendeeCount: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EventAvgAggregateInputType = {
    maxCapacity?: true
    viewCount?: true
    attendeeCount?: true
  }

  export type EventSumAggregateInputType = {
    maxCapacity?: true
    viewCount?: true
    attendeeCount?: true
  }

  export type EventMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    startDate?: true
    endDate?: true
    slug?: true
    status?: true
    isFeatured?: true
    locationId?: true
    maxCapacity?: true
    isEducational?: true
    organizerId?: true
    categoryId?: true
    viewCount?: true
    attendeeCount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EventMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    startDate?: true
    endDate?: true
    slug?: true
    status?: true
    isFeatured?: true
    locationId?: true
    maxCapacity?: true
    isEducational?: true
    organizerId?: true
    categoryId?: true
    viewCount?: true
    attendeeCount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EventCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    startDate?: true
    endDate?: true
    slug?: true
    status?: true
    isFeatured?: true
    locationId?: true
    maxCapacity?: true
    isEducational?: true
    organizerId?: true
    categoryId?: true
    viewCount?: true
    attendeeCount?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Event to aggregate.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Events
    **/
    _count?: true | EventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EventAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EventSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventMaxAggregateInputType
  }

  export type GetEventAggregateType<T extends EventAggregateArgs> = {
        [P in keyof T & keyof AggregateEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEvent[P]>
      : GetScalarType<T[P], AggregateEvent[P]>
  }




  export type EventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
    orderBy?: EventOrderByWithAggregationInput | EventOrderByWithAggregationInput[]
    by: EventScalarFieldEnum[] | EventScalarFieldEnum
    having?: EventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventCountAggregateInputType | true
    _avg?: EventAvgAggregateInputType
    _sum?: EventSumAggregateInputType
    _min?: EventMinAggregateInputType
    _max?: EventMaxAggregateInputType
  }

  export type EventGroupByOutputType = {
    id: string
    title: string
    description: string
    startDate: Date
    endDate: Date
    slug: string
    status: $Enums.EventStatus
    isFeatured: boolean
    locationId: string
    maxCapacity: number
    isEducational: boolean
    organizerId: string
    categoryId: string
    viewCount: number
    attendeeCount: number
    createdAt: Date
    updatedAt: Date
    _count: EventCountAggregateOutputType | null
    _avg: EventAvgAggregateOutputType | null
    _sum: EventSumAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  type GetEventGroupByPayload<T extends EventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventGroupByOutputType[P]>
            : GetScalarType<T[P], EventGroupByOutputType[P]>
        }
      >
    >


  export type EventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    startDate?: boolean
    endDate?: boolean
    slug?: boolean
    status?: boolean
    isFeatured?: boolean
    locationId?: boolean
    maxCapacity?: boolean
    isEducational?: boolean
    organizerId?: boolean
    categoryId?: boolean
    viewCount?: boolean
    attendeeCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    location?: boolean | LocationDefaultArgs<ExtArgs>
    images?: boolean | Event$imagesArgs<ExtArgs>
    organizer?: boolean | UserDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    attendees?: boolean | Event$attendeesArgs<ExtArgs>
    days?: boolean | Event$daysArgs<ExtArgs>
    registrations?: boolean | Event$registrationsArgs<ExtArgs>
    _count?: boolean | EventCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["event"]>

  export type EventSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    startDate?: boolean
    endDate?: boolean
    slug?: boolean
    status?: boolean
    isFeatured?: boolean
    locationId?: boolean
    maxCapacity?: boolean
    isEducational?: boolean
    organizerId?: boolean
    categoryId?: boolean
    viewCount?: boolean
    attendeeCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    location?: boolean | LocationDefaultArgs<ExtArgs>
    organizer?: boolean | UserDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["event"]>

  export type EventSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    startDate?: boolean
    endDate?: boolean
    slug?: boolean
    status?: boolean
    isFeatured?: boolean
    locationId?: boolean
    maxCapacity?: boolean
    isEducational?: boolean
    organizerId?: boolean
    categoryId?: boolean
    viewCount?: boolean
    attendeeCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    location?: boolean | LocationDefaultArgs<ExtArgs>
    organizer?: boolean | UserDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["event"]>

  export type EventSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    startDate?: boolean
    endDate?: boolean
    slug?: boolean
    status?: boolean
    isFeatured?: boolean
    locationId?: boolean
    maxCapacity?: boolean
    isEducational?: boolean
    organizerId?: boolean
    categoryId?: boolean
    viewCount?: boolean
    attendeeCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type EventOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "startDate" | "endDate" | "slug" | "status" | "isFeatured" | "locationId" | "maxCapacity" | "isEducational" | "organizerId" | "categoryId" | "viewCount" | "attendeeCount" | "createdAt" | "updatedAt", ExtArgs["result"]["event"]>
  export type EventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    location?: boolean | LocationDefaultArgs<ExtArgs>
    images?: boolean | Event$imagesArgs<ExtArgs>
    organizer?: boolean | UserDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    attendees?: boolean | Event$attendeesArgs<ExtArgs>
    days?: boolean | Event$daysArgs<ExtArgs>
    registrations?: boolean | Event$registrationsArgs<ExtArgs>
    _count?: boolean | EventCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EventIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    location?: boolean | LocationDefaultArgs<ExtArgs>
    organizer?: boolean | UserDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }
  export type EventIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    location?: boolean | LocationDefaultArgs<ExtArgs>
    organizer?: boolean | UserDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }

  export type $EventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Event"
    objects: {
      location: Prisma.$LocationPayload<ExtArgs>
      images: Prisma.$EventImagePayload<ExtArgs> | null
      organizer: Prisma.$UserPayload<ExtArgs>
      category: Prisma.$CategoryPayload<ExtArgs>
      attendees: Prisma.$EventAttendeePayload<ExtArgs>[]
      days: Prisma.$ConferenceDayPayload<ExtArgs>[]
      registrations: Prisma.$ConferenceRegistrationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string
      startDate: Date
      endDate: Date
      slug: string
      status: $Enums.EventStatus
      isFeatured: boolean
      locationId: string
      maxCapacity: number
      isEducational: boolean
      organizerId: string
      categoryId: string
      viewCount: number
      attendeeCount: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["event"]>
    composites: {}
  }

  type EventGetPayload<S extends boolean | null | undefined | EventDefaultArgs> = $Result.GetResult<Prisma.$EventPayload, S>

  type EventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EventFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EventCountAggregateInputType | true
    }

  export interface EventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Event'], meta: { name: 'Event' } }
    /**
     * Find zero or one Event that matches the filter.
     * @param {EventFindUniqueArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EventFindUniqueArgs>(args: SelectSubset<T, EventFindUniqueArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Event that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EventFindUniqueOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EventFindUniqueOrThrowArgs>(args: SelectSubset<T, EventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Event that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EventFindFirstArgs>(args?: SelectSubset<T, EventFindFirstArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Event that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EventFindFirstOrThrowArgs>(args?: SelectSubset<T, EventFindFirstOrThrowArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Events that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Events
     * const events = await prisma.event.findMany()
     * 
     * // Get first 10 Events
     * const events = await prisma.event.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventWithIdOnly = await prisma.event.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EventFindManyArgs>(args?: SelectSubset<T, EventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Event.
     * @param {EventCreateArgs} args - Arguments to create a Event.
     * @example
     * // Create one Event
     * const Event = await prisma.event.create({
     *   data: {
     *     // ... data to create a Event
     *   }
     * })
     * 
     */
    create<T extends EventCreateArgs>(args: SelectSubset<T, EventCreateArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Events.
     * @param {EventCreateManyArgs} args - Arguments to create many Events.
     * @example
     * // Create many Events
     * const event = await prisma.event.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EventCreateManyArgs>(args?: SelectSubset<T, EventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Events and returns the data saved in the database.
     * @param {EventCreateManyAndReturnArgs} args - Arguments to create many Events.
     * @example
     * // Create many Events
     * const event = await prisma.event.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Events and only return the `id`
     * const eventWithIdOnly = await prisma.event.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EventCreateManyAndReturnArgs>(args?: SelectSubset<T, EventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Event.
     * @param {EventDeleteArgs} args - Arguments to delete one Event.
     * @example
     * // Delete one Event
     * const Event = await prisma.event.delete({
     *   where: {
     *     // ... filter to delete one Event
     *   }
     * })
     * 
     */
    delete<T extends EventDeleteArgs>(args: SelectSubset<T, EventDeleteArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Event.
     * @param {EventUpdateArgs} args - Arguments to update one Event.
     * @example
     * // Update one Event
     * const event = await prisma.event.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EventUpdateArgs>(args: SelectSubset<T, EventUpdateArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Events.
     * @param {EventDeleteManyArgs} args - Arguments to filter Events to delete.
     * @example
     * // Delete a few Events
     * const { count } = await prisma.event.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EventDeleteManyArgs>(args?: SelectSubset<T, EventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Events
     * const event = await prisma.event.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EventUpdateManyArgs>(args: SelectSubset<T, EventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Events and returns the data updated in the database.
     * @param {EventUpdateManyAndReturnArgs} args - Arguments to update many Events.
     * @example
     * // Update many Events
     * const event = await prisma.event.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Events and only return the `id`
     * const eventWithIdOnly = await prisma.event.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EventUpdateManyAndReturnArgs>(args: SelectSubset<T, EventUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Event.
     * @param {EventUpsertArgs} args - Arguments to update or create a Event.
     * @example
     * // Update or create a Event
     * const event = await prisma.event.upsert({
     *   create: {
     *     // ... data to create a Event
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Event we want to update
     *   }
     * })
     */
    upsert<T extends EventUpsertArgs>(args: SelectSubset<T, EventUpsertArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventCountArgs} args - Arguments to filter Events to count.
     * @example
     * // Count the number of Events
     * const count = await prisma.event.count({
     *   where: {
     *     // ... the filter for the Events we want to count
     *   }
     * })
    **/
    count<T extends EventCountArgs>(
      args?: Subset<T, EventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventAggregateArgs>(args: Subset<T, EventAggregateArgs>): Prisma.PrismaPromise<GetEventAggregateType<T>>

    /**
     * Group by Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventGroupByArgs['orderBy'] }
        : { orderBy?: EventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Event model
   */
  readonly fields: EventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Event.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    location<T extends LocationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LocationDefaultArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    images<T extends Event$imagesArgs<ExtArgs> = {}>(args?: Subset<T, Event$imagesArgs<ExtArgs>>): Prisma__EventImageClient<$Result.GetResult<Prisma.$EventImagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    organizer<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    category<T extends CategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoryDefaultArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    attendees<T extends Event$attendeesArgs<ExtArgs> = {}>(args?: Subset<T, Event$attendeesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventAttendeePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    days<T extends Event$daysArgs<ExtArgs> = {}>(args?: Subset<T, Event$daysArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConferenceDayPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    registrations<T extends Event$registrationsArgs<ExtArgs> = {}>(args?: Subset<T, Event$registrationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConferenceRegistrationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Event model
   */
  interface EventFieldRefs {
    readonly id: FieldRef<"Event", 'String'>
    readonly title: FieldRef<"Event", 'String'>
    readonly description: FieldRef<"Event", 'String'>
    readonly startDate: FieldRef<"Event", 'DateTime'>
    readonly endDate: FieldRef<"Event", 'DateTime'>
    readonly slug: FieldRef<"Event", 'String'>
    readonly status: FieldRef<"Event", 'EventStatus'>
    readonly isFeatured: FieldRef<"Event", 'Boolean'>
    readonly locationId: FieldRef<"Event", 'String'>
    readonly maxCapacity: FieldRef<"Event", 'Int'>
    readonly isEducational: FieldRef<"Event", 'Boolean'>
    readonly organizerId: FieldRef<"Event", 'String'>
    readonly categoryId: FieldRef<"Event", 'String'>
    readonly viewCount: FieldRef<"Event", 'Int'>
    readonly attendeeCount: FieldRef<"Event", 'Int'>
    readonly createdAt: FieldRef<"Event", 'DateTime'>
    readonly updatedAt: FieldRef<"Event", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Event findUnique
   */
  export type EventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event findUniqueOrThrow
   */
  export type EventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event findFirst
   */
  export type EventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event findFirstOrThrow
   */
  export type EventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event findMany
   */
  export type EventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Events to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event create
   */
  export type EventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The data needed to create a Event.
     */
    data: XOR<EventCreateInput, EventUncheckedCreateInput>
  }

  /**
   * Event createMany
   */
  export type EventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Events.
     */
    data: EventCreateManyInput | EventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Event createManyAndReturn
   */
  export type EventCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * The data used to create many Events.
     */
    data: EventCreateManyInput | EventCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Event update
   */
  export type EventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The data needed to update a Event.
     */
    data: XOR<EventUpdateInput, EventUncheckedUpdateInput>
    /**
     * Choose, which Event to update.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event updateMany
   */
  export type EventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Events.
     */
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyInput>
    /**
     * Filter which Events to update
     */
    where?: EventWhereInput
    /**
     * Limit how many Events to update.
     */
    limit?: number
  }

  /**
   * Event updateManyAndReturn
   */
  export type EventUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * The data used to update Events.
     */
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyInput>
    /**
     * Filter which Events to update
     */
    where?: EventWhereInput
    /**
     * Limit how many Events to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Event upsert
   */
  export type EventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The filter to search for the Event to update in case it exists.
     */
    where: EventWhereUniqueInput
    /**
     * In case the Event found by the `where` argument doesn't exist, create a new Event with this data.
     */
    create: XOR<EventCreateInput, EventUncheckedCreateInput>
    /**
     * In case the Event was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventUpdateInput, EventUncheckedUpdateInput>
  }

  /**
   * Event delete
   */
  export type EventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter which Event to delete.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event deleteMany
   */
  export type EventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Events to delete
     */
    where?: EventWhereInput
    /**
     * Limit how many Events to delete.
     */
    limit?: number
  }

  /**
   * Event.images
   */
  export type Event$imagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventImage
     */
    select?: EventImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventImage
     */
    omit?: EventImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventImageInclude<ExtArgs> | null
    where?: EventImageWhereInput
  }

  /**
   * Event.attendees
   */
  export type Event$attendeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventAttendee
     */
    select?: EventAttendeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventAttendee
     */
    omit?: EventAttendeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventAttendeeInclude<ExtArgs> | null
    where?: EventAttendeeWhereInput
    orderBy?: EventAttendeeOrderByWithRelationInput | EventAttendeeOrderByWithRelationInput[]
    cursor?: EventAttendeeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventAttendeeScalarFieldEnum | EventAttendeeScalarFieldEnum[]
  }

  /**
   * Event.days
   */
  export type Event$daysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConferenceDay
     */
    select?: ConferenceDaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConferenceDay
     */
    omit?: ConferenceDayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConferenceDayInclude<ExtArgs> | null
    where?: ConferenceDayWhereInput
    orderBy?: ConferenceDayOrderByWithRelationInput | ConferenceDayOrderByWithRelationInput[]
    cursor?: ConferenceDayWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConferenceDayScalarFieldEnum | ConferenceDayScalarFieldEnum[]
  }

  /**
   * Event.registrations
   */
  export type Event$registrationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConferenceRegistration
     */
    select?: ConferenceRegistrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConferenceRegistration
     */
    omit?: ConferenceRegistrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConferenceRegistrationInclude<ExtArgs> | null
    where?: ConferenceRegistrationWhereInput
    orderBy?: ConferenceRegistrationOrderByWithRelationInput | ConferenceRegistrationOrderByWithRelationInput[]
    cursor?: ConferenceRegistrationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConferenceRegistrationScalarFieldEnum | ConferenceRegistrationScalarFieldEnum[]
  }

  /**
   * Event without action
   */
  export type EventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
  }


  /**
   * Model Location
   */

  export type AggregateLocation = {
    _count: LocationCountAggregateOutputType | null
    _min: LocationMinAggregateOutputType | null
    _max: LocationMaxAggregateOutputType | null
  }

  export type LocationMinAggregateOutputType = {
    id: string | null
    city: string | null
    country: string | null
    venue: string | null
  }

  export type LocationMaxAggregateOutputType = {
    id: string | null
    city: string | null
    country: string | null
    venue: string | null
  }

  export type LocationCountAggregateOutputType = {
    id: number
    city: number
    country: number
    venue: number
    _all: number
  }


  export type LocationMinAggregateInputType = {
    id?: true
    city?: true
    country?: true
    venue?: true
  }

  export type LocationMaxAggregateInputType = {
    id?: true
    city?: true
    country?: true
    venue?: true
  }

  export type LocationCountAggregateInputType = {
    id?: true
    city?: true
    country?: true
    venue?: true
    _all?: true
  }

  export type LocationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Location to aggregate.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Locations
    **/
    _count?: true | LocationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LocationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LocationMaxAggregateInputType
  }

  export type GetLocationAggregateType<T extends LocationAggregateArgs> = {
        [P in keyof T & keyof AggregateLocation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLocation[P]>
      : GetScalarType<T[P], AggregateLocation[P]>
  }




  export type LocationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LocationWhereInput
    orderBy?: LocationOrderByWithAggregationInput | LocationOrderByWithAggregationInput[]
    by: LocationScalarFieldEnum[] | LocationScalarFieldEnum
    having?: LocationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LocationCountAggregateInputType | true
    _min?: LocationMinAggregateInputType
    _max?: LocationMaxAggregateInputType
  }

  export type LocationGroupByOutputType = {
    id: string
    city: string
    country: string
    venue: string | null
    _count: LocationCountAggregateOutputType | null
    _min: LocationMinAggregateOutputType | null
    _max: LocationMaxAggregateOutputType | null
  }

  type GetLocationGroupByPayload<T extends LocationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LocationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LocationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LocationGroupByOutputType[P]>
            : GetScalarType<T[P], LocationGroupByOutputType[P]>
        }
      >
    >


  export type LocationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    city?: boolean
    country?: boolean
    venue?: boolean
    events?: boolean | Location$eventsArgs<ExtArgs>
    _count?: boolean | LocationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["location"]>

  export type LocationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    city?: boolean
    country?: boolean
    venue?: boolean
  }, ExtArgs["result"]["location"]>

  export type LocationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    city?: boolean
    country?: boolean
    venue?: boolean
  }, ExtArgs["result"]["location"]>

  export type LocationSelectScalar = {
    id?: boolean
    city?: boolean
    country?: boolean
    venue?: boolean
  }

  export type LocationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "city" | "country" | "venue", ExtArgs["result"]["location"]>
  export type LocationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    events?: boolean | Location$eventsArgs<ExtArgs>
    _count?: boolean | LocationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LocationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type LocationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $LocationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Location"
    objects: {
      events: Prisma.$EventPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      city: string
      country: string
      venue: string | null
    }, ExtArgs["result"]["location"]>
    composites: {}
  }

  type LocationGetPayload<S extends boolean | null | undefined | LocationDefaultArgs> = $Result.GetResult<Prisma.$LocationPayload, S>

  type LocationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LocationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LocationCountAggregateInputType | true
    }

  export interface LocationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Location'], meta: { name: 'Location' } }
    /**
     * Find zero or one Location that matches the filter.
     * @param {LocationFindUniqueArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LocationFindUniqueArgs>(args: SelectSubset<T, LocationFindUniqueArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Location that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LocationFindUniqueOrThrowArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LocationFindUniqueOrThrowArgs>(args: SelectSubset<T, LocationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Location that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindFirstArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LocationFindFirstArgs>(args?: SelectSubset<T, LocationFindFirstArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Location that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindFirstOrThrowArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LocationFindFirstOrThrowArgs>(args?: SelectSubset<T, LocationFindFirstOrThrowArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Locations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Locations
     * const locations = await prisma.location.findMany()
     * 
     * // Get first 10 Locations
     * const locations = await prisma.location.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const locationWithIdOnly = await prisma.location.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LocationFindManyArgs>(args?: SelectSubset<T, LocationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Location.
     * @param {LocationCreateArgs} args - Arguments to create a Location.
     * @example
     * // Create one Location
     * const Location = await prisma.location.create({
     *   data: {
     *     // ... data to create a Location
     *   }
     * })
     * 
     */
    create<T extends LocationCreateArgs>(args: SelectSubset<T, LocationCreateArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Locations.
     * @param {LocationCreateManyArgs} args - Arguments to create many Locations.
     * @example
     * // Create many Locations
     * const location = await prisma.location.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LocationCreateManyArgs>(args?: SelectSubset<T, LocationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Locations and returns the data saved in the database.
     * @param {LocationCreateManyAndReturnArgs} args - Arguments to create many Locations.
     * @example
     * // Create many Locations
     * const location = await prisma.location.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Locations and only return the `id`
     * const locationWithIdOnly = await prisma.location.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LocationCreateManyAndReturnArgs>(args?: SelectSubset<T, LocationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Location.
     * @param {LocationDeleteArgs} args - Arguments to delete one Location.
     * @example
     * // Delete one Location
     * const Location = await prisma.location.delete({
     *   where: {
     *     // ... filter to delete one Location
     *   }
     * })
     * 
     */
    delete<T extends LocationDeleteArgs>(args: SelectSubset<T, LocationDeleteArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Location.
     * @param {LocationUpdateArgs} args - Arguments to update one Location.
     * @example
     * // Update one Location
     * const location = await prisma.location.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LocationUpdateArgs>(args: SelectSubset<T, LocationUpdateArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Locations.
     * @param {LocationDeleteManyArgs} args - Arguments to filter Locations to delete.
     * @example
     * // Delete a few Locations
     * const { count } = await prisma.location.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LocationDeleteManyArgs>(args?: SelectSubset<T, LocationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Locations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Locations
     * const location = await prisma.location.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LocationUpdateManyArgs>(args: SelectSubset<T, LocationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Locations and returns the data updated in the database.
     * @param {LocationUpdateManyAndReturnArgs} args - Arguments to update many Locations.
     * @example
     * // Update many Locations
     * const location = await prisma.location.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Locations and only return the `id`
     * const locationWithIdOnly = await prisma.location.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LocationUpdateManyAndReturnArgs>(args: SelectSubset<T, LocationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Location.
     * @param {LocationUpsertArgs} args - Arguments to update or create a Location.
     * @example
     * // Update or create a Location
     * const location = await prisma.location.upsert({
     *   create: {
     *     // ... data to create a Location
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Location we want to update
     *   }
     * })
     */
    upsert<T extends LocationUpsertArgs>(args: SelectSubset<T, LocationUpsertArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Locations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationCountArgs} args - Arguments to filter Locations to count.
     * @example
     * // Count the number of Locations
     * const count = await prisma.location.count({
     *   where: {
     *     // ... the filter for the Locations we want to count
     *   }
     * })
    **/
    count<T extends LocationCountArgs>(
      args?: Subset<T, LocationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LocationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Location.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LocationAggregateArgs>(args: Subset<T, LocationAggregateArgs>): Prisma.PrismaPromise<GetLocationAggregateType<T>>

    /**
     * Group by Location.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LocationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LocationGroupByArgs['orderBy'] }
        : { orderBy?: LocationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LocationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLocationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Location model
   */
  readonly fields: LocationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Location.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LocationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    events<T extends Location$eventsArgs<ExtArgs> = {}>(args?: Subset<T, Location$eventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Location model
   */
  interface LocationFieldRefs {
    readonly id: FieldRef<"Location", 'String'>
    readonly city: FieldRef<"Location", 'String'>
    readonly country: FieldRef<"Location", 'String'>
    readonly venue: FieldRef<"Location", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Location findUnique
   */
  export type LocationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location findUniqueOrThrow
   */
  export type LocationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location findFirst
   */
  export type LocationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Locations.
     */
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * Location findFirstOrThrow
   */
  export type LocationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Locations.
     */
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * Location findMany
   */
  export type LocationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Locations to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * Location create
   */
  export type LocationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The data needed to create a Location.
     */
    data: XOR<LocationCreateInput, LocationUncheckedCreateInput>
  }

  /**
   * Location createMany
   */
  export type LocationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Locations.
     */
    data: LocationCreateManyInput | LocationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Location createManyAndReturn
   */
  export type LocationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * The data used to create many Locations.
     */
    data: LocationCreateManyInput | LocationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Location update
   */
  export type LocationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The data needed to update a Location.
     */
    data: XOR<LocationUpdateInput, LocationUncheckedUpdateInput>
    /**
     * Choose, which Location to update.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location updateMany
   */
  export type LocationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Locations.
     */
    data: XOR<LocationUpdateManyMutationInput, LocationUncheckedUpdateManyInput>
    /**
     * Filter which Locations to update
     */
    where?: LocationWhereInput
    /**
     * Limit how many Locations to update.
     */
    limit?: number
  }

  /**
   * Location updateManyAndReturn
   */
  export type LocationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * The data used to update Locations.
     */
    data: XOR<LocationUpdateManyMutationInput, LocationUncheckedUpdateManyInput>
    /**
     * Filter which Locations to update
     */
    where?: LocationWhereInput
    /**
     * Limit how many Locations to update.
     */
    limit?: number
  }

  /**
   * Location upsert
   */
  export type LocationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The filter to search for the Location to update in case it exists.
     */
    where: LocationWhereUniqueInput
    /**
     * In case the Location found by the `where` argument doesn't exist, create a new Location with this data.
     */
    create: XOR<LocationCreateInput, LocationUncheckedCreateInput>
    /**
     * In case the Location was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LocationUpdateInput, LocationUncheckedUpdateInput>
  }

  /**
   * Location delete
   */
  export type LocationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter which Location to delete.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location deleteMany
   */
  export type LocationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Locations to delete
     */
    where?: LocationWhereInput
    /**
     * Limit how many Locations to delete.
     */
    limit?: number
  }

  /**
   * Location.events
   */
  export type Location$eventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    where?: EventWhereInput
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    cursor?: EventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Location without action
   */
  export type LocationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
  }


  /**
   * Model EventImage
   */

  export type AggregateEventImage = {
    _count: EventImageCountAggregateOutputType | null
    _min: EventImageMinAggregateOutputType | null
    _max: EventImageMaxAggregateOutputType | null
  }

  export type EventImageMinAggregateOutputType = {
    id: string | null
    banner: string | null
    thumbnail: string | null
    eventId: string | null
  }

  export type EventImageMaxAggregateOutputType = {
    id: string | null
    banner: string | null
    thumbnail: string | null
    eventId: string | null
  }

  export type EventImageCountAggregateOutputType = {
    id: number
    banner: number
    thumbnail: number
    eventId: number
    _all: number
  }


  export type EventImageMinAggregateInputType = {
    id?: true
    banner?: true
    thumbnail?: true
    eventId?: true
  }

  export type EventImageMaxAggregateInputType = {
    id?: true
    banner?: true
    thumbnail?: true
    eventId?: true
  }

  export type EventImageCountAggregateInputType = {
    id?: true
    banner?: true
    thumbnail?: true
    eventId?: true
    _all?: true
  }

  export type EventImageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventImage to aggregate.
     */
    where?: EventImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventImages to fetch.
     */
    orderBy?: EventImageOrderByWithRelationInput | EventImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EventImages
    **/
    _count?: true | EventImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventImageMaxAggregateInputType
  }

  export type GetEventImageAggregateType<T extends EventImageAggregateArgs> = {
        [P in keyof T & keyof AggregateEventImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEventImage[P]>
      : GetScalarType<T[P], AggregateEventImage[P]>
  }




  export type EventImageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventImageWhereInput
    orderBy?: EventImageOrderByWithAggregationInput | EventImageOrderByWithAggregationInput[]
    by: EventImageScalarFieldEnum[] | EventImageScalarFieldEnum
    having?: EventImageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventImageCountAggregateInputType | true
    _min?: EventImageMinAggregateInputType
    _max?: EventImageMaxAggregateInputType
  }

  export type EventImageGroupByOutputType = {
    id: string
    banner: string | null
    thumbnail: string | null
    eventId: string
    _count: EventImageCountAggregateOutputType | null
    _min: EventImageMinAggregateOutputType | null
    _max: EventImageMaxAggregateOutputType | null
  }

  type GetEventImageGroupByPayload<T extends EventImageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventImageGroupByOutputType[P]>
            : GetScalarType<T[P], EventImageGroupByOutputType[P]>
        }
      >
    >


  export type EventImageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    banner?: boolean
    thumbnail?: boolean
    eventId?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eventImage"]>

  export type EventImageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    banner?: boolean
    thumbnail?: boolean
    eventId?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eventImage"]>

  export type EventImageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    banner?: boolean
    thumbnail?: boolean
    eventId?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eventImage"]>

  export type EventImageSelectScalar = {
    id?: boolean
    banner?: boolean
    thumbnail?: boolean
    eventId?: boolean
  }

  export type EventImageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "banner" | "thumbnail" | "eventId", ExtArgs["result"]["eventImage"]>
  export type EventImageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
  }
  export type EventImageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
  }
  export type EventImageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
  }

  export type $EventImagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EventImage"
    objects: {
      event: Prisma.$EventPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      banner: string | null
      thumbnail: string | null
      eventId: string
    }, ExtArgs["result"]["eventImage"]>
    composites: {}
  }

  type EventImageGetPayload<S extends boolean | null | undefined | EventImageDefaultArgs> = $Result.GetResult<Prisma.$EventImagePayload, S>

  type EventImageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EventImageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EventImageCountAggregateInputType | true
    }

  export interface EventImageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EventImage'], meta: { name: 'EventImage' } }
    /**
     * Find zero or one EventImage that matches the filter.
     * @param {EventImageFindUniqueArgs} args - Arguments to find a EventImage
     * @example
     * // Get one EventImage
     * const eventImage = await prisma.eventImage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EventImageFindUniqueArgs>(args: SelectSubset<T, EventImageFindUniqueArgs<ExtArgs>>): Prisma__EventImageClient<$Result.GetResult<Prisma.$EventImagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EventImage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EventImageFindUniqueOrThrowArgs} args - Arguments to find a EventImage
     * @example
     * // Get one EventImage
     * const eventImage = await prisma.eventImage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EventImageFindUniqueOrThrowArgs>(args: SelectSubset<T, EventImageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EventImageClient<$Result.GetResult<Prisma.$EventImagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EventImage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventImageFindFirstArgs} args - Arguments to find a EventImage
     * @example
     * // Get one EventImage
     * const eventImage = await prisma.eventImage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EventImageFindFirstArgs>(args?: SelectSubset<T, EventImageFindFirstArgs<ExtArgs>>): Prisma__EventImageClient<$Result.GetResult<Prisma.$EventImagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EventImage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventImageFindFirstOrThrowArgs} args - Arguments to find a EventImage
     * @example
     * // Get one EventImage
     * const eventImage = await prisma.eventImage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EventImageFindFirstOrThrowArgs>(args?: SelectSubset<T, EventImageFindFirstOrThrowArgs<ExtArgs>>): Prisma__EventImageClient<$Result.GetResult<Prisma.$EventImagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EventImages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventImageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EventImages
     * const eventImages = await prisma.eventImage.findMany()
     * 
     * // Get first 10 EventImages
     * const eventImages = await prisma.eventImage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventImageWithIdOnly = await prisma.eventImage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EventImageFindManyArgs>(args?: SelectSubset<T, EventImageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EventImage.
     * @param {EventImageCreateArgs} args - Arguments to create a EventImage.
     * @example
     * // Create one EventImage
     * const EventImage = await prisma.eventImage.create({
     *   data: {
     *     // ... data to create a EventImage
     *   }
     * })
     * 
     */
    create<T extends EventImageCreateArgs>(args: SelectSubset<T, EventImageCreateArgs<ExtArgs>>): Prisma__EventImageClient<$Result.GetResult<Prisma.$EventImagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EventImages.
     * @param {EventImageCreateManyArgs} args - Arguments to create many EventImages.
     * @example
     * // Create many EventImages
     * const eventImage = await prisma.eventImage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EventImageCreateManyArgs>(args?: SelectSubset<T, EventImageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EventImages and returns the data saved in the database.
     * @param {EventImageCreateManyAndReturnArgs} args - Arguments to create many EventImages.
     * @example
     * // Create many EventImages
     * const eventImage = await prisma.eventImage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EventImages and only return the `id`
     * const eventImageWithIdOnly = await prisma.eventImage.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EventImageCreateManyAndReturnArgs>(args?: SelectSubset<T, EventImageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventImagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EventImage.
     * @param {EventImageDeleteArgs} args - Arguments to delete one EventImage.
     * @example
     * // Delete one EventImage
     * const EventImage = await prisma.eventImage.delete({
     *   where: {
     *     // ... filter to delete one EventImage
     *   }
     * })
     * 
     */
    delete<T extends EventImageDeleteArgs>(args: SelectSubset<T, EventImageDeleteArgs<ExtArgs>>): Prisma__EventImageClient<$Result.GetResult<Prisma.$EventImagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EventImage.
     * @param {EventImageUpdateArgs} args - Arguments to update one EventImage.
     * @example
     * // Update one EventImage
     * const eventImage = await prisma.eventImage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EventImageUpdateArgs>(args: SelectSubset<T, EventImageUpdateArgs<ExtArgs>>): Prisma__EventImageClient<$Result.GetResult<Prisma.$EventImagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EventImages.
     * @param {EventImageDeleteManyArgs} args - Arguments to filter EventImages to delete.
     * @example
     * // Delete a few EventImages
     * const { count } = await prisma.eventImage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EventImageDeleteManyArgs>(args?: SelectSubset<T, EventImageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EventImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EventImages
     * const eventImage = await prisma.eventImage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EventImageUpdateManyArgs>(args: SelectSubset<T, EventImageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EventImages and returns the data updated in the database.
     * @param {EventImageUpdateManyAndReturnArgs} args - Arguments to update many EventImages.
     * @example
     * // Update many EventImages
     * const eventImage = await prisma.eventImage.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EventImages and only return the `id`
     * const eventImageWithIdOnly = await prisma.eventImage.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EventImageUpdateManyAndReturnArgs>(args: SelectSubset<T, EventImageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventImagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EventImage.
     * @param {EventImageUpsertArgs} args - Arguments to update or create a EventImage.
     * @example
     * // Update or create a EventImage
     * const eventImage = await prisma.eventImage.upsert({
     *   create: {
     *     // ... data to create a EventImage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EventImage we want to update
     *   }
     * })
     */
    upsert<T extends EventImageUpsertArgs>(args: SelectSubset<T, EventImageUpsertArgs<ExtArgs>>): Prisma__EventImageClient<$Result.GetResult<Prisma.$EventImagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EventImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventImageCountArgs} args - Arguments to filter EventImages to count.
     * @example
     * // Count the number of EventImages
     * const count = await prisma.eventImage.count({
     *   where: {
     *     // ... the filter for the EventImages we want to count
     *   }
     * })
    **/
    count<T extends EventImageCountArgs>(
      args?: Subset<T, EventImageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EventImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventImageAggregateArgs>(args: Subset<T, EventImageAggregateArgs>): Prisma.PrismaPromise<GetEventImageAggregateType<T>>

    /**
     * Group by EventImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventImageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventImageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventImageGroupByArgs['orderBy'] }
        : { orderBy?: EventImageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EventImage model
   */
  readonly fields: EventImageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EventImage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventImageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    event<T extends EventDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventDefaultArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EventImage model
   */
  interface EventImageFieldRefs {
    readonly id: FieldRef<"EventImage", 'String'>
    readonly banner: FieldRef<"EventImage", 'String'>
    readonly thumbnail: FieldRef<"EventImage", 'String'>
    readonly eventId: FieldRef<"EventImage", 'String'>
  }
    

  // Custom InputTypes
  /**
   * EventImage findUnique
   */
  export type EventImageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventImage
     */
    select?: EventImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventImage
     */
    omit?: EventImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventImageInclude<ExtArgs> | null
    /**
     * Filter, which EventImage to fetch.
     */
    where: EventImageWhereUniqueInput
  }

  /**
   * EventImage findUniqueOrThrow
   */
  export type EventImageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventImage
     */
    select?: EventImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventImage
     */
    omit?: EventImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventImageInclude<ExtArgs> | null
    /**
     * Filter, which EventImage to fetch.
     */
    where: EventImageWhereUniqueInput
  }

  /**
   * EventImage findFirst
   */
  export type EventImageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventImage
     */
    select?: EventImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventImage
     */
    omit?: EventImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventImageInclude<ExtArgs> | null
    /**
     * Filter, which EventImage to fetch.
     */
    where?: EventImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventImages to fetch.
     */
    orderBy?: EventImageOrderByWithRelationInput | EventImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventImages.
     */
    cursor?: EventImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventImages.
     */
    distinct?: EventImageScalarFieldEnum | EventImageScalarFieldEnum[]
  }

  /**
   * EventImage findFirstOrThrow
   */
  export type EventImageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventImage
     */
    select?: EventImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventImage
     */
    omit?: EventImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventImageInclude<ExtArgs> | null
    /**
     * Filter, which EventImage to fetch.
     */
    where?: EventImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventImages to fetch.
     */
    orderBy?: EventImageOrderByWithRelationInput | EventImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventImages.
     */
    cursor?: EventImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventImages.
     */
    distinct?: EventImageScalarFieldEnum | EventImageScalarFieldEnum[]
  }

  /**
   * EventImage findMany
   */
  export type EventImageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventImage
     */
    select?: EventImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventImage
     */
    omit?: EventImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventImageInclude<ExtArgs> | null
    /**
     * Filter, which EventImages to fetch.
     */
    where?: EventImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventImages to fetch.
     */
    orderBy?: EventImageOrderByWithRelationInput | EventImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EventImages.
     */
    cursor?: EventImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventImages.
     */
    skip?: number
    distinct?: EventImageScalarFieldEnum | EventImageScalarFieldEnum[]
  }

  /**
   * EventImage create
   */
  export type EventImageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventImage
     */
    select?: EventImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventImage
     */
    omit?: EventImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventImageInclude<ExtArgs> | null
    /**
     * The data needed to create a EventImage.
     */
    data: XOR<EventImageCreateInput, EventImageUncheckedCreateInput>
  }

  /**
   * EventImage createMany
   */
  export type EventImageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EventImages.
     */
    data: EventImageCreateManyInput | EventImageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EventImage createManyAndReturn
   */
  export type EventImageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventImage
     */
    select?: EventImageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EventImage
     */
    omit?: EventImageOmit<ExtArgs> | null
    /**
     * The data used to create many EventImages.
     */
    data: EventImageCreateManyInput | EventImageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventImageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * EventImage update
   */
  export type EventImageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventImage
     */
    select?: EventImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventImage
     */
    omit?: EventImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventImageInclude<ExtArgs> | null
    /**
     * The data needed to update a EventImage.
     */
    data: XOR<EventImageUpdateInput, EventImageUncheckedUpdateInput>
    /**
     * Choose, which EventImage to update.
     */
    where: EventImageWhereUniqueInput
  }

  /**
   * EventImage updateMany
   */
  export type EventImageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EventImages.
     */
    data: XOR<EventImageUpdateManyMutationInput, EventImageUncheckedUpdateManyInput>
    /**
     * Filter which EventImages to update
     */
    where?: EventImageWhereInput
    /**
     * Limit how many EventImages to update.
     */
    limit?: number
  }

  /**
   * EventImage updateManyAndReturn
   */
  export type EventImageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventImage
     */
    select?: EventImageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EventImage
     */
    omit?: EventImageOmit<ExtArgs> | null
    /**
     * The data used to update EventImages.
     */
    data: XOR<EventImageUpdateManyMutationInput, EventImageUncheckedUpdateManyInput>
    /**
     * Filter which EventImages to update
     */
    where?: EventImageWhereInput
    /**
     * Limit how many EventImages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventImageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * EventImage upsert
   */
  export type EventImageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventImage
     */
    select?: EventImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventImage
     */
    omit?: EventImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventImageInclude<ExtArgs> | null
    /**
     * The filter to search for the EventImage to update in case it exists.
     */
    where: EventImageWhereUniqueInput
    /**
     * In case the EventImage found by the `where` argument doesn't exist, create a new EventImage with this data.
     */
    create: XOR<EventImageCreateInput, EventImageUncheckedCreateInput>
    /**
     * In case the EventImage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventImageUpdateInput, EventImageUncheckedUpdateInput>
  }

  /**
   * EventImage delete
   */
  export type EventImageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventImage
     */
    select?: EventImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventImage
     */
    omit?: EventImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventImageInclude<ExtArgs> | null
    /**
     * Filter which EventImage to delete.
     */
    where: EventImageWhereUniqueInput
  }

  /**
   * EventImage deleteMany
   */
  export type EventImageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventImages to delete
     */
    where?: EventImageWhereInput
    /**
     * Limit how many EventImages to delete.
     */
    limit?: number
  }

  /**
   * EventImage without action
   */
  export type EventImageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventImage
     */
    select?: EventImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventImage
     */
    omit?: EventImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventImageInclude<ExtArgs> | null
  }


  /**
   * Model EventAttendee
   */

  export type AggregateEventAttendee = {
    _count: EventAttendeeCountAggregateOutputType | null
    _min: EventAttendeeMinAggregateOutputType | null
    _max: EventAttendeeMaxAggregateOutputType | null
  }

  export type EventAttendeeMinAggregateOutputType = {
    id: string | null
    status: $Enums.AttendeeStatus | null
    registeredAt: Date | null
    userId: string | null
    eventId: string | null
  }

  export type EventAttendeeMaxAggregateOutputType = {
    id: string | null
    status: $Enums.AttendeeStatus | null
    registeredAt: Date | null
    userId: string | null
    eventId: string | null
  }

  export type EventAttendeeCountAggregateOutputType = {
    id: number
    status: number
    registeredAt: number
    userId: number
    eventId: number
    _all: number
  }


  export type EventAttendeeMinAggregateInputType = {
    id?: true
    status?: true
    registeredAt?: true
    userId?: true
    eventId?: true
  }

  export type EventAttendeeMaxAggregateInputType = {
    id?: true
    status?: true
    registeredAt?: true
    userId?: true
    eventId?: true
  }

  export type EventAttendeeCountAggregateInputType = {
    id?: true
    status?: true
    registeredAt?: true
    userId?: true
    eventId?: true
    _all?: true
  }

  export type EventAttendeeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventAttendee to aggregate.
     */
    where?: EventAttendeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventAttendees to fetch.
     */
    orderBy?: EventAttendeeOrderByWithRelationInput | EventAttendeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventAttendeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventAttendees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventAttendees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EventAttendees
    **/
    _count?: true | EventAttendeeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventAttendeeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventAttendeeMaxAggregateInputType
  }

  export type GetEventAttendeeAggregateType<T extends EventAttendeeAggregateArgs> = {
        [P in keyof T & keyof AggregateEventAttendee]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEventAttendee[P]>
      : GetScalarType<T[P], AggregateEventAttendee[P]>
  }




  export type EventAttendeeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventAttendeeWhereInput
    orderBy?: EventAttendeeOrderByWithAggregationInput | EventAttendeeOrderByWithAggregationInput[]
    by: EventAttendeeScalarFieldEnum[] | EventAttendeeScalarFieldEnum
    having?: EventAttendeeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventAttendeeCountAggregateInputType | true
    _min?: EventAttendeeMinAggregateInputType
    _max?: EventAttendeeMaxAggregateInputType
  }

  export type EventAttendeeGroupByOutputType = {
    id: string
    status: $Enums.AttendeeStatus
    registeredAt: Date
    userId: string
    eventId: string
    _count: EventAttendeeCountAggregateOutputType | null
    _min: EventAttendeeMinAggregateOutputType | null
    _max: EventAttendeeMaxAggregateOutputType | null
  }

  type GetEventAttendeeGroupByPayload<T extends EventAttendeeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventAttendeeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventAttendeeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventAttendeeGroupByOutputType[P]>
            : GetScalarType<T[P], EventAttendeeGroupByOutputType[P]>
        }
      >
    >


  export type EventAttendeeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    registeredAt?: boolean
    userId?: boolean
    eventId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eventAttendee"]>

  export type EventAttendeeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    registeredAt?: boolean
    userId?: boolean
    eventId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eventAttendee"]>

  export type EventAttendeeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    registeredAt?: boolean
    userId?: boolean
    eventId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eventAttendee"]>

  export type EventAttendeeSelectScalar = {
    id?: boolean
    status?: boolean
    registeredAt?: boolean
    userId?: boolean
    eventId?: boolean
  }

  export type EventAttendeeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "status" | "registeredAt" | "userId" | "eventId", ExtArgs["result"]["eventAttendee"]>
  export type EventAttendeeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
  }
  export type EventAttendeeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
  }
  export type EventAttendeeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
  }

  export type $EventAttendeePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EventAttendee"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      event: Prisma.$EventPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      status: $Enums.AttendeeStatus
      registeredAt: Date
      userId: string
      eventId: string
    }, ExtArgs["result"]["eventAttendee"]>
    composites: {}
  }

  type EventAttendeeGetPayload<S extends boolean | null | undefined | EventAttendeeDefaultArgs> = $Result.GetResult<Prisma.$EventAttendeePayload, S>

  type EventAttendeeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EventAttendeeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EventAttendeeCountAggregateInputType | true
    }

  export interface EventAttendeeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EventAttendee'], meta: { name: 'EventAttendee' } }
    /**
     * Find zero or one EventAttendee that matches the filter.
     * @param {EventAttendeeFindUniqueArgs} args - Arguments to find a EventAttendee
     * @example
     * // Get one EventAttendee
     * const eventAttendee = await prisma.eventAttendee.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EventAttendeeFindUniqueArgs>(args: SelectSubset<T, EventAttendeeFindUniqueArgs<ExtArgs>>): Prisma__EventAttendeeClient<$Result.GetResult<Prisma.$EventAttendeePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EventAttendee that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EventAttendeeFindUniqueOrThrowArgs} args - Arguments to find a EventAttendee
     * @example
     * // Get one EventAttendee
     * const eventAttendee = await prisma.eventAttendee.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EventAttendeeFindUniqueOrThrowArgs>(args: SelectSubset<T, EventAttendeeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EventAttendeeClient<$Result.GetResult<Prisma.$EventAttendeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EventAttendee that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventAttendeeFindFirstArgs} args - Arguments to find a EventAttendee
     * @example
     * // Get one EventAttendee
     * const eventAttendee = await prisma.eventAttendee.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EventAttendeeFindFirstArgs>(args?: SelectSubset<T, EventAttendeeFindFirstArgs<ExtArgs>>): Prisma__EventAttendeeClient<$Result.GetResult<Prisma.$EventAttendeePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EventAttendee that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventAttendeeFindFirstOrThrowArgs} args - Arguments to find a EventAttendee
     * @example
     * // Get one EventAttendee
     * const eventAttendee = await prisma.eventAttendee.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EventAttendeeFindFirstOrThrowArgs>(args?: SelectSubset<T, EventAttendeeFindFirstOrThrowArgs<ExtArgs>>): Prisma__EventAttendeeClient<$Result.GetResult<Prisma.$EventAttendeePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EventAttendees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventAttendeeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EventAttendees
     * const eventAttendees = await prisma.eventAttendee.findMany()
     * 
     * // Get first 10 EventAttendees
     * const eventAttendees = await prisma.eventAttendee.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventAttendeeWithIdOnly = await prisma.eventAttendee.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EventAttendeeFindManyArgs>(args?: SelectSubset<T, EventAttendeeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventAttendeePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EventAttendee.
     * @param {EventAttendeeCreateArgs} args - Arguments to create a EventAttendee.
     * @example
     * // Create one EventAttendee
     * const EventAttendee = await prisma.eventAttendee.create({
     *   data: {
     *     // ... data to create a EventAttendee
     *   }
     * })
     * 
     */
    create<T extends EventAttendeeCreateArgs>(args: SelectSubset<T, EventAttendeeCreateArgs<ExtArgs>>): Prisma__EventAttendeeClient<$Result.GetResult<Prisma.$EventAttendeePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EventAttendees.
     * @param {EventAttendeeCreateManyArgs} args - Arguments to create many EventAttendees.
     * @example
     * // Create many EventAttendees
     * const eventAttendee = await prisma.eventAttendee.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EventAttendeeCreateManyArgs>(args?: SelectSubset<T, EventAttendeeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EventAttendees and returns the data saved in the database.
     * @param {EventAttendeeCreateManyAndReturnArgs} args - Arguments to create many EventAttendees.
     * @example
     * // Create many EventAttendees
     * const eventAttendee = await prisma.eventAttendee.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EventAttendees and only return the `id`
     * const eventAttendeeWithIdOnly = await prisma.eventAttendee.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EventAttendeeCreateManyAndReturnArgs>(args?: SelectSubset<T, EventAttendeeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventAttendeePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EventAttendee.
     * @param {EventAttendeeDeleteArgs} args - Arguments to delete one EventAttendee.
     * @example
     * // Delete one EventAttendee
     * const EventAttendee = await prisma.eventAttendee.delete({
     *   where: {
     *     // ... filter to delete one EventAttendee
     *   }
     * })
     * 
     */
    delete<T extends EventAttendeeDeleteArgs>(args: SelectSubset<T, EventAttendeeDeleteArgs<ExtArgs>>): Prisma__EventAttendeeClient<$Result.GetResult<Prisma.$EventAttendeePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EventAttendee.
     * @param {EventAttendeeUpdateArgs} args - Arguments to update one EventAttendee.
     * @example
     * // Update one EventAttendee
     * const eventAttendee = await prisma.eventAttendee.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EventAttendeeUpdateArgs>(args: SelectSubset<T, EventAttendeeUpdateArgs<ExtArgs>>): Prisma__EventAttendeeClient<$Result.GetResult<Prisma.$EventAttendeePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EventAttendees.
     * @param {EventAttendeeDeleteManyArgs} args - Arguments to filter EventAttendees to delete.
     * @example
     * // Delete a few EventAttendees
     * const { count } = await prisma.eventAttendee.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EventAttendeeDeleteManyArgs>(args?: SelectSubset<T, EventAttendeeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EventAttendees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventAttendeeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EventAttendees
     * const eventAttendee = await prisma.eventAttendee.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EventAttendeeUpdateManyArgs>(args: SelectSubset<T, EventAttendeeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EventAttendees and returns the data updated in the database.
     * @param {EventAttendeeUpdateManyAndReturnArgs} args - Arguments to update many EventAttendees.
     * @example
     * // Update many EventAttendees
     * const eventAttendee = await prisma.eventAttendee.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EventAttendees and only return the `id`
     * const eventAttendeeWithIdOnly = await prisma.eventAttendee.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EventAttendeeUpdateManyAndReturnArgs>(args: SelectSubset<T, EventAttendeeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventAttendeePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EventAttendee.
     * @param {EventAttendeeUpsertArgs} args - Arguments to update or create a EventAttendee.
     * @example
     * // Update or create a EventAttendee
     * const eventAttendee = await prisma.eventAttendee.upsert({
     *   create: {
     *     // ... data to create a EventAttendee
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EventAttendee we want to update
     *   }
     * })
     */
    upsert<T extends EventAttendeeUpsertArgs>(args: SelectSubset<T, EventAttendeeUpsertArgs<ExtArgs>>): Prisma__EventAttendeeClient<$Result.GetResult<Prisma.$EventAttendeePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EventAttendees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventAttendeeCountArgs} args - Arguments to filter EventAttendees to count.
     * @example
     * // Count the number of EventAttendees
     * const count = await prisma.eventAttendee.count({
     *   where: {
     *     // ... the filter for the EventAttendees we want to count
     *   }
     * })
    **/
    count<T extends EventAttendeeCountArgs>(
      args?: Subset<T, EventAttendeeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventAttendeeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EventAttendee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventAttendeeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventAttendeeAggregateArgs>(args: Subset<T, EventAttendeeAggregateArgs>): Prisma.PrismaPromise<GetEventAttendeeAggregateType<T>>

    /**
     * Group by EventAttendee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventAttendeeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventAttendeeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventAttendeeGroupByArgs['orderBy'] }
        : { orderBy?: EventAttendeeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventAttendeeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventAttendeeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EventAttendee model
   */
  readonly fields: EventAttendeeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EventAttendee.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventAttendeeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    event<T extends EventDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventDefaultArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EventAttendee model
   */
  interface EventAttendeeFieldRefs {
    readonly id: FieldRef<"EventAttendee", 'String'>
    readonly status: FieldRef<"EventAttendee", 'AttendeeStatus'>
    readonly registeredAt: FieldRef<"EventAttendee", 'DateTime'>
    readonly userId: FieldRef<"EventAttendee", 'String'>
    readonly eventId: FieldRef<"EventAttendee", 'String'>
  }
    

  // Custom InputTypes
  /**
   * EventAttendee findUnique
   */
  export type EventAttendeeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventAttendee
     */
    select?: EventAttendeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventAttendee
     */
    omit?: EventAttendeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventAttendeeInclude<ExtArgs> | null
    /**
     * Filter, which EventAttendee to fetch.
     */
    where: EventAttendeeWhereUniqueInput
  }

  /**
   * EventAttendee findUniqueOrThrow
   */
  export type EventAttendeeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventAttendee
     */
    select?: EventAttendeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventAttendee
     */
    omit?: EventAttendeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventAttendeeInclude<ExtArgs> | null
    /**
     * Filter, which EventAttendee to fetch.
     */
    where: EventAttendeeWhereUniqueInput
  }

  /**
   * EventAttendee findFirst
   */
  export type EventAttendeeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventAttendee
     */
    select?: EventAttendeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventAttendee
     */
    omit?: EventAttendeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventAttendeeInclude<ExtArgs> | null
    /**
     * Filter, which EventAttendee to fetch.
     */
    where?: EventAttendeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventAttendees to fetch.
     */
    orderBy?: EventAttendeeOrderByWithRelationInput | EventAttendeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventAttendees.
     */
    cursor?: EventAttendeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventAttendees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventAttendees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventAttendees.
     */
    distinct?: EventAttendeeScalarFieldEnum | EventAttendeeScalarFieldEnum[]
  }

  /**
   * EventAttendee findFirstOrThrow
   */
  export type EventAttendeeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventAttendee
     */
    select?: EventAttendeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventAttendee
     */
    omit?: EventAttendeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventAttendeeInclude<ExtArgs> | null
    /**
     * Filter, which EventAttendee to fetch.
     */
    where?: EventAttendeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventAttendees to fetch.
     */
    orderBy?: EventAttendeeOrderByWithRelationInput | EventAttendeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventAttendees.
     */
    cursor?: EventAttendeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventAttendees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventAttendees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventAttendees.
     */
    distinct?: EventAttendeeScalarFieldEnum | EventAttendeeScalarFieldEnum[]
  }

  /**
   * EventAttendee findMany
   */
  export type EventAttendeeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventAttendee
     */
    select?: EventAttendeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventAttendee
     */
    omit?: EventAttendeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventAttendeeInclude<ExtArgs> | null
    /**
     * Filter, which EventAttendees to fetch.
     */
    where?: EventAttendeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventAttendees to fetch.
     */
    orderBy?: EventAttendeeOrderByWithRelationInput | EventAttendeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EventAttendees.
     */
    cursor?: EventAttendeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventAttendees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventAttendees.
     */
    skip?: number
    distinct?: EventAttendeeScalarFieldEnum | EventAttendeeScalarFieldEnum[]
  }

  /**
   * EventAttendee create
   */
  export type EventAttendeeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventAttendee
     */
    select?: EventAttendeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventAttendee
     */
    omit?: EventAttendeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventAttendeeInclude<ExtArgs> | null
    /**
     * The data needed to create a EventAttendee.
     */
    data: XOR<EventAttendeeCreateInput, EventAttendeeUncheckedCreateInput>
  }

  /**
   * EventAttendee createMany
   */
  export type EventAttendeeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EventAttendees.
     */
    data: EventAttendeeCreateManyInput | EventAttendeeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EventAttendee createManyAndReturn
   */
  export type EventAttendeeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventAttendee
     */
    select?: EventAttendeeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EventAttendee
     */
    omit?: EventAttendeeOmit<ExtArgs> | null
    /**
     * The data used to create many EventAttendees.
     */
    data: EventAttendeeCreateManyInput | EventAttendeeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventAttendeeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * EventAttendee update
   */
  export type EventAttendeeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventAttendee
     */
    select?: EventAttendeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventAttendee
     */
    omit?: EventAttendeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventAttendeeInclude<ExtArgs> | null
    /**
     * The data needed to update a EventAttendee.
     */
    data: XOR<EventAttendeeUpdateInput, EventAttendeeUncheckedUpdateInput>
    /**
     * Choose, which EventAttendee to update.
     */
    where: EventAttendeeWhereUniqueInput
  }

  /**
   * EventAttendee updateMany
   */
  export type EventAttendeeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EventAttendees.
     */
    data: XOR<EventAttendeeUpdateManyMutationInput, EventAttendeeUncheckedUpdateManyInput>
    /**
     * Filter which EventAttendees to update
     */
    where?: EventAttendeeWhereInput
    /**
     * Limit how many EventAttendees to update.
     */
    limit?: number
  }

  /**
   * EventAttendee updateManyAndReturn
   */
  export type EventAttendeeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventAttendee
     */
    select?: EventAttendeeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EventAttendee
     */
    omit?: EventAttendeeOmit<ExtArgs> | null
    /**
     * The data used to update EventAttendees.
     */
    data: XOR<EventAttendeeUpdateManyMutationInput, EventAttendeeUncheckedUpdateManyInput>
    /**
     * Filter which EventAttendees to update
     */
    where?: EventAttendeeWhereInput
    /**
     * Limit how many EventAttendees to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventAttendeeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * EventAttendee upsert
   */
  export type EventAttendeeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventAttendee
     */
    select?: EventAttendeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventAttendee
     */
    omit?: EventAttendeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventAttendeeInclude<ExtArgs> | null
    /**
     * The filter to search for the EventAttendee to update in case it exists.
     */
    where: EventAttendeeWhereUniqueInput
    /**
     * In case the EventAttendee found by the `where` argument doesn't exist, create a new EventAttendee with this data.
     */
    create: XOR<EventAttendeeCreateInput, EventAttendeeUncheckedCreateInput>
    /**
     * In case the EventAttendee was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventAttendeeUpdateInput, EventAttendeeUncheckedUpdateInput>
  }

  /**
   * EventAttendee delete
   */
  export type EventAttendeeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventAttendee
     */
    select?: EventAttendeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventAttendee
     */
    omit?: EventAttendeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventAttendeeInclude<ExtArgs> | null
    /**
     * Filter which EventAttendee to delete.
     */
    where: EventAttendeeWhereUniqueInput
  }

  /**
   * EventAttendee deleteMany
   */
  export type EventAttendeeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventAttendees to delete
     */
    where?: EventAttendeeWhereInput
    /**
     * Limit how many EventAttendees to delete.
     */
    limit?: number
  }

  /**
   * EventAttendee without action
   */
  export type EventAttendeeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventAttendee
     */
    select?: EventAttendeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventAttendee
     */
    omit?: EventAttendeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventAttendeeInclude<ExtArgs> | null
  }


  /**
   * Model ConferenceDay
   */

  export type AggregateConferenceDay = {
    _count: ConferenceDayCountAggregateOutputType | null
    _avg: ConferenceDayAvgAggregateOutputType | null
    _sum: ConferenceDaySumAggregateOutputType | null
    _min: ConferenceDayMinAggregateOutputType | null
    _max: ConferenceDayMaxAggregateOutputType | null
  }

  export type ConferenceDayAvgAggregateOutputType = {
    sortOrder: number | null
  }

  export type ConferenceDaySumAggregateOutputType = {
    sortOrder: number | null
  }

  export type ConferenceDayMinAggregateOutputType = {
    id: string | null
    date: Date | null
    sortOrder: number | null
    eventId: string | null
  }

  export type ConferenceDayMaxAggregateOutputType = {
    id: string | null
    date: Date | null
    sortOrder: number | null
    eventId: string | null
  }

  export type ConferenceDayCountAggregateOutputType = {
    id: number
    date: number
    sortOrder: number
    eventId: number
    _all: number
  }


  export type ConferenceDayAvgAggregateInputType = {
    sortOrder?: true
  }

  export type ConferenceDaySumAggregateInputType = {
    sortOrder?: true
  }

  export type ConferenceDayMinAggregateInputType = {
    id?: true
    date?: true
    sortOrder?: true
    eventId?: true
  }

  export type ConferenceDayMaxAggregateInputType = {
    id?: true
    date?: true
    sortOrder?: true
    eventId?: true
  }

  export type ConferenceDayCountAggregateInputType = {
    id?: true
    date?: true
    sortOrder?: true
    eventId?: true
    _all?: true
  }

  export type ConferenceDayAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ConferenceDay to aggregate.
     */
    where?: ConferenceDayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConferenceDays to fetch.
     */
    orderBy?: ConferenceDayOrderByWithRelationInput | ConferenceDayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConferenceDayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConferenceDays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConferenceDays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ConferenceDays
    **/
    _count?: true | ConferenceDayCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ConferenceDayAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ConferenceDaySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConferenceDayMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConferenceDayMaxAggregateInputType
  }

  export type GetConferenceDayAggregateType<T extends ConferenceDayAggregateArgs> = {
        [P in keyof T & keyof AggregateConferenceDay]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConferenceDay[P]>
      : GetScalarType<T[P], AggregateConferenceDay[P]>
  }




  export type ConferenceDayGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConferenceDayWhereInput
    orderBy?: ConferenceDayOrderByWithAggregationInput | ConferenceDayOrderByWithAggregationInput[]
    by: ConferenceDayScalarFieldEnum[] | ConferenceDayScalarFieldEnum
    having?: ConferenceDayScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConferenceDayCountAggregateInputType | true
    _avg?: ConferenceDayAvgAggregateInputType
    _sum?: ConferenceDaySumAggregateInputType
    _min?: ConferenceDayMinAggregateInputType
    _max?: ConferenceDayMaxAggregateInputType
  }

  export type ConferenceDayGroupByOutputType = {
    id: string
    date: Date
    sortOrder: number
    eventId: string
    _count: ConferenceDayCountAggregateOutputType | null
    _avg: ConferenceDayAvgAggregateOutputType | null
    _sum: ConferenceDaySumAggregateOutputType | null
    _min: ConferenceDayMinAggregateOutputType | null
    _max: ConferenceDayMaxAggregateOutputType | null
  }

  type GetConferenceDayGroupByPayload<T extends ConferenceDayGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConferenceDayGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConferenceDayGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConferenceDayGroupByOutputType[P]>
            : GetScalarType<T[P], ConferenceDayGroupByOutputType[P]>
        }
      >
    >


  export type ConferenceDaySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    sortOrder?: boolean
    eventId?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
    sections?: boolean | ConferenceDay$sectionsArgs<ExtArgs>
    _count?: boolean | ConferenceDayCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["conferenceDay"]>

  export type ConferenceDaySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    sortOrder?: boolean
    eventId?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["conferenceDay"]>

  export type ConferenceDaySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    sortOrder?: boolean
    eventId?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["conferenceDay"]>

  export type ConferenceDaySelectScalar = {
    id?: boolean
    date?: boolean
    sortOrder?: boolean
    eventId?: boolean
  }

  export type ConferenceDayOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "date" | "sortOrder" | "eventId", ExtArgs["result"]["conferenceDay"]>
  export type ConferenceDayInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
    sections?: boolean | ConferenceDay$sectionsArgs<ExtArgs>
    _count?: boolean | ConferenceDayCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ConferenceDayIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
  }
  export type ConferenceDayIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
  }

  export type $ConferenceDayPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ConferenceDay"
    objects: {
      event: Prisma.$EventPayload<ExtArgs>
      sections: Prisma.$SectionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      date: Date
      sortOrder: number
      eventId: string
    }, ExtArgs["result"]["conferenceDay"]>
    composites: {}
  }

  type ConferenceDayGetPayload<S extends boolean | null | undefined | ConferenceDayDefaultArgs> = $Result.GetResult<Prisma.$ConferenceDayPayload, S>

  type ConferenceDayCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ConferenceDayFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ConferenceDayCountAggregateInputType | true
    }

  export interface ConferenceDayDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ConferenceDay'], meta: { name: 'ConferenceDay' } }
    /**
     * Find zero or one ConferenceDay that matches the filter.
     * @param {ConferenceDayFindUniqueArgs} args - Arguments to find a ConferenceDay
     * @example
     * // Get one ConferenceDay
     * const conferenceDay = await prisma.conferenceDay.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ConferenceDayFindUniqueArgs>(args: SelectSubset<T, ConferenceDayFindUniqueArgs<ExtArgs>>): Prisma__ConferenceDayClient<$Result.GetResult<Prisma.$ConferenceDayPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ConferenceDay that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ConferenceDayFindUniqueOrThrowArgs} args - Arguments to find a ConferenceDay
     * @example
     * // Get one ConferenceDay
     * const conferenceDay = await prisma.conferenceDay.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ConferenceDayFindUniqueOrThrowArgs>(args: SelectSubset<T, ConferenceDayFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ConferenceDayClient<$Result.GetResult<Prisma.$ConferenceDayPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ConferenceDay that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConferenceDayFindFirstArgs} args - Arguments to find a ConferenceDay
     * @example
     * // Get one ConferenceDay
     * const conferenceDay = await prisma.conferenceDay.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ConferenceDayFindFirstArgs>(args?: SelectSubset<T, ConferenceDayFindFirstArgs<ExtArgs>>): Prisma__ConferenceDayClient<$Result.GetResult<Prisma.$ConferenceDayPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ConferenceDay that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConferenceDayFindFirstOrThrowArgs} args - Arguments to find a ConferenceDay
     * @example
     * // Get one ConferenceDay
     * const conferenceDay = await prisma.conferenceDay.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ConferenceDayFindFirstOrThrowArgs>(args?: SelectSubset<T, ConferenceDayFindFirstOrThrowArgs<ExtArgs>>): Prisma__ConferenceDayClient<$Result.GetResult<Prisma.$ConferenceDayPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ConferenceDays that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConferenceDayFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ConferenceDays
     * const conferenceDays = await prisma.conferenceDay.findMany()
     * 
     * // Get first 10 ConferenceDays
     * const conferenceDays = await prisma.conferenceDay.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const conferenceDayWithIdOnly = await prisma.conferenceDay.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ConferenceDayFindManyArgs>(args?: SelectSubset<T, ConferenceDayFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConferenceDayPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ConferenceDay.
     * @param {ConferenceDayCreateArgs} args - Arguments to create a ConferenceDay.
     * @example
     * // Create one ConferenceDay
     * const ConferenceDay = await prisma.conferenceDay.create({
     *   data: {
     *     // ... data to create a ConferenceDay
     *   }
     * })
     * 
     */
    create<T extends ConferenceDayCreateArgs>(args: SelectSubset<T, ConferenceDayCreateArgs<ExtArgs>>): Prisma__ConferenceDayClient<$Result.GetResult<Prisma.$ConferenceDayPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ConferenceDays.
     * @param {ConferenceDayCreateManyArgs} args - Arguments to create many ConferenceDays.
     * @example
     * // Create many ConferenceDays
     * const conferenceDay = await prisma.conferenceDay.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ConferenceDayCreateManyArgs>(args?: SelectSubset<T, ConferenceDayCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ConferenceDays and returns the data saved in the database.
     * @param {ConferenceDayCreateManyAndReturnArgs} args - Arguments to create many ConferenceDays.
     * @example
     * // Create many ConferenceDays
     * const conferenceDay = await prisma.conferenceDay.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ConferenceDays and only return the `id`
     * const conferenceDayWithIdOnly = await prisma.conferenceDay.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ConferenceDayCreateManyAndReturnArgs>(args?: SelectSubset<T, ConferenceDayCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConferenceDayPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ConferenceDay.
     * @param {ConferenceDayDeleteArgs} args - Arguments to delete one ConferenceDay.
     * @example
     * // Delete one ConferenceDay
     * const ConferenceDay = await prisma.conferenceDay.delete({
     *   where: {
     *     // ... filter to delete one ConferenceDay
     *   }
     * })
     * 
     */
    delete<T extends ConferenceDayDeleteArgs>(args: SelectSubset<T, ConferenceDayDeleteArgs<ExtArgs>>): Prisma__ConferenceDayClient<$Result.GetResult<Prisma.$ConferenceDayPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ConferenceDay.
     * @param {ConferenceDayUpdateArgs} args - Arguments to update one ConferenceDay.
     * @example
     * // Update one ConferenceDay
     * const conferenceDay = await prisma.conferenceDay.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ConferenceDayUpdateArgs>(args: SelectSubset<T, ConferenceDayUpdateArgs<ExtArgs>>): Prisma__ConferenceDayClient<$Result.GetResult<Prisma.$ConferenceDayPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ConferenceDays.
     * @param {ConferenceDayDeleteManyArgs} args - Arguments to filter ConferenceDays to delete.
     * @example
     * // Delete a few ConferenceDays
     * const { count } = await prisma.conferenceDay.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ConferenceDayDeleteManyArgs>(args?: SelectSubset<T, ConferenceDayDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ConferenceDays.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConferenceDayUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ConferenceDays
     * const conferenceDay = await prisma.conferenceDay.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ConferenceDayUpdateManyArgs>(args: SelectSubset<T, ConferenceDayUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ConferenceDays and returns the data updated in the database.
     * @param {ConferenceDayUpdateManyAndReturnArgs} args - Arguments to update many ConferenceDays.
     * @example
     * // Update many ConferenceDays
     * const conferenceDay = await prisma.conferenceDay.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ConferenceDays and only return the `id`
     * const conferenceDayWithIdOnly = await prisma.conferenceDay.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ConferenceDayUpdateManyAndReturnArgs>(args: SelectSubset<T, ConferenceDayUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConferenceDayPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ConferenceDay.
     * @param {ConferenceDayUpsertArgs} args - Arguments to update or create a ConferenceDay.
     * @example
     * // Update or create a ConferenceDay
     * const conferenceDay = await prisma.conferenceDay.upsert({
     *   create: {
     *     // ... data to create a ConferenceDay
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ConferenceDay we want to update
     *   }
     * })
     */
    upsert<T extends ConferenceDayUpsertArgs>(args: SelectSubset<T, ConferenceDayUpsertArgs<ExtArgs>>): Prisma__ConferenceDayClient<$Result.GetResult<Prisma.$ConferenceDayPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ConferenceDays.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConferenceDayCountArgs} args - Arguments to filter ConferenceDays to count.
     * @example
     * // Count the number of ConferenceDays
     * const count = await prisma.conferenceDay.count({
     *   where: {
     *     // ... the filter for the ConferenceDays we want to count
     *   }
     * })
    **/
    count<T extends ConferenceDayCountArgs>(
      args?: Subset<T, ConferenceDayCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConferenceDayCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ConferenceDay.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConferenceDayAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConferenceDayAggregateArgs>(args: Subset<T, ConferenceDayAggregateArgs>): Prisma.PrismaPromise<GetConferenceDayAggregateType<T>>

    /**
     * Group by ConferenceDay.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConferenceDayGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConferenceDayGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConferenceDayGroupByArgs['orderBy'] }
        : { orderBy?: ConferenceDayGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConferenceDayGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConferenceDayGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ConferenceDay model
   */
  readonly fields: ConferenceDayFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ConferenceDay.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ConferenceDayClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    event<T extends EventDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventDefaultArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    sections<T extends ConferenceDay$sectionsArgs<ExtArgs> = {}>(args?: Subset<T, ConferenceDay$sectionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ConferenceDay model
   */
  interface ConferenceDayFieldRefs {
    readonly id: FieldRef<"ConferenceDay", 'String'>
    readonly date: FieldRef<"ConferenceDay", 'DateTime'>
    readonly sortOrder: FieldRef<"ConferenceDay", 'Int'>
    readonly eventId: FieldRef<"ConferenceDay", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ConferenceDay findUnique
   */
  export type ConferenceDayFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConferenceDay
     */
    select?: ConferenceDaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConferenceDay
     */
    omit?: ConferenceDayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConferenceDayInclude<ExtArgs> | null
    /**
     * Filter, which ConferenceDay to fetch.
     */
    where: ConferenceDayWhereUniqueInput
  }

  /**
   * ConferenceDay findUniqueOrThrow
   */
  export type ConferenceDayFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConferenceDay
     */
    select?: ConferenceDaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConferenceDay
     */
    omit?: ConferenceDayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConferenceDayInclude<ExtArgs> | null
    /**
     * Filter, which ConferenceDay to fetch.
     */
    where: ConferenceDayWhereUniqueInput
  }

  /**
   * ConferenceDay findFirst
   */
  export type ConferenceDayFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConferenceDay
     */
    select?: ConferenceDaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConferenceDay
     */
    omit?: ConferenceDayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConferenceDayInclude<ExtArgs> | null
    /**
     * Filter, which ConferenceDay to fetch.
     */
    where?: ConferenceDayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConferenceDays to fetch.
     */
    orderBy?: ConferenceDayOrderByWithRelationInput | ConferenceDayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ConferenceDays.
     */
    cursor?: ConferenceDayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConferenceDays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConferenceDays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ConferenceDays.
     */
    distinct?: ConferenceDayScalarFieldEnum | ConferenceDayScalarFieldEnum[]
  }

  /**
   * ConferenceDay findFirstOrThrow
   */
  export type ConferenceDayFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConferenceDay
     */
    select?: ConferenceDaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConferenceDay
     */
    omit?: ConferenceDayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConferenceDayInclude<ExtArgs> | null
    /**
     * Filter, which ConferenceDay to fetch.
     */
    where?: ConferenceDayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConferenceDays to fetch.
     */
    orderBy?: ConferenceDayOrderByWithRelationInput | ConferenceDayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ConferenceDays.
     */
    cursor?: ConferenceDayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConferenceDays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConferenceDays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ConferenceDays.
     */
    distinct?: ConferenceDayScalarFieldEnum | ConferenceDayScalarFieldEnum[]
  }

  /**
   * ConferenceDay findMany
   */
  export type ConferenceDayFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConferenceDay
     */
    select?: ConferenceDaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConferenceDay
     */
    omit?: ConferenceDayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConferenceDayInclude<ExtArgs> | null
    /**
     * Filter, which ConferenceDays to fetch.
     */
    where?: ConferenceDayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConferenceDays to fetch.
     */
    orderBy?: ConferenceDayOrderByWithRelationInput | ConferenceDayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ConferenceDays.
     */
    cursor?: ConferenceDayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConferenceDays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConferenceDays.
     */
    skip?: number
    distinct?: ConferenceDayScalarFieldEnum | ConferenceDayScalarFieldEnum[]
  }

  /**
   * ConferenceDay create
   */
  export type ConferenceDayCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConferenceDay
     */
    select?: ConferenceDaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConferenceDay
     */
    omit?: ConferenceDayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConferenceDayInclude<ExtArgs> | null
    /**
     * The data needed to create a ConferenceDay.
     */
    data: XOR<ConferenceDayCreateInput, ConferenceDayUncheckedCreateInput>
  }

  /**
   * ConferenceDay createMany
   */
  export type ConferenceDayCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ConferenceDays.
     */
    data: ConferenceDayCreateManyInput | ConferenceDayCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ConferenceDay createManyAndReturn
   */
  export type ConferenceDayCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConferenceDay
     */
    select?: ConferenceDaySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ConferenceDay
     */
    omit?: ConferenceDayOmit<ExtArgs> | null
    /**
     * The data used to create many ConferenceDays.
     */
    data: ConferenceDayCreateManyInput | ConferenceDayCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConferenceDayIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ConferenceDay update
   */
  export type ConferenceDayUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConferenceDay
     */
    select?: ConferenceDaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConferenceDay
     */
    omit?: ConferenceDayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConferenceDayInclude<ExtArgs> | null
    /**
     * The data needed to update a ConferenceDay.
     */
    data: XOR<ConferenceDayUpdateInput, ConferenceDayUncheckedUpdateInput>
    /**
     * Choose, which ConferenceDay to update.
     */
    where: ConferenceDayWhereUniqueInput
  }

  /**
   * ConferenceDay updateMany
   */
  export type ConferenceDayUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ConferenceDays.
     */
    data: XOR<ConferenceDayUpdateManyMutationInput, ConferenceDayUncheckedUpdateManyInput>
    /**
     * Filter which ConferenceDays to update
     */
    where?: ConferenceDayWhereInput
    /**
     * Limit how many ConferenceDays to update.
     */
    limit?: number
  }

  /**
   * ConferenceDay updateManyAndReturn
   */
  export type ConferenceDayUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConferenceDay
     */
    select?: ConferenceDaySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ConferenceDay
     */
    omit?: ConferenceDayOmit<ExtArgs> | null
    /**
     * The data used to update ConferenceDays.
     */
    data: XOR<ConferenceDayUpdateManyMutationInput, ConferenceDayUncheckedUpdateManyInput>
    /**
     * Filter which ConferenceDays to update
     */
    where?: ConferenceDayWhereInput
    /**
     * Limit how many ConferenceDays to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConferenceDayIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ConferenceDay upsert
   */
  export type ConferenceDayUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConferenceDay
     */
    select?: ConferenceDaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConferenceDay
     */
    omit?: ConferenceDayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConferenceDayInclude<ExtArgs> | null
    /**
     * The filter to search for the ConferenceDay to update in case it exists.
     */
    where: ConferenceDayWhereUniqueInput
    /**
     * In case the ConferenceDay found by the `where` argument doesn't exist, create a new ConferenceDay with this data.
     */
    create: XOR<ConferenceDayCreateInput, ConferenceDayUncheckedCreateInput>
    /**
     * In case the ConferenceDay was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConferenceDayUpdateInput, ConferenceDayUncheckedUpdateInput>
  }

  /**
   * ConferenceDay delete
   */
  export type ConferenceDayDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConferenceDay
     */
    select?: ConferenceDaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConferenceDay
     */
    omit?: ConferenceDayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConferenceDayInclude<ExtArgs> | null
    /**
     * Filter which ConferenceDay to delete.
     */
    where: ConferenceDayWhereUniqueInput
  }

  /**
   * ConferenceDay deleteMany
   */
  export type ConferenceDayDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ConferenceDays to delete
     */
    where?: ConferenceDayWhereInput
    /**
     * Limit how many ConferenceDays to delete.
     */
    limit?: number
  }

  /**
   * ConferenceDay.sections
   */
  export type ConferenceDay$sectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    where?: SectionWhereInput
    orderBy?: SectionOrderByWithRelationInput | SectionOrderByWithRelationInput[]
    cursor?: SectionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SectionScalarFieldEnum | SectionScalarFieldEnum[]
  }

  /**
   * ConferenceDay without action
   */
  export type ConferenceDayDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConferenceDay
     */
    select?: ConferenceDaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConferenceDay
     */
    omit?: ConferenceDayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConferenceDayInclude<ExtArgs> | null
  }


  /**
   * Model Section
   */

  export type AggregateSection = {
    _count: SectionCountAggregateOutputType | null
    _avg: SectionAvgAggregateOutputType | null
    _sum: SectionSumAggregateOutputType | null
    _min: SectionMinAggregateOutputType | null
    _max: SectionMaxAggregateOutputType | null
  }

  export type SectionAvgAggregateOutputType = {
    sortOrder: number | null
  }

  export type SectionSumAggregateOutputType = {
    sortOrder: number | null
  }

  export type SectionMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    sortOrder: number | null
    startTime: Date | null
    endTime: Date | null
    dayId: string | null
  }

  export type SectionMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    sortOrder: number | null
    startTime: Date | null
    endTime: Date | null
    dayId: string | null
  }

  export type SectionCountAggregateOutputType = {
    id: number
    title: number
    description: number
    sortOrder: number
    startTime: number
    endTime: number
    dayId: number
    _all: number
  }


  export type SectionAvgAggregateInputType = {
    sortOrder?: true
  }

  export type SectionSumAggregateInputType = {
    sortOrder?: true
  }

  export type SectionMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    sortOrder?: true
    startTime?: true
    endTime?: true
    dayId?: true
  }

  export type SectionMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    sortOrder?: true
    startTime?: true
    endTime?: true
    dayId?: true
  }

  export type SectionCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    sortOrder?: true
    startTime?: true
    endTime?: true
    dayId?: true
    _all?: true
  }

  export type SectionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Section to aggregate.
     */
    where?: SectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sections to fetch.
     */
    orderBy?: SectionOrderByWithRelationInput | SectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sections
    **/
    _count?: true | SectionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SectionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SectionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SectionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SectionMaxAggregateInputType
  }

  export type GetSectionAggregateType<T extends SectionAggregateArgs> = {
        [P in keyof T & keyof AggregateSection]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSection[P]>
      : GetScalarType<T[P], AggregateSection[P]>
  }




  export type SectionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SectionWhereInput
    orderBy?: SectionOrderByWithAggregationInput | SectionOrderByWithAggregationInput[]
    by: SectionScalarFieldEnum[] | SectionScalarFieldEnum
    having?: SectionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SectionCountAggregateInputType | true
    _avg?: SectionAvgAggregateInputType
    _sum?: SectionSumAggregateInputType
    _min?: SectionMinAggregateInputType
    _max?: SectionMaxAggregateInputType
  }

  export type SectionGroupByOutputType = {
    id: string
    title: string
    description: string | null
    sortOrder: number
    startTime: Date
    endTime: Date
    dayId: string
    _count: SectionCountAggregateOutputType | null
    _avg: SectionAvgAggregateOutputType | null
    _sum: SectionSumAggregateOutputType | null
    _min: SectionMinAggregateOutputType | null
    _max: SectionMaxAggregateOutputType | null
  }

  type GetSectionGroupByPayload<T extends SectionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SectionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SectionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SectionGroupByOutputType[P]>
            : GetScalarType<T[P], SectionGroupByOutputType[P]>
        }
      >
    >


  export type SectionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    sortOrder?: boolean
    startTime?: boolean
    endTime?: boolean
    dayId?: boolean
    day?: boolean | ConferenceDayDefaultArgs<ExtArgs>
    presentations?: boolean | Section$presentationsArgs<ExtArgs>
    breaks?: boolean | Section$breaksArgs<ExtArgs>
    _count?: boolean | SectionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["section"]>

  export type SectionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    sortOrder?: boolean
    startTime?: boolean
    endTime?: boolean
    dayId?: boolean
    day?: boolean | ConferenceDayDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["section"]>

  export type SectionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    sortOrder?: boolean
    startTime?: boolean
    endTime?: boolean
    dayId?: boolean
    day?: boolean | ConferenceDayDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["section"]>

  export type SectionSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    sortOrder?: boolean
    startTime?: boolean
    endTime?: boolean
    dayId?: boolean
  }

  export type SectionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "sortOrder" | "startTime" | "endTime" | "dayId", ExtArgs["result"]["section"]>
  export type SectionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    day?: boolean | ConferenceDayDefaultArgs<ExtArgs>
    presentations?: boolean | Section$presentationsArgs<ExtArgs>
    breaks?: boolean | Section$breaksArgs<ExtArgs>
    _count?: boolean | SectionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SectionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    day?: boolean | ConferenceDayDefaultArgs<ExtArgs>
  }
  export type SectionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    day?: boolean | ConferenceDayDefaultArgs<ExtArgs>
  }

  export type $SectionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Section"
    objects: {
      day: Prisma.$ConferenceDayPayload<ExtArgs>
      presentations: Prisma.$PresentationPayload<ExtArgs>[]
      breaks: Prisma.$BreakPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string | null
      sortOrder: number
      startTime: Date
      endTime: Date
      dayId: string
    }, ExtArgs["result"]["section"]>
    composites: {}
  }

  type SectionGetPayload<S extends boolean | null | undefined | SectionDefaultArgs> = $Result.GetResult<Prisma.$SectionPayload, S>

  type SectionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SectionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SectionCountAggregateInputType | true
    }

  export interface SectionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Section'], meta: { name: 'Section' } }
    /**
     * Find zero or one Section that matches the filter.
     * @param {SectionFindUniqueArgs} args - Arguments to find a Section
     * @example
     * // Get one Section
     * const section = await prisma.section.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SectionFindUniqueArgs>(args: SelectSubset<T, SectionFindUniqueArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Section that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SectionFindUniqueOrThrowArgs} args - Arguments to find a Section
     * @example
     * // Get one Section
     * const section = await prisma.section.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SectionFindUniqueOrThrowArgs>(args: SelectSubset<T, SectionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Section that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionFindFirstArgs} args - Arguments to find a Section
     * @example
     * // Get one Section
     * const section = await prisma.section.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SectionFindFirstArgs>(args?: SelectSubset<T, SectionFindFirstArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Section that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionFindFirstOrThrowArgs} args - Arguments to find a Section
     * @example
     * // Get one Section
     * const section = await prisma.section.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SectionFindFirstOrThrowArgs>(args?: SelectSubset<T, SectionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sections that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sections
     * const sections = await prisma.section.findMany()
     * 
     * // Get first 10 Sections
     * const sections = await prisma.section.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sectionWithIdOnly = await prisma.section.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SectionFindManyArgs>(args?: SelectSubset<T, SectionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Section.
     * @param {SectionCreateArgs} args - Arguments to create a Section.
     * @example
     * // Create one Section
     * const Section = await prisma.section.create({
     *   data: {
     *     // ... data to create a Section
     *   }
     * })
     * 
     */
    create<T extends SectionCreateArgs>(args: SelectSubset<T, SectionCreateArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sections.
     * @param {SectionCreateManyArgs} args - Arguments to create many Sections.
     * @example
     * // Create many Sections
     * const section = await prisma.section.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SectionCreateManyArgs>(args?: SelectSubset<T, SectionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sections and returns the data saved in the database.
     * @param {SectionCreateManyAndReturnArgs} args - Arguments to create many Sections.
     * @example
     * // Create many Sections
     * const section = await prisma.section.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sections and only return the `id`
     * const sectionWithIdOnly = await prisma.section.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SectionCreateManyAndReturnArgs>(args?: SelectSubset<T, SectionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Section.
     * @param {SectionDeleteArgs} args - Arguments to delete one Section.
     * @example
     * // Delete one Section
     * const Section = await prisma.section.delete({
     *   where: {
     *     // ... filter to delete one Section
     *   }
     * })
     * 
     */
    delete<T extends SectionDeleteArgs>(args: SelectSubset<T, SectionDeleteArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Section.
     * @param {SectionUpdateArgs} args - Arguments to update one Section.
     * @example
     * // Update one Section
     * const section = await prisma.section.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SectionUpdateArgs>(args: SelectSubset<T, SectionUpdateArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sections.
     * @param {SectionDeleteManyArgs} args - Arguments to filter Sections to delete.
     * @example
     * // Delete a few Sections
     * const { count } = await prisma.section.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SectionDeleteManyArgs>(args?: SelectSubset<T, SectionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sections
     * const section = await prisma.section.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SectionUpdateManyArgs>(args: SelectSubset<T, SectionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sections and returns the data updated in the database.
     * @param {SectionUpdateManyAndReturnArgs} args - Arguments to update many Sections.
     * @example
     * // Update many Sections
     * const section = await prisma.section.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sections and only return the `id`
     * const sectionWithIdOnly = await prisma.section.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SectionUpdateManyAndReturnArgs>(args: SelectSubset<T, SectionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Section.
     * @param {SectionUpsertArgs} args - Arguments to update or create a Section.
     * @example
     * // Update or create a Section
     * const section = await prisma.section.upsert({
     *   create: {
     *     // ... data to create a Section
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Section we want to update
     *   }
     * })
     */
    upsert<T extends SectionUpsertArgs>(args: SelectSubset<T, SectionUpsertArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionCountArgs} args - Arguments to filter Sections to count.
     * @example
     * // Count the number of Sections
     * const count = await prisma.section.count({
     *   where: {
     *     // ... the filter for the Sections we want to count
     *   }
     * })
    **/
    count<T extends SectionCountArgs>(
      args?: Subset<T, SectionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SectionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Section.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SectionAggregateArgs>(args: Subset<T, SectionAggregateArgs>): Prisma.PrismaPromise<GetSectionAggregateType<T>>

    /**
     * Group by Section.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SectionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SectionGroupByArgs['orderBy'] }
        : { orderBy?: SectionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SectionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSectionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Section model
   */
  readonly fields: SectionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Section.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SectionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    day<T extends ConferenceDayDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ConferenceDayDefaultArgs<ExtArgs>>): Prisma__ConferenceDayClient<$Result.GetResult<Prisma.$ConferenceDayPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    presentations<T extends Section$presentationsArgs<ExtArgs> = {}>(args?: Subset<T, Section$presentationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PresentationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    breaks<T extends Section$breaksArgs<ExtArgs> = {}>(args?: Subset<T, Section$breaksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BreakPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Section model
   */
  interface SectionFieldRefs {
    readonly id: FieldRef<"Section", 'String'>
    readonly title: FieldRef<"Section", 'String'>
    readonly description: FieldRef<"Section", 'String'>
    readonly sortOrder: FieldRef<"Section", 'Int'>
    readonly startTime: FieldRef<"Section", 'DateTime'>
    readonly endTime: FieldRef<"Section", 'DateTime'>
    readonly dayId: FieldRef<"Section", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Section findUnique
   */
  export type SectionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * Filter, which Section to fetch.
     */
    where: SectionWhereUniqueInput
  }

  /**
   * Section findUniqueOrThrow
   */
  export type SectionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * Filter, which Section to fetch.
     */
    where: SectionWhereUniqueInput
  }

  /**
   * Section findFirst
   */
  export type SectionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * Filter, which Section to fetch.
     */
    where?: SectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sections to fetch.
     */
    orderBy?: SectionOrderByWithRelationInput | SectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sections.
     */
    cursor?: SectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sections.
     */
    distinct?: SectionScalarFieldEnum | SectionScalarFieldEnum[]
  }

  /**
   * Section findFirstOrThrow
   */
  export type SectionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * Filter, which Section to fetch.
     */
    where?: SectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sections to fetch.
     */
    orderBy?: SectionOrderByWithRelationInput | SectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sections.
     */
    cursor?: SectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sections.
     */
    distinct?: SectionScalarFieldEnum | SectionScalarFieldEnum[]
  }

  /**
   * Section findMany
   */
  export type SectionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * Filter, which Sections to fetch.
     */
    where?: SectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sections to fetch.
     */
    orderBy?: SectionOrderByWithRelationInput | SectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sections.
     */
    cursor?: SectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sections.
     */
    skip?: number
    distinct?: SectionScalarFieldEnum | SectionScalarFieldEnum[]
  }

  /**
   * Section create
   */
  export type SectionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * The data needed to create a Section.
     */
    data: XOR<SectionCreateInput, SectionUncheckedCreateInput>
  }

  /**
   * Section createMany
   */
  export type SectionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sections.
     */
    data: SectionCreateManyInput | SectionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Section createManyAndReturn
   */
  export type SectionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * The data used to create many Sections.
     */
    data: SectionCreateManyInput | SectionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Section update
   */
  export type SectionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * The data needed to update a Section.
     */
    data: XOR<SectionUpdateInput, SectionUncheckedUpdateInput>
    /**
     * Choose, which Section to update.
     */
    where: SectionWhereUniqueInput
  }

  /**
   * Section updateMany
   */
  export type SectionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sections.
     */
    data: XOR<SectionUpdateManyMutationInput, SectionUncheckedUpdateManyInput>
    /**
     * Filter which Sections to update
     */
    where?: SectionWhereInput
    /**
     * Limit how many Sections to update.
     */
    limit?: number
  }

  /**
   * Section updateManyAndReturn
   */
  export type SectionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * The data used to update Sections.
     */
    data: XOR<SectionUpdateManyMutationInput, SectionUncheckedUpdateManyInput>
    /**
     * Filter which Sections to update
     */
    where?: SectionWhereInput
    /**
     * Limit how many Sections to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Section upsert
   */
  export type SectionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * The filter to search for the Section to update in case it exists.
     */
    where: SectionWhereUniqueInput
    /**
     * In case the Section found by the `where` argument doesn't exist, create a new Section with this data.
     */
    create: XOR<SectionCreateInput, SectionUncheckedCreateInput>
    /**
     * In case the Section was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SectionUpdateInput, SectionUncheckedUpdateInput>
  }

  /**
   * Section delete
   */
  export type SectionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * Filter which Section to delete.
     */
    where: SectionWhereUniqueInput
  }

  /**
   * Section deleteMany
   */
  export type SectionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sections to delete
     */
    where?: SectionWhereInput
    /**
     * Limit how many Sections to delete.
     */
    limit?: number
  }

  /**
   * Section.presentations
   */
  export type Section$presentationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presentation
     */
    select?: PresentationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presentation
     */
    omit?: PresentationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationInclude<ExtArgs> | null
    where?: PresentationWhereInput
    orderBy?: PresentationOrderByWithRelationInput | PresentationOrderByWithRelationInput[]
    cursor?: PresentationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PresentationScalarFieldEnum | PresentationScalarFieldEnum[]
  }

  /**
   * Section.breaks
   */
  export type Section$breaksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Break
     */
    select?: BreakSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Break
     */
    omit?: BreakOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BreakInclude<ExtArgs> | null
    where?: BreakWhereInput
    orderBy?: BreakOrderByWithRelationInput | BreakOrderByWithRelationInput[]
    cursor?: BreakWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BreakScalarFieldEnum | BreakScalarFieldEnum[]
  }

  /**
   * Section without action
   */
  export type SectionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
  }


  /**
   * Model Presentation
   */

  export type AggregatePresentation = {
    _count: PresentationCountAggregateOutputType | null
    _avg: PresentationAvgAggregateOutputType | null
    _sum: PresentationSumAggregateOutputType | null
    _min: PresentationMinAggregateOutputType | null
    _max: PresentationMaxAggregateOutputType | null
  }

  export type PresentationAvgAggregateOutputType = {
    durationMin: number | null
    sortOrder: number | null
    viewCount: number | null
  }

  export type PresentationSumAggregateOutputType = {
    durationMin: number | null
    sortOrder: number | null
    viewCount: number | null
  }

  export type PresentationMinAggregateOutputType = {
    id: string | null
    title: string | null
    abstract: string | null
    durationMin: number | null
    status: $Enums.PresentationStatus | null
    submissionType: $Enums.SubmissionType | null
    sortOrder: number | null
    startTime: Date | null
    endTime: Date | null
    sectionId: string | null
    viewCount: number | null
    createdAt: Date | null
    updatedAt: Date | null
    submittedAt: Date | null
  }

  export type PresentationMaxAggregateOutputType = {
    id: string | null
    title: string | null
    abstract: string | null
    durationMin: number | null
    status: $Enums.PresentationStatus | null
    submissionType: $Enums.SubmissionType | null
    sortOrder: number | null
    startTime: Date | null
    endTime: Date | null
    sectionId: string | null
    viewCount: number | null
    createdAt: Date | null
    updatedAt: Date | null
    submittedAt: Date | null
  }

  export type PresentationCountAggregateOutputType = {
    id: number
    title: number
    abstract: number
    durationMin: number
    keywords: number
    status: number
    submissionType: number
    sortOrder: number
    startTime: number
    endTime: number
    sectionId: number
    viewCount: number
    createdAt: number
    updatedAt: number
    submittedAt: number
    _all: number
  }


  export type PresentationAvgAggregateInputType = {
    durationMin?: true
    sortOrder?: true
    viewCount?: true
  }

  export type PresentationSumAggregateInputType = {
    durationMin?: true
    sortOrder?: true
    viewCount?: true
  }

  export type PresentationMinAggregateInputType = {
    id?: true
    title?: true
    abstract?: true
    durationMin?: true
    status?: true
    submissionType?: true
    sortOrder?: true
    startTime?: true
    endTime?: true
    sectionId?: true
    viewCount?: true
    createdAt?: true
    updatedAt?: true
    submittedAt?: true
  }

  export type PresentationMaxAggregateInputType = {
    id?: true
    title?: true
    abstract?: true
    durationMin?: true
    status?: true
    submissionType?: true
    sortOrder?: true
    startTime?: true
    endTime?: true
    sectionId?: true
    viewCount?: true
    createdAt?: true
    updatedAt?: true
    submittedAt?: true
  }

  export type PresentationCountAggregateInputType = {
    id?: true
    title?: true
    abstract?: true
    durationMin?: true
    keywords?: true
    status?: true
    submissionType?: true
    sortOrder?: true
    startTime?: true
    endTime?: true
    sectionId?: true
    viewCount?: true
    createdAt?: true
    updatedAt?: true
    submittedAt?: true
    _all?: true
  }

  export type PresentationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Presentation to aggregate.
     */
    where?: PresentationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Presentations to fetch.
     */
    orderBy?: PresentationOrderByWithRelationInput | PresentationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PresentationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Presentations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Presentations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Presentations
    **/
    _count?: true | PresentationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PresentationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PresentationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PresentationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PresentationMaxAggregateInputType
  }

  export type GetPresentationAggregateType<T extends PresentationAggregateArgs> = {
        [P in keyof T & keyof AggregatePresentation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePresentation[P]>
      : GetScalarType<T[P], AggregatePresentation[P]>
  }




  export type PresentationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PresentationWhereInput
    orderBy?: PresentationOrderByWithAggregationInput | PresentationOrderByWithAggregationInput[]
    by: PresentationScalarFieldEnum[] | PresentationScalarFieldEnum
    having?: PresentationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PresentationCountAggregateInputType | true
    _avg?: PresentationAvgAggregateInputType
    _sum?: PresentationSumAggregateInputType
    _min?: PresentationMinAggregateInputType
    _max?: PresentationMaxAggregateInputType
  }

  export type PresentationGroupByOutputType = {
    id: string
    title: string
    abstract: string
    durationMin: number
    keywords: string[]
    status: $Enums.PresentationStatus
    submissionType: $Enums.SubmissionType
    sortOrder: number
    startTime: Date | null
    endTime: Date | null
    sectionId: string
    viewCount: number
    createdAt: Date
    updatedAt: Date
    submittedAt: Date | null
    _count: PresentationCountAggregateOutputType | null
    _avg: PresentationAvgAggregateOutputType | null
    _sum: PresentationSumAggregateOutputType | null
    _min: PresentationMinAggregateOutputType | null
    _max: PresentationMaxAggregateOutputType | null
  }

  type GetPresentationGroupByPayload<T extends PresentationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PresentationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PresentationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PresentationGroupByOutputType[P]>
            : GetScalarType<T[P], PresentationGroupByOutputType[P]>
        }
      >
    >


  export type PresentationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    abstract?: boolean
    durationMin?: boolean
    keywords?: boolean
    status?: boolean
    submissionType?: boolean
    sortOrder?: boolean
    startTime?: boolean
    endTime?: boolean
    sectionId?: boolean
    viewCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    submittedAt?: boolean
    section?: boolean | SectionDefaultArgs<ExtArgs>
    metrics?: boolean | Presentation$metricsArgs<ExtArgs>
    authors?: boolean | Presentation$authorsArgs<ExtArgs>
    materials?: boolean | Presentation$materialsArgs<ExtArgs>
    favorites?: boolean | Presentation$favoritesArgs<ExtArgs>
    _count?: boolean | PresentationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["presentation"]>

  export type PresentationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    abstract?: boolean
    durationMin?: boolean
    keywords?: boolean
    status?: boolean
    submissionType?: boolean
    sortOrder?: boolean
    startTime?: boolean
    endTime?: boolean
    sectionId?: boolean
    viewCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    submittedAt?: boolean
    section?: boolean | SectionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["presentation"]>

  export type PresentationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    abstract?: boolean
    durationMin?: boolean
    keywords?: boolean
    status?: boolean
    submissionType?: boolean
    sortOrder?: boolean
    startTime?: boolean
    endTime?: boolean
    sectionId?: boolean
    viewCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    submittedAt?: boolean
    section?: boolean | SectionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["presentation"]>

  export type PresentationSelectScalar = {
    id?: boolean
    title?: boolean
    abstract?: boolean
    durationMin?: boolean
    keywords?: boolean
    status?: boolean
    submissionType?: boolean
    sortOrder?: boolean
    startTime?: boolean
    endTime?: boolean
    sectionId?: boolean
    viewCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    submittedAt?: boolean
  }

  export type PresentationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "abstract" | "durationMin" | "keywords" | "status" | "submissionType" | "sortOrder" | "startTime" | "endTime" | "sectionId" | "viewCount" | "createdAt" | "updatedAt" | "submittedAt", ExtArgs["result"]["presentation"]>
  export type PresentationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    section?: boolean | SectionDefaultArgs<ExtArgs>
    metrics?: boolean | Presentation$metricsArgs<ExtArgs>
    authors?: boolean | Presentation$authorsArgs<ExtArgs>
    materials?: boolean | Presentation$materialsArgs<ExtArgs>
    favorites?: boolean | Presentation$favoritesArgs<ExtArgs>
    _count?: boolean | PresentationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PresentationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    section?: boolean | SectionDefaultArgs<ExtArgs>
  }
  export type PresentationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    section?: boolean | SectionDefaultArgs<ExtArgs>
  }

  export type $PresentationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Presentation"
    objects: {
      section: Prisma.$SectionPayload<ExtArgs>
      metrics: Prisma.$PresentationMetricsPayload<ExtArgs> | null
      authors: Prisma.$PresentationAuthorPayload<ExtArgs>[]
      materials: Prisma.$PresentationMaterialPayload<ExtArgs>[]
      favorites: Prisma.$FavoritePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      abstract: string
      durationMin: number
      keywords: string[]
      status: $Enums.PresentationStatus
      submissionType: $Enums.SubmissionType
      sortOrder: number
      startTime: Date | null
      endTime: Date | null
      sectionId: string
      viewCount: number
      createdAt: Date
      updatedAt: Date
      submittedAt: Date | null
    }, ExtArgs["result"]["presentation"]>
    composites: {}
  }

  type PresentationGetPayload<S extends boolean | null | undefined | PresentationDefaultArgs> = $Result.GetResult<Prisma.$PresentationPayload, S>

  type PresentationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PresentationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PresentationCountAggregateInputType | true
    }

  export interface PresentationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Presentation'], meta: { name: 'Presentation' } }
    /**
     * Find zero or one Presentation that matches the filter.
     * @param {PresentationFindUniqueArgs} args - Arguments to find a Presentation
     * @example
     * // Get one Presentation
     * const presentation = await prisma.presentation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PresentationFindUniqueArgs>(args: SelectSubset<T, PresentationFindUniqueArgs<ExtArgs>>): Prisma__PresentationClient<$Result.GetResult<Prisma.$PresentationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Presentation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PresentationFindUniqueOrThrowArgs} args - Arguments to find a Presentation
     * @example
     * // Get one Presentation
     * const presentation = await prisma.presentation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PresentationFindUniqueOrThrowArgs>(args: SelectSubset<T, PresentationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PresentationClient<$Result.GetResult<Prisma.$PresentationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Presentation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresentationFindFirstArgs} args - Arguments to find a Presentation
     * @example
     * // Get one Presentation
     * const presentation = await prisma.presentation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PresentationFindFirstArgs>(args?: SelectSubset<T, PresentationFindFirstArgs<ExtArgs>>): Prisma__PresentationClient<$Result.GetResult<Prisma.$PresentationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Presentation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresentationFindFirstOrThrowArgs} args - Arguments to find a Presentation
     * @example
     * // Get one Presentation
     * const presentation = await prisma.presentation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PresentationFindFirstOrThrowArgs>(args?: SelectSubset<T, PresentationFindFirstOrThrowArgs<ExtArgs>>): Prisma__PresentationClient<$Result.GetResult<Prisma.$PresentationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Presentations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresentationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Presentations
     * const presentations = await prisma.presentation.findMany()
     * 
     * // Get first 10 Presentations
     * const presentations = await prisma.presentation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const presentationWithIdOnly = await prisma.presentation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PresentationFindManyArgs>(args?: SelectSubset<T, PresentationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PresentationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Presentation.
     * @param {PresentationCreateArgs} args - Arguments to create a Presentation.
     * @example
     * // Create one Presentation
     * const Presentation = await prisma.presentation.create({
     *   data: {
     *     // ... data to create a Presentation
     *   }
     * })
     * 
     */
    create<T extends PresentationCreateArgs>(args: SelectSubset<T, PresentationCreateArgs<ExtArgs>>): Prisma__PresentationClient<$Result.GetResult<Prisma.$PresentationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Presentations.
     * @param {PresentationCreateManyArgs} args - Arguments to create many Presentations.
     * @example
     * // Create many Presentations
     * const presentation = await prisma.presentation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PresentationCreateManyArgs>(args?: SelectSubset<T, PresentationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Presentations and returns the data saved in the database.
     * @param {PresentationCreateManyAndReturnArgs} args - Arguments to create many Presentations.
     * @example
     * // Create many Presentations
     * const presentation = await prisma.presentation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Presentations and only return the `id`
     * const presentationWithIdOnly = await prisma.presentation.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PresentationCreateManyAndReturnArgs>(args?: SelectSubset<T, PresentationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PresentationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Presentation.
     * @param {PresentationDeleteArgs} args - Arguments to delete one Presentation.
     * @example
     * // Delete one Presentation
     * const Presentation = await prisma.presentation.delete({
     *   where: {
     *     // ... filter to delete one Presentation
     *   }
     * })
     * 
     */
    delete<T extends PresentationDeleteArgs>(args: SelectSubset<T, PresentationDeleteArgs<ExtArgs>>): Prisma__PresentationClient<$Result.GetResult<Prisma.$PresentationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Presentation.
     * @param {PresentationUpdateArgs} args - Arguments to update one Presentation.
     * @example
     * // Update one Presentation
     * const presentation = await prisma.presentation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PresentationUpdateArgs>(args: SelectSubset<T, PresentationUpdateArgs<ExtArgs>>): Prisma__PresentationClient<$Result.GetResult<Prisma.$PresentationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Presentations.
     * @param {PresentationDeleteManyArgs} args - Arguments to filter Presentations to delete.
     * @example
     * // Delete a few Presentations
     * const { count } = await prisma.presentation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PresentationDeleteManyArgs>(args?: SelectSubset<T, PresentationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Presentations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresentationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Presentations
     * const presentation = await prisma.presentation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PresentationUpdateManyArgs>(args: SelectSubset<T, PresentationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Presentations and returns the data updated in the database.
     * @param {PresentationUpdateManyAndReturnArgs} args - Arguments to update many Presentations.
     * @example
     * // Update many Presentations
     * const presentation = await prisma.presentation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Presentations and only return the `id`
     * const presentationWithIdOnly = await prisma.presentation.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PresentationUpdateManyAndReturnArgs>(args: SelectSubset<T, PresentationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PresentationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Presentation.
     * @param {PresentationUpsertArgs} args - Arguments to update or create a Presentation.
     * @example
     * // Update or create a Presentation
     * const presentation = await prisma.presentation.upsert({
     *   create: {
     *     // ... data to create a Presentation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Presentation we want to update
     *   }
     * })
     */
    upsert<T extends PresentationUpsertArgs>(args: SelectSubset<T, PresentationUpsertArgs<ExtArgs>>): Prisma__PresentationClient<$Result.GetResult<Prisma.$PresentationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Presentations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresentationCountArgs} args - Arguments to filter Presentations to count.
     * @example
     * // Count the number of Presentations
     * const count = await prisma.presentation.count({
     *   where: {
     *     // ... the filter for the Presentations we want to count
     *   }
     * })
    **/
    count<T extends PresentationCountArgs>(
      args?: Subset<T, PresentationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PresentationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Presentation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresentationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PresentationAggregateArgs>(args: Subset<T, PresentationAggregateArgs>): Prisma.PrismaPromise<GetPresentationAggregateType<T>>

    /**
     * Group by Presentation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresentationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PresentationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PresentationGroupByArgs['orderBy'] }
        : { orderBy?: PresentationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PresentationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPresentationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Presentation model
   */
  readonly fields: PresentationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Presentation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PresentationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    section<T extends SectionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SectionDefaultArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    metrics<T extends Presentation$metricsArgs<ExtArgs> = {}>(args?: Subset<T, Presentation$metricsArgs<ExtArgs>>): Prisma__PresentationMetricsClient<$Result.GetResult<Prisma.$PresentationMetricsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    authors<T extends Presentation$authorsArgs<ExtArgs> = {}>(args?: Subset<T, Presentation$authorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PresentationAuthorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    materials<T extends Presentation$materialsArgs<ExtArgs> = {}>(args?: Subset<T, Presentation$materialsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PresentationMaterialPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    favorites<T extends Presentation$favoritesArgs<ExtArgs> = {}>(args?: Subset<T, Presentation$favoritesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Presentation model
   */
  interface PresentationFieldRefs {
    readonly id: FieldRef<"Presentation", 'String'>
    readonly title: FieldRef<"Presentation", 'String'>
    readonly abstract: FieldRef<"Presentation", 'String'>
    readonly durationMin: FieldRef<"Presentation", 'Int'>
    readonly keywords: FieldRef<"Presentation", 'String[]'>
    readonly status: FieldRef<"Presentation", 'PresentationStatus'>
    readonly submissionType: FieldRef<"Presentation", 'SubmissionType'>
    readonly sortOrder: FieldRef<"Presentation", 'Int'>
    readonly startTime: FieldRef<"Presentation", 'DateTime'>
    readonly endTime: FieldRef<"Presentation", 'DateTime'>
    readonly sectionId: FieldRef<"Presentation", 'String'>
    readonly viewCount: FieldRef<"Presentation", 'Int'>
    readonly createdAt: FieldRef<"Presentation", 'DateTime'>
    readonly updatedAt: FieldRef<"Presentation", 'DateTime'>
    readonly submittedAt: FieldRef<"Presentation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Presentation findUnique
   */
  export type PresentationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presentation
     */
    select?: PresentationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presentation
     */
    omit?: PresentationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationInclude<ExtArgs> | null
    /**
     * Filter, which Presentation to fetch.
     */
    where: PresentationWhereUniqueInput
  }

  /**
   * Presentation findUniqueOrThrow
   */
  export type PresentationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presentation
     */
    select?: PresentationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presentation
     */
    omit?: PresentationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationInclude<ExtArgs> | null
    /**
     * Filter, which Presentation to fetch.
     */
    where: PresentationWhereUniqueInput
  }

  /**
   * Presentation findFirst
   */
  export type PresentationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presentation
     */
    select?: PresentationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presentation
     */
    omit?: PresentationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationInclude<ExtArgs> | null
    /**
     * Filter, which Presentation to fetch.
     */
    where?: PresentationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Presentations to fetch.
     */
    orderBy?: PresentationOrderByWithRelationInput | PresentationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Presentations.
     */
    cursor?: PresentationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Presentations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Presentations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Presentations.
     */
    distinct?: PresentationScalarFieldEnum | PresentationScalarFieldEnum[]
  }

  /**
   * Presentation findFirstOrThrow
   */
  export type PresentationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presentation
     */
    select?: PresentationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presentation
     */
    omit?: PresentationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationInclude<ExtArgs> | null
    /**
     * Filter, which Presentation to fetch.
     */
    where?: PresentationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Presentations to fetch.
     */
    orderBy?: PresentationOrderByWithRelationInput | PresentationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Presentations.
     */
    cursor?: PresentationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Presentations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Presentations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Presentations.
     */
    distinct?: PresentationScalarFieldEnum | PresentationScalarFieldEnum[]
  }

  /**
   * Presentation findMany
   */
  export type PresentationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presentation
     */
    select?: PresentationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presentation
     */
    omit?: PresentationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationInclude<ExtArgs> | null
    /**
     * Filter, which Presentations to fetch.
     */
    where?: PresentationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Presentations to fetch.
     */
    orderBy?: PresentationOrderByWithRelationInput | PresentationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Presentations.
     */
    cursor?: PresentationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Presentations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Presentations.
     */
    skip?: number
    distinct?: PresentationScalarFieldEnum | PresentationScalarFieldEnum[]
  }

  /**
   * Presentation create
   */
  export type PresentationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presentation
     */
    select?: PresentationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presentation
     */
    omit?: PresentationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationInclude<ExtArgs> | null
    /**
     * The data needed to create a Presentation.
     */
    data: XOR<PresentationCreateInput, PresentationUncheckedCreateInput>
  }

  /**
   * Presentation createMany
   */
  export type PresentationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Presentations.
     */
    data: PresentationCreateManyInput | PresentationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Presentation createManyAndReturn
   */
  export type PresentationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presentation
     */
    select?: PresentationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Presentation
     */
    omit?: PresentationOmit<ExtArgs> | null
    /**
     * The data used to create many Presentations.
     */
    data: PresentationCreateManyInput | PresentationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Presentation update
   */
  export type PresentationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presentation
     */
    select?: PresentationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presentation
     */
    omit?: PresentationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationInclude<ExtArgs> | null
    /**
     * The data needed to update a Presentation.
     */
    data: XOR<PresentationUpdateInput, PresentationUncheckedUpdateInput>
    /**
     * Choose, which Presentation to update.
     */
    where: PresentationWhereUniqueInput
  }

  /**
   * Presentation updateMany
   */
  export type PresentationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Presentations.
     */
    data: XOR<PresentationUpdateManyMutationInput, PresentationUncheckedUpdateManyInput>
    /**
     * Filter which Presentations to update
     */
    where?: PresentationWhereInput
    /**
     * Limit how many Presentations to update.
     */
    limit?: number
  }

  /**
   * Presentation updateManyAndReturn
   */
  export type PresentationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presentation
     */
    select?: PresentationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Presentation
     */
    omit?: PresentationOmit<ExtArgs> | null
    /**
     * The data used to update Presentations.
     */
    data: XOR<PresentationUpdateManyMutationInput, PresentationUncheckedUpdateManyInput>
    /**
     * Filter which Presentations to update
     */
    where?: PresentationWhereInput
    /**
     * Limit how many Presentations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Presentation upsert
   */
  export type PresentationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presentation
     */
    select?: PresentationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presentation
     */
    omit?: PresentationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationInclude<ExtArgs> | null
    /**
     * The filter to search for the Presentation to update in case it exists.
     */
    where: PresentationWhereUniqueInput
    /**
     * In case the Presentation found by the `where` argument doesn't exist, create a new Presentation with this data.
     */
    create: XOR<PresentationCreateInput, PresentationUncheckedCreateInput>
    /**
     * In case the Presentation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PresentationUpdateInput, PresentationUncheckedUpdateInput>
  }

  /**
   * Presentation delete
   */
  export type PresentationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presentation
     */
    select?: PresentationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presentation
     */
    omit?: PresentationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationInclude<ExtArgs> | null
    /**
     * Filter which Presentation to delete.
     */
    where: PresentationWhereUniqueInput
  }

  /**
   * Presentation deleteMany
   */
  export type PresentationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Presentations to delete
     */
    where?: PresentationWhereInput
    /**
     * Limit how many Presentations to delete.
     */
    limit?: number
  }

  /**
   * Presentation.metrics
   */
  export type Presentation$metricsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PresentationMetrics
     */
    select?: PresentationMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PresentationMetrics
     */
    omit?: PresentationMetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationMetricsInclude<ExtArgs> | null
    where?: PresentationMetricsWhereInput
  }

  /**
   * Presentation.authors
   */
  export type Presentation$authorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PresentationAuthor
     */
    select?: PresentationAuthorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PresentationAuthor
     */
    omit?: PresentationAuthorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationAuthorInclude<ExtArgs> | null
    where?: PresentationAuthorWhereInput
    orderBy?: PresentationAuthorOrderByWithRelationInput | PresentationAuthorOrderByWithRelationInput[]
    cursor?: PresentationAuthorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PresentationAuthorScalarFieldEnum | PresentationAuthorScalarFieldEnum[]
  }

  /**
   * Presentation.materials
   */
  export type Presentation$materialsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PresentationMaterial
     */
    select?: PresentationMaterialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PresentationMaterial
     */
    omit?: PresentationMaterialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationMaterialInclude<ExtArgs> | null
    where?: PresentationMaterialWhereInput
    orderBy?: PresentationMaterialOrderByWithRelationInput | PresentationMaterialOrderByWithRelationInput[]
    cursor?: PresentationMaterialWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PresentationMaterialScalarFieldEnum | PresentationMaterialScalarFieldEnum[]
  }

  /**
   * Presentation.favorites
   */
  export type Presentation$favoritesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Favorite
     */
    omit?: FavoriteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteInclude<ExtArgs> | null
    where?: FavoriteWhereInput
    orderBy?: FavoriteOrderByWithRelationInput | FavoriteOrderByWithRelationInput[]
    cursor?: FavoriteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FavoriteScalarFieldEnum | FavoriteScalarFieldEnum[]
  }

  /**
   * Presentation without action
   */
  export type PresentationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presentation
     */
    select?: PresentationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presentation
     */
    omit?: PresentationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationInclude<ExtArgs> | null
  }


  /**
   * Model PresentationAuthor
   */

  export type AggregatePresentationAuthor = {
    _count: PresentationAuthorCountAggregateOutputType | null
    _min: PresentationAuthorMinAggregateOutputType | null
    _max: PresentationAuthorMaxAggregateOutputType | null
  }

  export type PresentationAuthorMinAggregateOutputType = {
    id: string | null
    userId: string | null
    presentationId: string | null
    affiliationId: string | null
    isCorrespondingAuthor: boolean | null
  }

  export type PresentationAuthorMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    presentationId: string | null
    affiliationId: string | null
    isCorrespondingAuthor: boolean | null
  }

  export type PresentationAuthorCountAggregateOutputType = {
    id: number
    userId: number
    presentationId: number
    affiliationId: number
    isCorrespondingAuthor: number
    _all: number
  }


  export type PresentationAuthorMinAggregateInputType = {
    id?: true
    userId?: true
    presentationId?: true
    affiliationId?: true
    isCorrespondingAuthor?: true
  }

  export type PresentationAuthorMaxAggregateInputType = {
    id?: true
    userId?: true
    presentationId?: true
    affiliationId?: true
    isCorrespondingAuthor?: true
  }

  export type PresentationAuthorCountAggregateInputType = {
    id?: true
    userId?: true
    presentationId?: true
    affiliationId?: true
    isCorrespondingAuthor?: true
    _all?: true
  }

  export type PresentationAuthorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PresentationAuthor to aggregate.
     */
    where?: PresentationAuthorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PresentationAuthors to fetch.
     */
    orderBy?: PresentationAuthorOrderByWithRelationInput | PresentationAuthorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PresentationAuthorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PresentationAuthors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PresentationAuthors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PresentationAuthors
    **/
    _count?: true | PresentationAuthorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PresentationAuthorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PresentationAuthorMaxAggregateInputType
  }

  export type GetPresentationAuthorAggregateType<T extends PresentationAuthorAggregateArgs> = {
        [P in keyof T & keyof AggregatePresentationAuthor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePresentationAuthor[P]>
      : GetScalarType<T[P], AggregatePresentationAuthor[P]>
  }




  export type PresentationAuthorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PresentationAuthorWhereInput
    orderBy?: PresentationAuthorOrderByWithAggregationInput | PresentationAuthorOrderByWithAggregationInput[]
    by: PresentationAuthorScalarFieldEnum[] | PresentationAuthorScalarFieldEnum
    having?: PresentationAuthorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PresentationAuthorCountAggregateInputType | true
    _min?: PresentationAuthorMinAggregateInputType
    _max?: PresentationAuthorMaxAggregateInputType
  }

  export type PresentationAuthorGroupByOutputType = {
    id: string
    userId: string
    presentationId: string
    affiliationId: string | null
    isCorrespondingAuthor: boolean
    _count: PresentationAuthorCountAggregateOutputType | null
    _min: PresentationAuthorMinAggregateOutputType | null
    _max: PresentationAuthorMaxAggregateOutputType | null
  }

  type GetPresentationAuthorGroupByPayload<T extends PresentationAuthorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PresentationAuthorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PresentationAuthorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PresentationAuthorGroupByOutputType[P]>
            : GetScalarType<T[P], PresentationAuthorGroupByOutputType[P]>
        }
      >
    >


  export type PresentationAuthorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    presentationId?: boolean
    affiliationId?: boolean
    isCorrespondingAuthor?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    presentation?: boolean | PresentationDefaultArgs<ExtArgs>
    affiliation?: boolean | PresentationAuthor$affiliationArgs<ExtArgs>
  }, ExtArgs["result"]["presentationAuthor"]>

  export type PresentationAuthorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    presentationId?: boolean
    affiliationId?: boolean
    isCorrespondingAuthor?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    presentation?: boolean | PresentationDefaultArgs<ExtArgs>
    affiliation?: boolean | PresentationAuthor$affiliationArgs<ExtArgs>
  }, ExtArgs["result"]["presentationAuthor"]>

  export type PresentationAuthorSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    presentationId?: boolean
    affiliationId?: boolean
    isCorrespondingAuthor?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    presentation?: boolean | PresentationDefaultArgs<ExtArgs>
    affiliation?: boolean | PresentationAuthor$affiliationArgs<ExtArgs>
  }, ExtArgs["result"]["presentationAuthor"]>

  export type PresentationAuthorSelectScalar = {
    id?: boolean
    userId?: boolean
    presentationId?: boolean
    affiliationId?: boolean
    isCorrespondingAuthor?: boolean
  }

  export type PresentationAuthorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "presentationId" | "affiliationId" | "isCorrespondingAuthor", ExtArgs["result"]["presentationAuthor"]>
  export type PresentationAuthorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    presentation?: boolean | PresentationDefaultArgs<ExtArgs>
    affiliation?: boolean | PresentationAuthor$affiliationArgs<ExtArgs>
  }
  export type PresentationAuthorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    presentation?: boolean | PresentationDefaultArgs<ExtArgs>
    affiliation?: boolean | PresentationAuthor$affiliationArgs<ExtArgs>
  }
  export type PresentationAuthorIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    presentation?: boolean | PresentationDefaultArgs<ExtArgs>
    affiliation?: boolean | PresentationAuthor$affiliationArgs<ExtArgs>
  }

  export type $PresentationAuthorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PresentationAuthor"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      presentation: Prisma.$PresentationPayload<ExtArgs>
      affiliation: Prisma.$AffiliationPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      presentationId: string
      affiliationId: string | null
      isCorrespondingAuthor: boolean
    }, ExtArgs["result"]["presentationAuthor"]>
    composites: {}
  }

  type PresentationAuthorGetPayload<S extends boolean | null | undefined | PresentationAuthorDefaultArgs> = $Result.GetResult<Prisma.$PresentationAuthorPayload, S>

  type PresentationAuthorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PresentationAuthorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PresentationAuthorCountAggregateInputType | true
    }

  export interface PresentationAuthorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PresentationAuthor'], meta: { name: 'PresentationAuthor' } }
    /**
     * Find zero or one PresentationAuthor that matches the filter.
     * @param {PresentationAuthorFindUniqueArgs} args - Arguments to find a PresentationAuthor
     * @example
     * // Get one PresentationAuthor
     * const presentationAuthor = await prisma.presentationAuthor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PresentationAuthorFindUniqueArgs>(args: SelectSubset<T, PresentationAuthorFindUniqueArgs<ExtArgs>>): Prisma__PresentationAuthorClient<$Result.GetResult<Prisma.$PresentationAuthorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PresentationAuthor that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PresentationAuthorFindUniqueOrThrowArgs} args - Arguments to find a PresentationAuthor
     * @example
     * // Get one PresentationAuthor
     * const presentationAuthor = await prisma.presentationAuthor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PresentationAuthorFindUniqueOrThrowArgs>(args: SelectSubset<T, PresentationAuthorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PresentationAuthorClient<$Result.GetResult<Prisma.$PresentationAuthorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PresentationAuthor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresentationAuthorFindFirstArgs} args - Arguments to find a PresentationAuthor
     * @example
     * // Get one PresentationAuthor
     * const presentationAuthor = await prisma.presentationAuthor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PresentationAuthorFindFirstArgs>(args?: SelectSubset<T, PresentationAuthorFindFirstArgs<ExtArgs>>): Prisma__PresentationAuthorClient<$Result.GetResult<Prisma.$PresentationAuthorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PresentationAuthor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresentationAuthorFindFirstOrThrowArgs} args - Arguments to find a PresentationAuthor
     * @example
     * // Get one PresentationAuthor
     * const presentationAuthor = await prisma.presentationAuthor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PresentationAuthorFindFirstOrThrowArgs>(args?: SelectSubset<T, PresentationAuthorFindFirstOrThrowArgs<ExtArgs>>): Prisma__PresentationAuthorClient<$Result.GetResult<Prisma.$PresentationAuthorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PresentationAuthors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresentationAuthorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PresentationAuthors
     * const presentationAuthors = await prisma.presentationAuthor.findMany()
     * 
     * // Get first 10 PresentationAuthors
     * const presentationAuthors = await prisma.presentationAuthor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const presentationAuthorWithIdOnly = await prisma.presentationAuthor.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PresentationAuthorFindManyArgs>(args?: SelectSubset<T, PresentationAuthorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PresentationAuthorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PresentationAuthor.
     * @param {PresentationAuthorCreateArgs} args - Arguments to create a PresentationAuthor.
     * @example
     * // Create one PresentationAuthor
     * const PresentationAuthor = await prisma.presentationAuthor.create({
     *   data: {
     *     // ... data to create a PresentationAuthor
     *   }
     * })
     * 
     */
    create<T extends PresentationAuthorCreateArgs>(args: SelectSubset<T, PresentationAuthorCreateArgs<ExtArgs>>): Prisma__PresentationAuthorClient<$Result.GetResult<Prisma.$PresentationAuthorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PresentationAuthors.
     * @param {PresentationAuthorCreateManyArgs} args - Arguments to create many PresentationAuthors.
     * @example
     * // Create many PresentationAuthors
     * const presentationAuthor = await prisma.presentationAuthor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PresentationAuthorCreateManyArgs>(args?: SelectSubset<T, PresentationAuthorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PresentationAuthors and returns the data saved in the database.
     * @param {PresentationAuthorCreateManyAndReturnArgs} args - Arguments to create many PresentationAuthors.
     * @example
     * // Create many PresentationAuthors
     * const presentationAuthor = await prisma.presentationAuthor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PresentationAuthors and only return the `id`
     * const presentationAuthorWithIdOnly = await prisma.presentationAuthor.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PresentationAuthorCreateManyAndReturnArgs>(args?: SelectSubset<T, PresentationAuthorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PresentationAuthorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PresentationAuthor.
     * @param {PresentationAuthorDeleteArgs} args - Arguments to delete one PresentationAuthor.
     * @example
     * // Delete one PresentationAuthor
     * const PresentationAuthor = await prisma.presentationAuthor.delete({
     *   where: {
     *     // ... filter to delete one PresentationAuthor
     *   }
     * })
     * 
     */
    delete<T extends PresentationAuthorDeleteArgs>(args: SelectSubset<T, PresentationAuthorDeleteArgs<ExtArgs>>): Prisma__PresentationAuthorClient<$Result.GetResult<Prisma.$PresentationAuthorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PresentationAuthor.
     * @param {PresentationAuthorUpdateArgs} args - Arguments to update one PresentationAuthor.
     * @example
     * // Update one PresentationAuthor
     * const presentationAuthor = await prisma.presentationAuthor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PresentationAuthorUpdateArgs>(args: SelectSubset<T, PresentationAuthorUpdateArgs<ExtArgs>>): Prisma__PresentationAuthorClient<$Result.GetResult<Prisma.$PresentationAuthorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PresentationAuthors.
     * @param {PresentationAuthorDeleteManyArgs} args - Arguments to filter PresentationAuthors to delete.
     * @example
     * // Delete a few PresentationAuthors
     * const { count } = await prisma.presentationAuthor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PresentationAuthorDeleteManyArgs>(args?: SelectSubset<T, PresentationAuthorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PresentationAuthors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresentationAuthorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PresentationAuthors
     * const presentationAuthor = await prisma.presentationAuthor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PresentationAuthorUpdateManyArgs>(args: SelectSubset<T, PresentationAuthorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PresentationAuthors and returns the data updated in the database.
     * @param {PresentationAuthorUpdateManyAndReturnArgs} args - Arguments to update many PresentationAuthors.
     * @example
     * // Update many PresentationAuthors
     * const presentationAuthor = await prisma.presentationAuthor.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PresentationAuthors and only return the `id`
     * const presentationAuthorWithIdOnly = await prisma.presentationAuthor.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PresentationAuthorUpdateManyAndReturnArgs>(args: SelectSubset<T, PresentationAuthorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PresentationAuthorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PresentationAuthor.
     * @param {PresentationAuthorUpsertArgs} args - Arguments to update or create a PresentationAuthor.
     * @example
     * // Update or create a PresentationAuthor
     * const presentationAuthor = await prisma.presentationAuthor.upsert({
     *   create: {
     *     // ... data to create a PresentationAuthor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PresentationAuthor we want to update
     *   }
     * })
     */
    upsert<T extends PresentationAuthorUpsertArgs>(args: SelectSubset<T, PresentationAuthorUpsertArgs<ExtArgs>>): Prisma__PresentationAuthorClient<$Result.GetResult<Prisma.$PresentationAuthorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PresentationAuthors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresentationAuthorCountArgs} args - Arguments to filter PresentationAuthors to count.
     * @example
     * // Count the number of PresentationAuthors
     * const count = await prisma.presentationAuthor.count({
     *   where: {
     *     // ... the filter for the PresentationAuthors we want to count
     *   }
     * })
    **/
    count<T extends PresentationAuthorCountArgs>(
      args?: Subset<T, PresentationAuthorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PresentationAuthorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PresentationAuthor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresentationAuthorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PresentationAuthorAggregateArgs>(args: Subset<T, PresentationAuthorAggregateArgs>): Prisma.PrismaPromise<GetPresentationAuthorAggregateType<T>>

    /**
     * Group by PresentationAuthor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresentationAuthorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PresentationAuthorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PresentationAuthorGroupByArgs['orderBy'] }
        : { orderBy?: PresentationAuthorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PresentationAuthorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPresentationAuthorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PresentationAuthor model
   */
  readonly fields: PresentationAuthorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PresentationAuthor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PresentationAuthorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    presentation<T extends PresentationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PresentationDefaultArgs<ExtArgs>>): Prisma__PresentationClient<$Result.GetResult<Prisma.$PresentationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    affiliation<T extends PresentationAuthor$affiliationArgs<ExtArgs> = {}>(args?: Subset<T, PresentationAuthor$affiliationArgs<ExtArgs>>): Prisma__AffiliationClient<$Result.GetResult<Prisma.$AffiliationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PresentationAuthor model
   */
  interface PresentationAuthorFieldRefs {
    readonly id: FieldRef<"PresentationAuthor", 'String'>
    readonly userId: FieldRef<"PresentationAuthor", 'String'>
    readonly presentationId: FieldRef<"PresentationAuthor", 'String'>
    readonly affiliationId: FieldRef<"PresentationAuthor", 'String'>
    readonly isCorrespondingAuthor: FieldRef<"PresentationAuthor", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * PresentationAuthor findUnique
   */
  export type PresentationAuthorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PresentationAuthor
     */
    select?: PresentationAuthorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PresentationAuthor
     */
    omit?: PresentationAuthorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationAuthorInclude<ExtArgs> | null
    /**
     * Filter, which PresentationAuthor to fetch.
     */
    where: PresentationAuthorWhereUniqueInput
  }

  /**
   * PresentationAuthor findUniqueOrThrow
   */
  export type PresentationAuthorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PresentationAuthor
     */
    select?: PresentationAuthorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PresentationAuthor
     */
    omit?: PresentationAuthorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationAuthorInclude<ExtArgs> | null
    /**
     * Filter, which PresentationAuthor to fetch.
     */
    where: PresentationAuthorWhereUniqueInput
  }

  /**
   * PresentationAuthor findFirst
   */
  export type PresentationAuthorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PresentationAuthor
     */
    select?: PresentationAuthorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PresentationAuthor
     */
    omit?: PresentationAuthorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationAuthorInclude<ExtArgs> | null
    /**
     * Filter, which PresentationAuthor to fetch.
     */
    where?: PresentationAuthorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PresentationAuthors to fetch.
     */
    orderBy?: PresentationAuthorOrderByWithRelationInput | PresentationAuthorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PresentationAuthors.
     */
    cursor?: PresentationAuthorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PresentationAuthors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PresentationAuthors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PresentationAuthors.
     */
    distinct?: PresentationAuthorScalarFieldEnum | PresentationAuthorScalarFieldEnum[]
  }

  /**
   * PresentationAuthor findFirstOrThrow
   */
  export type PresentationAuthorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PresentationAuthor
     */
    select?: PresentationAuthorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PresentationAuthor
     */
    omit?: PresentationAuthorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationAuthorInclude<ExtArgs> | null
    /**
     * Filter, which PresentationAuthor to fetch.
     */
    where?: PresentationAuthorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PresentationAuthors to fetch.
     */
    orderBy?: PresentationAuthorOrderByWithRelationInput | PresentationAuthorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PresentationAuthors.
     */
    cursor?: PresentationAuthorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PresentationAuthors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PresentationAuthors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PresentationAuthors.
     */
    distinct?: PresentationAuthorScalarFieldEnum | PresentationAuthorScalarFieldEnum[]
  }

  /**
   * PresentationAuthor findMany
   */
  export type PresentationAuthorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PresentationAuthor
     */
    select?: PresentationAuthorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PresentationAuthor
     */
    omit?: PresentationAuthorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationAuthorInclude<ExtArgs> | null
    /**
     * Filter, which PresentationAuthors to fetch.
     */
    where?: PresentationAuthorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PresentationAuthors to fetch.
     */
    orderBy?: PresentationAuthorOrderByWithRelationInput | PresentationAuthorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PresentationAuthors.
     */
    cursor?: PresentationAuthorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PresentationAuthors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PresentationAuthors.
     */
    skip?: number
    distinct?: PresentationAuthorScalarFieldEnum | PresentationAuthorScalarFieldEnum[]
  }

  /**
   * PresentationAuthor create
   */
  export type PresentationAuthorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PresentationAuthor
     */
    select?: PresentationAuthorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PresentationAuthor
     */
    omit?: PresentationAuthorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationAuthorInclude<ExtArgs> | null
    /**
     * The data needed to create a PresentationAuthor.
     */
    data: XOR<PresentationAuthorCreateInput, PresentationAuthorUncheckedCreateInput>
  }

  /**
   * PresentationAuthor createMany
   */
  export type PresentationAuthorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PresentationAuthors.
     */
    data: PresentationAuthorCreateManyInput | PresentationAuthorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PresentationAuthor createManyAndReturn
   */
  export type PresentationAuthorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PresentationAuthor
     */
    select?: PresentationAuthorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PresentationAuthor
     */
    omit?: PresentationAuthorOmit<ExtArgs> | null
    /**
     * The data used to create many PresentationAuthors.
     */
    data: PresentationAuthorCreateManyInput | PresentationAuthorCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationAuthorIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PresentationAuthor update
   */
  export type PresentationAuthorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PresentationAuthor
     */
    select?: PresentationAuthorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PresentationAuthor
     */
    omit?: PresentationAuthorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationAuthorInclude<ExtArgs> | null
    /**
     * The data needed to update a PresentationAuthor.
     */
    data: XOR<PresentationAuthorUpdateInput, PresentationAuthorUncheckedUpdateInput>
    /**
     * Choose, which PresentationAuthor to update.
     */
    where: PresentationAuthorWhereUniqueInput
  }

  /**
   * PresentationAuthor updateMany
   */
  export type PresentationAuthorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PresentationAuthors.
     */
    data: XOR<PresentationAuthorUpdateManyMutationInput, PresentationAuthorUncheckedUpdateManyInput>
    /**
     * Filter which PresentationAuthors to update
     */
    where?: PresentationAuthorWhereInput
    /**
     * Limit how many PresentationAuthors to update.
     */
    limit?: number
  }

  /**
   * PresentationAuthor updateManyAndReturn
   */
  export type PresentationAuthorUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PresentationAuthor
     */
    select?: PresentationAuthorSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PresentationAuthor
     */
    omit?: PresentationAuthorOmit<ExtArgs> | null
    /**
     * The data used to update PresentationAuthors.
     */
    data: XOR<PresentationAuthorUpdateManyMutationInput, PresentationAuthorUncheckedUpdateManyInput>
    /**
     * Filter which PresentationAuthors to update
     */
    where?: PresentationAuthorWhereInput
    /**
     * Limit how many PresentationAuthors to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationAuthorIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PresentationAuthor upsert
   */
  export type PresentationAuthorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PresentationAuthor
     */
    select?: PresentationAuthorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PresentationAuthor
     */
    omit?: PresentationAuthorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationAuthorInclude<ExtArgs> | null
    /**
     * The filter to search for the PresentationAuthor to update in case it exists.
     */
    where: PresentationAuthorWhereUniqueInput
    /**
     * In case the PresentationAuthor found by the `where` argument doesn't exist, create a new PresentationAuthor with this data.
     */
    create: XOR<PresentationAuthorCreateInput, PresentationAuthorUncheckedCreateInput>
    /**
     * In case the PresentationAuthor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PresentationAuthorUpdateInput, PresentationAuthorUncheckedUpdateInput>
  }

  /**
   * PresentationAuthor delete
   */
  export type PresentationAuthorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PresentationAuthor
     */
    select?: PresentationAuthorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PresentationAuthor
     */
    omit?: PresentationAuthorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationAuthorInclude<ExtArgs> | null
    /**
     * Filter which PresentationAuthor to delete.
     */
    where: PresentationAuthorWhereUniqueInput
  }

  /**
   * PresentationAuthor deleteMany
   */
  export type PresentationAuthorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PresentationAuthors to delete
     */
    where?: PresentationAuthorWhereInput
    /**
     * Limit how many PresentationAuthors to delete.
     */
    limit?: number
  }

  /**
   * PresentationAuthor.affiliation
   */
  export type PresentationAuthor$affiliationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Affiliation
     */
    select?: AffiliationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Affiliation
     */
    omit?: AffiliationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliationInclude<ExtArgs> | null
    where?: AffiliationWhereInput
  }

  /**
   * PresentationAuthor without action
   */
  export type PresentationAuthorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PresentationAuthor
     */
    select?: PresentationAuthorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PresentationAuthor
     */
    omit?: PresentationAuthorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationAuthorInclude<ExtArgs> | null
  }


  /**
   * Model Affiliation
   */

  export type AggregateAffiliation = {
    _count: AffiliationCountAggregateOutputType | null
    _min: AffiliationMinAggregateOutputType | null
    _max: AffiliationMaxAggregateOutputType | null
  }

  export type AffiliationMinAggregateOutputType = {
    id: string | null
    name: string | null
    country: string | null
  }

  export type AffiliationMaxAggregateOutputType = {
    id: string | null
    name: string | null
    country: string | null
  }

  export type AffiliationCountAggregateOutputType = {
    id: number
    name: number
    country: number
    _all: number
  }


  export type AffiliationMinAggregateInputType = {
    id?: true
    name?: true
    country?: true
  }

  export type AffiliationMaxAggregateInputType = {
    id?: true
    name?: true
    country?: true
  }

  export type AffiliationCountAggregateInputType = {
    id?: true
    name?: true
    country?: true
    _all?: true
  }

  export type AffiliationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Affiliation to aggregate.
     */
    where?: AffiliationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Affiliations to fetch.
     */
    orderBy?: AffiliationOrderByWithRelationInput | AffiliationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AffiliationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Affiliations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Affiliations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Affiliations
    **/
    _count?: true | AffiliationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AffiliationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AffiliationMaxAggregateInputType
  }

  export type GetAffiliationAggregateType<T extends AffiliationAggregateArgs> = {
        [P in keyof T & keyof AggregateAffiliation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAffiliation[P]>
      : GetScalarType<T[P], AggregateAffiliation[P]>
  }




  export type AffiliationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AffiliationWhereInput
    orderBy?: AffiliationOrderByWithAggregationInput | AffiliationOrderByWithAggregationInput[]
    by: AffiliationScalarFieldEnum[] | AffiliationScalarFieldEnum
    having?: AffiliationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AffiliationCountAggregateInputType | true
    _min?: AffiliationMinAggregateInputType
    _max?: AffiliationMaxAggregateInputType
  }

  export type AffiliationGroupByOutputType = {
    id: string
    name: string
    country: string | null
    _count: AffiliationCountAggregateOutputType | null
    _min: AffiliationMinAggregateOutputType | null
    _max: AffiliationMaxAggregateOutputType | null
  }

  type GetAffiliationGroupByPayload<T extends AffiliationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AffiliationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AffiliationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AffiliationGroupByOutputType[P]>
            : GetScalarType<T[P], AffiliationGroupByOutputType[P]>
        }
      >
    >


  export type AffiliationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    country?: boolean
    authors?: boolean | Affiliation$authorsArgs<ExtArgs>
    _count?: boolean | AffiliationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["affiliation"]>

  export type AffiliationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    country?: boolean
  }, ExtArgs["result"]["affiliation"]>

  export type AffiliationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    country?: boolean
  }, ExtArgs["result"]["affiliation"]>

  export type AffiliationSelectScalar = {
    id?: boolean
    name?: boolean
    country?: boolean
  }

  export type AffiliationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "country", ExtArgs["result"]["affiliation"]>
  export type AffiliationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    authors?: boolean | Affiliation$authorsArgs<ExtArgs>
    _count?: boolean | AffiliationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AffiliationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type AffiliationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $AffiliationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Affiliation"
    objects: {
      authors: Prisma.$PresentationAuthorPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      country: string | null
    }, ExtArgs["result"]["affiliation"]>
    composites: {}
  }

  type AffiliationGetPayload<S extends boolean | null | undefined | AffiliationDefaultArgs> = $Result.GetResult<Prisma.$AffiliationPayload, S>

  type AffiliationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AffiliationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AffiliationCountAggregateInputType | true
    }

  export interface AffiliationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Affiliation'], meta: { name: 'Affiliation' } }
    /**
     * Find zero or one Affiliation that matches the filter.
     * @param {AffiliationFindUniqueArgs} args - Arguments to find a Affiliation
     * @example
     * // Get one Affiliation
     * const affiliation = await prisma.affiliation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AffiliationFindUniqueArgs>(args: SelectSubset<T, AffiliationFindUniqueArgs<ExtArgs>>): Prisma__AffiliationClient<$Result.GetResult<Prisma.$AffiliationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Affiliation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AffiliationFindUniqueOrThrowArgs} args - Arguments to find a Affiliation
     * @example
     * // Get one Affiliation
     * const affiliation = await prisma.affiliation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AffiliationFindUniqueOrThrowArgs>(args: SelectSubset<T, AffiliationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AffiliationClient<$Result.GetResult<Prisma.$AffiliationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Affiliation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AffiliationFindFirstArgs} args - Arguments to find a Affiliation
     * @example
     * // Get one Affiliation
     * const affiliation = await prisma.affiliation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AffiliationFindFirstArgs>(args?: SelectSubset<T, AffiliationFindFirstArgs<ExtArgs>>): Prisma__AffiliationClient<$Result.GetResult<Prisma.$AffiliationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Affiliation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AffiliationFindFirstOrThrowArgs} args - Arguments to find a Affiliation
     * @example
     * // Get one Affiliation
     * const affiliation = await prisma.affiliation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AffiliationFindFirstOrThrowArgs>(args?: SelectSubset<T, AffiliationFindFirstOrThrowArgs<ExtArgs>>): Prisma__AffiliationClient<$Result.GetResult<Prisma.$AffiliationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Affiliations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AffiliationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Affiliations
     * const affiliations = await prisma.affiliation.findMany()
     * 
     * // Get first 10 Affiliations
     * const affiliations = await prisma.affiliation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const affiliationWithIdOnly = await prisma.affiliation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AffiliationFindManyArgs>(args?: SelectSubset<T, AffiliationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AffiliationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Affiliation.
     * @param {AffiliationCreateArgs} args - Arguments to create a Affiliation.
     * @example
     * // Create one Affiliation
     * const Affiliation = await prisma.affiliation.create({
     *   data: {
     *     // ... data to create a Affiliation
     *   }
     * })
     * 
     */
    create<T extends AffiliationCreateArgs>(args: SelectSubset<T, AffiliationCreateArgs<ExtArgs>>): Prisma__AffiliationClient<$Result.GetResult<Prisma.$AffiliationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Affiliations.
     * @param {AffiliationCreateManyArgs} args - Arguments to create many Affiliations.
     * @example
     * // Create many Affiliations
     * const affiliation = await prisma.affiliation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AffiliationCreateManyArgs>(args?: SelectSubset<T, AffiliationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Affiliations and returns the data saved in the database.
     * @param {AffiliationCreateManyAndReturnArgs} args - Arguments to create many Affiliations.
     * @example
     * // Create many Affiliations
     * const affiliation = await prisma.affiliation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Affiliations and only return the `id`
     * const affiliationWithIdOnly = await prisma.affiliation.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AffiliationCreateManyAndReturnArgs>(args?: SelectSubset<T, AffiliationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AffiliationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Affiliation.
     * @param {AffiliationDeleteArgs} args - Arguments to delete one Affiliation.
     * @example
     * // Delete one Affiliation
     * const Affiliation = await prisma.affiliation.delete({
     *   where: {
     *     // ... filter to delete one Affiliation
     *   }
     * })
     * 
     */
    delete<T extends AffiliationDeleteArgs>(args: SelectSubset<T, AffiliationDeleteArgs<ExtArgs>>): Prisma__AffiliationClient<$Result.GetResult<Prisma.$AffiliationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Affiliation.
     * @param {AffiliationUpdateArgs} args - Arguments to update one Affiliation.
     * @example
     * // Update one Affiliation
     * const affiliation = await prisma.affiliation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AffiliationUpdateArgs>(args: SelectSubset<T, AffiliationUpdateArgs<ExtArgs>>): Prisma__AffiliationClient<$Result.GetResult<Prisma.$AffiliationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Affiliations.
     * @param {AffiliationDeleteManyArgs} args - Arguments to filter Affiliations to delete.
     * @example
     * // Delete a few Affiliations
     * const { count } = await prisma.affiliation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AffiliationDeleteManyArgs>(args?: SelectSubset<T, AffiliationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Affiliations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AffiliationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Affiliations
     * const affiliation = await prisma.affiliation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AffiliationUpdateManyArgs>(args: SelectSubset<T, AffiliationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Affiliations and returns the data updated in the database.
     * @param {AffiliationUpdateManyAndReturnArgs} args - Arguments to update many Affiliations.
     * @example
     * // Update many Affiliations
     * const affiliation = await prisma.affiliation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Affiliations and only return the `id`
     * const affiliationWithIdOnly = await prisma.affiliation.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AffiliationUpdateManyAndReturnArgs>(args: SelectSubset<T, AffiliationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AffiliationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Affiliation.
     * @param {AffiliationUpsertArgs} args - Arguments to update or create a Affiliation.
     * @example
     * // Update or create a Affiliation
     * const affiliation = await prisma.affiliation.upsert({
     *   create: {
     *     // ... data to create a Affiliation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Affiliation we want to update
     *   }
     * })
     */
    upsert<T extends AffiliationUpsertArgs>(args: SelectSubset<T, AffiliationUpsertArgs<ExtArgs>>): Prisma__AffiliationClient<$Result.GetResult<Prisma.$AffiliationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Affiliations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AffiliationCountArgs} args - Arguments to filter Affiliations to count.
     * @example
     * // Count the number of Affiliations
     * const count = await prisma.affiliation.count({
     *   where: {
     *     // ... the filter for the Affiliations we want to count
     *   }
     * })
    **/
    count<T extends AffiliationCountArgs>(
      args?: Subset<T, AffiliationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AffiliationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Affiliation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AffiliationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AffiliationAggregateArgs>(args: Subset<T, AffiliationAggregateArgs>): Prisma.PrismaPromise<GetAffiliationAggregateType<T>>

    /**
     * Group by Affiliation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AffiliationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AffiliationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AffiliationGroupByArgs['orderBy'] }
        : { orderBy?: AffiliationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AffiliationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAffiliationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Affiliation model
   */
  readonly fields: AffiliationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Affiliation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AffiliationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    authors<T extends Affiliation$authorsArgs<ExtArgs> = {}>(args?: Subset<T, Affiliation$authorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PresentationAuthorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Affiliation model
   */
  interface AffiliationFieldRefs {
    readonly id: FieldRef<"Affiliation", 'String'>
    readonly name: FieldRef<"Affiliation", 'String'>
    readonly country: FieldRef<"Affiliation", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Affiliation findUnique
   */
  export type AffiliationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Affiliation
     */
    select?: AffiliationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Affiliation
     */
    omit?: AffiliationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliationInclude<ExtArgs> | null
    /**
     * Filter, which Affiliation to fetch.
     */
    where: AffiliationWhereUniqueInput
  }

  /**
   * Affiliation findUniqueOrThrow
   */
  export type AffiliationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Affiliation
     */
    select?: AffiliationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Affiliation
     */
    omit?: AffiliationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliationInclude<ExtArgs> | null
    /**
     * Filter, which Affiliation to fetch.
     */
    where: AffiliationWhereUniqueInput
  }

  /**
   * Affiliation findFirst
   */
  export type AffiliationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Affiliation
     */
    select?: AffiliationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Affiliation
     */
    omit?: AffiliationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliationInclude<ExtArgs> | null
    /**
     * Filter, which Affiliation to fetch.
     */
    where?: AffiliationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Affiliations to fetch.
     */
    orderBy?: AffiliationOrderByWithRelationInput | AffiliationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Affiliations.
     */
    cursor?: AffiliationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Affiliations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Affiliations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Affiliations.
     */
    distinct?: AffiliationScalarFieldEnum | AffiliationScalarFieldEnum[]
  }

  /**
   * Affiliation findFirstOrThrow
   */
  export type AffiliationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Affiliation
     */
    select?: AffiliationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Affiliation
     */
    omit?: AffiliationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliationInclude<ExtArgs> | null
    /**
     * Filter, which Affiliation to fetch.
     */
    where?: AffiliationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Affiliations to fetch.
     */
    orderBy?: AffiliationOrderByWithRelationInput | AffiliationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Affiliations.
     */
    cursor?: AffiliationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Affiliations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Affiliations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Affiliations.
     */
    distinct?: AffiliationScalarFieldEnum | AffiliationScalarFieldEnum[]
  }

  /**
   * Affiliation findMany
   */
  export type AffiliationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Affiliation
     */
    select?: AffiliationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Affiliation
     */
    omit?: AffiliationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliationInclude<ExtArgs> | null
    /**
     * Filter, which Affiliations to fetch.
     */
    where?: AffiliationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Affiliations to fetch.
     */
    orderBy?: AffiliationOrderByWithRelationInput | AffiliationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Affiliations.
     */
    cursor?: AffiliationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Affiliations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Affiliations.
     */
    skip?: number
    distinct?: AffiliationScalarFieldEnum | AffiliationScalarFieldEnum[]
  }

  /**
   * Affiliation create
   */
  export type AffiliationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Affiliation
     */
    select?: AffiliationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Affiliation
     */
    omit?: AffiliationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliationInclude<ExtArgs> | null
    /**
     * The data needed to create a Affiliation.
     */
    data: XOR<AffiliationCreateInput, AffiliationUncheckedCreateInput>
  }

  /**
   * Affiliation createMany
   */
  export type AffiliationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Affiliations.
     */
    data: AffiliationCreateManyInput | AffiliationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Affiliation createManyAndReturn
   */
  export type AffiliationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Affiliation
     */
    select?: AffiliationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Affiliation
     */
    omit?: AffiliationOmit<ExtArgs> | null
    /**
     * The data used to create many Affiliations.
     */
    data: AffiliationCreateManyInput | AffiliationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Affiliation update
   */
  export type AffiliationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Affiliation
     */
    select?: AffiliationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Affiliation
     */
    omit?: AffiliationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliationInclude<ExtArgs> | null
    /**
     * The data needed to update a Affiliation.
     */
    data: XOR<AffiliationUpdateInput, AffiliationUncheckedUpdateInput>
    /**
     * Choose, which Affiliation to update.
     */
    where: AffiliationWhereUniqueInput
  }

  /**
   * Affiliation updateMany
   */
  export type AffiliationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Affiliations.
     */
    data: XOR<AffiliationUpdateManyMutationInput, AffiliationUncheckedUpdateManyInput>
    /**
     * Filter which Affiliations to update
     */
    where?: AffiliationWhereInput
    /**
     * Limit how many Affiliations to update.
     */
    limit?: number
  }

  /**
   * Affiliation updateManyAndReturn
   */
  export type AffiliationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Affiliation
     */
    select?: AffiliationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Affiliation
     */
    omit?: AffiliationOmit<ExtArgs> | null
    /**
     * The data used to update Affiliations.
     */
    data: XOR<AffiliationUpdateManyMutationInput, AffiliationUncheckedUpdateManyInput>
    /**
     * Filter which Affiliations to update
     */
    where?: AffiliationWhereInput
    /**
     * Limit how many Affiliations to update.
     */
    limit?: number
  }

  /**
   * Affiliation upsert
   */
  export type AffiliationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Affiliation
     */
    select?: AffiliationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Affiliation
     */
    omit?: AffiliationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliationInclude<ExtArgs> | null
    /**
     * The filter to search for the Affiliation to update in case it exists.
     */
    where: AffiliationWhereUniqueInput
    /**
     * In case the Affiliation found by the `where` argument doesn't exist, create a new Affiliation with this data.
     */
    create: XOR<AffiliationCreateInput, AffiliationUncheckedCreateInput>
    /**
     * In case the Affiliation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AffiliationUpdateInput, AffiliationUncheckedUpdateInput>
  }

  /**
   * Affiliation delete
   */
  export type AffiliationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Affiliation
     */
    select?: AffiliationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Affiliation
     */
    omit?: AffiliationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliationInclude<ExtArgs> | null
    /**
     * Filter which Affiliation to delete.
     */
    where: AffiliationWhereUniqueInput
  }

  /**
   * Affiliation deleteMany
   */
  export type AffiliationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Affiliations to delete
     */
    where?: AffiliationWhereInput
    /**
     * Limit how many Affiliations to delete.
     */
    limit?: number
  }

  /**
   * Affiliation.authors
   */
  export type Affiliation$authorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PresentationAuthor
     */
    select?: PresentationAuthorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PresentationAuthor
     */
    omit?: PresentationAuthorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationAuthorInclude<ExtArgs> | null
    where?: PresentationAuthorWhereInput
    orderBy?: PresentationAuthorOrderByWithRelationInput | PresentationAuthorOrderByWithRelationInput[]
    cursor?: PresentationAuthorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PresentationAuthorScalarFieldEnum | PresentationAuthorScalarFieldEnum[]
  }

  /**
   * Affiliation without action
   */
  export type AffiliationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Affiliation
     */
    select?: AffiliationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Affiliation
     */
    omit?: AffiliationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliationInclude<ExtArgs> | null
  }


  /**
   * Model PresentationMaterial
   */

  export type AggregatePresentationMaterial = {
    _count: PresentationMaterialCountAggregateOutputType | null
    _min: PresentationMaterialMinAggregateOutputType | null
    _max: PresentationMaterialMaxAggregateOutputType | null
  }

  export type PresentationMaterialMinAggregateOutputType = {
    id: string | null
    fileUrl: string | null
    fileType: $Enums.MaterialType | null
    label: string | null
    presentationId: string | null
    uploadedAt: Date | null
  }

  export type PresentationMaterialMaxAggregateOutputType = {
    id: string | null
    fileUrl: string | null
    fileType: $Enums.MaterialType | null
    label: string | null
    presentationId: string | null
    uploadedAt: Date | null
  }

  export type PresentationMaterialCountAggregateOutputType = {
    id: number
    fileUrl: number
    fileType: number
    label: number
    presentationId: number
    uploadedAt: number
    _all: number
  }


  export type PresentationMaterialMinAggregateInputType = {
    id?: true
    fileUrl?: true
    fileType?: true
    label?: true
    presentationId?: true
    uploadedAt?: true
  }

  export type PresentationMaterialMaxAggregateInputType = {
    id?: true
    fileUrl?: true
    fileType?: true
    label?: true
    presentationId?: true
    uploadedAt?: true
  }

  export type PresentationMaterialCountAggregateInputType = {
    id?: true
    fileUrl?: true
    fileType?: true
    label?: true
    presentationId?: true
    uploadedAt?: true
    _all?: true
  }

  export type PresentationMaterialAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PresentationMaterial to aggregate.
     */
    where?: PresentationMaterialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PresentationMaterials to fetch.
     */
    orderBy?: PresentationMaterialOrderByWithRelationInput | PresentationMaterialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PresentationMaterialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PresentationMaterials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PresentationMaterials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PresentationMaterials
    **/
    _count?: true | PresentationMaterialCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PresentationMaterialMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PresentationMaterialMaxAggregateInputType
  }

  export type GetPresentationMaterialAggregateType<T extends PresentationMaterialAggregateArgs> = {
        [P in keyof T & keyof AggregatePresentationMaterial]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePresentationMaterial[P]>
      : GetScalarType<T[P], AggregatePresentationMaterial[P]>
  }




  export type PresentationMaterialGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PresentationMaterialWhereInput
    orderBy?: PresentationMaterialOrderByWithAggregationInput | PresentationMaterialOrderByWithAggregationInput[]
    by: PresentationMaterialScalarFieldEnum[] | PresentationMaterialScalarFieldEnum
    having?: PresentationMaterialScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PresentationMaterialCountAggregateInputType | true
    _min?: PresentationMaterialMinAggregateInputType
    _max?: PresentationMaterialMaxAggregateInputType
  }

  export type PresentationMaterialGroupByOutputType = {
    id: string
    fileUrl: string
    fileType: $Enums.MaterialType
    label: string | null
    presentationId: string
    uploadedAt: Date
    _count: PresentationMaterialCountAggregateOutputType | null
    _min: PresentationMaterialMinAggregateOutputType | null
    _max: PresentationMaterialMaxAggregateOutputType | null
  }

  type GetPresentationMaterialGroupByPayload<T extends PresentationMaterialGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PresentationMaterialGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PresentationMaterialGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PresentationMaterialGroupByOutputType[P]>
            : GetScalarType<T[P], PresentationMaterialGroupByOutputType[P]>
        }
      >
    >


  export type PresentationMaterialSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fileUrl?: boolean
    fileType?: boolean
    label?: boolean
    presentationId?: boolean
    uploadedAt?: boolean
    presentation?: boolean | PresentationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["presentationMaterial"]>

  export type PresentationMaterialSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fileUrl?: boolean
    fileType?: boolean
    label?: boolean
    presentationId?: boolean
    uploadedAt?: boolean
    presentation?: boolean | PresentationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["presentationMaterial"]>

  export type PresentationMaterialSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fileUrl?: boolean
    fileType?: boolean
    label?: boolean
    presentationId?: boolean
    uploadedAt?: boolean
    presentation?: boolean | PresentationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["presentationMaterial"]>

  export type PresentationMaterialSelectScalar = {
    id?: boolean
    fileUrl?: boolean
    fileType?: boolean
    label?: boolean
    presentationId?: boolean
    uploadedAt?: boolean
  }

  export type PresentationMaterialOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "fileUrl" | "fileType" | "label" | "presentationId" | "uploadedAt", ExtArgs["result"]["presentationMaterial"]>
  export type PresentationMaterialInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    presentation?: boolean | PresentationDefaultArgs<ExtArgs>
  }
  export type PresentationMaterialIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    presentation?: boolean | PresentationDefaultArgs<ExtArgs>
  }
  export type PresentationMaterialIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    presentation?: boolean | PresentationDefaultArgs<ExtArgs>
  }

  export type $PresentationMaterialPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PresentationMaterial"
    objects: {
      presentation: Prisma.$PresentationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      fileUrl: string
      fileType: $Enums.MaterialType
      label: string | null
      presentationId: string
      uploadedAt: Date
    }, ExtArgs["result"]["presentationMaterial"]>
    composites: {}
  }

  type PresentationMaterialGetPayload<S extends boolean | null | undefined | PresentationMaterialDefaultArgs> = $Result.GetResult<Prisma.$PresentationMaterialPayload, S>

  type PresentationMaterialCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PresentationMaterialFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PresentationMaterialCountAggregateInputType | true
    }

  export interface PresentationMaterialDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PresentationMaterial'], meta: { name: 'PresentationMaterial' } }
    /**
     * Find zero or one PresentationMaterial that matches the filter.
     * @param {PresentationMaterialFindUniqueArgs} args - Arguments to find a PresentationMaterial
     * @example
     * // Get one PresentationMaterial
     * const presentationMaterial = await prisma.presentationMaterial.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PresentationMaterialFindUniqueArgs>(args: SelectSubset<T, PresentationMaterialFindUniqueArgs<ExtArgs>>): Prisma__PresentationMaterialClient<$Result.GetResult<Prisma.$PresentationMaterialPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PresentationMaterial that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PresentationMaterialFindUniqueOrThrowArgs} args - Arguments to find a PresentationMaterial
     * @example
     * // Get one PresentationMaterial
     * const presentationMaterial = await prisma.presentationMaterial.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PresentationMaterialFindUniqueOrThrowArgs>(args: SelectSubset<T, PresentationMaterialFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PresentationMaterialClient<$Result.GetResult<Prisma.$PresentationMaterialPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PresentationMaterial that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresentationMaterialFindFirstArgs} args - Arguments to find a PresentationMaterial
     * @example
     * // Get one PresentationMaterial
     * const presentationMaterial = await prisma.presentationMaterial.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PresentationMaterialFindFirstArgs>(args?: SelectSubset<T, PresentationMaterialFindFirstArgs<ExtArgs>>): Prisma__PresentationMaterialClient<$Result.GetResult<Prisma.$PresentationMaterialPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PresentationMaterial that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresentationMaterialFindFirstOrThrowArgs} args - Arguments to find a PresentationMaterial
     * @example
     * // Get one PresentationMaterial
     * const presentationMaterial = await prisma.presentationMaterial.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PresentationMaterialFindFirstOrThrowArgs>(args?: SelectSubset<T, PresentationMaterialFindFirstOrThrowArgs<ExtArgs>>): Prisma__PresentationMaterialClient<$Result.GetResult<Prisma.$PresentationMaterialPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PresentationMaterials that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresentationMaterialFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PresentationMaterials
     * const presentationMaterials = await prisma.presentationMaterial.findMany()
     * 
     * // Get first 10 PresentationMaterials
     * const presentationMaterials = await prisma.presentationMaterial.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const presentationMaterialWithIdOnly = await prisma.presentationMaterial.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PresentationMaterialFindManyArgs>(args?: SelectSubset<T, PresentationMaterialFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PresentationMaterialPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PresentationMaterial.
     * @param {PresentationMaterialCreateArgs} args - Arguments to create a PresentationMaterial.
     * @example
     * // Create one PresentationMaterial
     * const PresentationMaterial = await prisma.presentationMaterial.create({
     *   data: {
     *     // ... data to create a PresentationMaterial
     *   }
     * })
     * 
     */
    create<T extends PresentationMaterialCreateArgs>(args: SelectSubset<T, PresentationMaterialCreateArgs<ExtArgs>>): Prisma__PresentationMaterialClient<$Result.GetResult<Prisma.$PresentationMaterialPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PresentationMaterials.
     * @param {PresentationMaterialCreateManyArgs} args - Arguments to create many PresentationMaterials.
     * @example
     * // Create many PresentationMaterials
     * const presentationMaterial = await prisma.presentationMaterial.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PresentationMaterialCreateManyArgs>(args?: SelectSubset<T, PresentationMaterialCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PresentationMaterials and returns the data saved in the database.
     * @param {PresentationMaterialCreateManyAndReturnArgs} args - Arguments to create many PresentationMaterials.
     * @example
     * // Create many PresentationMaterials
     * const presentationMaterial = await prisma.presentationMaterial.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PresentationMaterials and only return the `id`
     * const presentationMaterialWithIdOnly = await prisma.presentationMaterial.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PresentationMaterialCreateManyAndReturnArgs>(args?: SelectSubset<T, PresentationMaterialCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PresentationMaterialPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PresentationMaterial.
     * @param {PresentationMaterialDeleteArgs} args - Arguments to delete one PresentationMaterial.
     * @example
     * // Delete one PresentationMaterial
     * const PresentationMaterial = await prisma.presentationMaterial.delete({
     *   where: {
     *     // ... filter to delete one PresentationMaterial
     *   }
     * })
     * 
     */
    delete<T extends PresentationMaterialDeleteArgs>(args: SelectSubset<T, PresentationMaterialDeleteArgs<ExtArgs>>): Prisma__PresentationMaterialClient<$Result.GetResult<Prisma.$PresentationMaterialPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PresentationMaterial.
     * @param {PresentationMaterialUpdateArgs} args - Arguments to update one PresentationMaterial.
     * @example
     * // Update one PresentationMaterial
     * const presentationMaterial = await prisma.presentationMaterial.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PresentationMaterialUpdateArgs>(args: SelectSubset<T, PresentationMaterialUpdateArgs<ExtArgs>>): Prisma__PresentationMaterialClient<$Result.GetResult<Prisma.$PresentationMaterialPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PresentationMaterials.
     * @param {PresentationMaterialDeleteManyArgs} args - Arguments to filter PresentationMaterials to delete.
     * @example
     * // Delete a few PresentationMaterials
     * const { count } = await prisma.presentationMaterial.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PresentationMaterialDeleteManyArgs>(args?: SelectSubset<T, PresentationMaterialDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PresentationMaterials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresentationMaterialUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PresentationMaterials
     * const presentationMaterial = await prisma.presentationMaterial.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PresentationMaterialUpdateManyArgs>(args: SelectSubset<T, PresentationMaterialUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PresentationMaterials and returns the data updated in the database.
     * @param {PresentationMaterialUpdateManyAndReturnArgs} args - Arguments to update many PresentationMaterials.
     * @example
     * // Update many PresentationMaterials
     * const presentationMaterial = await prisma.presentationMaterial.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PresentationMaterials and only return the `id`
     * const presentationMaterialWithIdOnly = await prisma.presentationMaterial.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PresentationMaterialUpdateManyAndReturnArgs>(args: SelectSubset<T, PresentationMaterialUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PresentationMaterialPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PresentationMaterial.
     * @param {PresentationMaterialUpsertArgs} args - Arguments to update or create a PresentationMaterial.
     * @example
     * // Update or create a PresentationMaterial
     * const presentationMaterial = await prisma.presentationMaterial.upsert({
     *   create: {
     *     // ... data to create a PresentationMaterial
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PresentationMaterial we want to update
     *   }
     * })
     */
    upsert<T extends PresentationMaterialUpsertArgs>(args: SelectSubset<T, PresentationMaterialUpsertArgs<ExtArgs>>): Prisma__PresentationMaterialClient<$Result.GetResult<Prisma.$PresentationMaterialPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PresentationMaterials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresentationMaterialCountArgs} args - Arguments to filter PresentationMaterials to count.
     * @example
     * // Count the number of PresentationMaterials
     * const count = await prisma.presentationMaterial.count({
     *   where: {
     *     // ... the filter for the PresentationMaterials we want to count
     *   }
     * })
    **/
    count<T extends PresentationMaterialCountArgs>(
      args?: Subset<T, PresentationMaterialCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PresentationMaterialCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PresentationMaterial.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresentationMaterialAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PresentationMaterialAggregateArgs>(args: Subset<T, PresentationMaterialAggregateArgs>): Prisma.PrismaPromise<GetPresentationMaterialAggregateType<T>>

    /**
     * Group by PresentationMaterial.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresentationMaterialGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PresentationMaterialGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PresentationMaterialGroupByArgs['orderBy'] }
        : { orderBy?: PresentationMaterialGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PresentationMaterialGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPresentationMaterialGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PresentationMaterial model
   */
  readonly fields: PresentationMaterialFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PresentationMaterial.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PresentationMaterialClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    presentation<T extends PresentationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PresentationDefaultArgs<ExtArgs>>): Prisma__PresentationClient<$Result.GetResult<Prisma.$PresentationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PresentationMaterial model
   */
  interface PresentationMaterialFieldRefs {
    readonly id: FieldRef<"PresentationMaterial", 'String'>
    readonly fileUrl: FieldRef<"PresentationMaterial", 'String'>
    readonly fileType: FieldRef<"PresentationMaterial", 'MaterialType'>
    readonly label: FieldRef<"PresentationMaterial", 'String'>
    readonly presentationId: FieldRef<"PresentationMaterial", 'String'>
    readonly uploadedAt: FieldRef<"PresentationMaterial", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PresentationMaterial findUnique
   */
  export type PresentationMaterialFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PresentationMaterial
     */
    select?: PresentationMaterialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PresentationMaterial
     */
    omit?: PresentationMaterialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationMaterialInclude<ExtArgs> | null
    /**
     * Filter, which PresentationMaterial to fetch.
     */
    where: PresentationMaterialWhereUniqueInput
  }

  /**
   * PresentationMaterial findUniqueOrThrow
   */
  export type PresentationMaterialFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PresentationMaterial
     */
    select?: PresentationMaterialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PresentationMaterial
     */
    omit?: PresentationMaterialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationMaterialInclude<ExtArgs> | null
    /**
     * Filter, which PresentationMaterial to fetch.
     */
    where: PresentationMaterialWhereUniqueInput
  }

  /**
   * PresentationMaterial findFirst
   */
  export type PresentationMaterialFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PresentationMaterial
     */
    select?: PresentationMaterialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PresentationMaterial
     */
    omit?: PresentationMaterialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationMaterialInclude<ExtArgs> | null
    /**
     * Filter, which PresentationMaterial to fetch.
     */
    where?: PresentationMaterialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PresentationMaterials to fetch.
     */
    orderBy?: PresentationMaterialOrderByWithRelationInput | PresentationMaterialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PresentationMaterials.
     */
    cursor?: PresentationMaterialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PresentationMaterials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PresentationMaterials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PresentationMaterials.
     */
    distinct?: PresentationMaterialScalarFieldEnum | PresentationMaterialScalarFieldEnum[]
  }

  /**
   * PresentationMaterial findFirstOrThrow
   */
  export type PresentationMaterialFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PresentationMaterial
     */
    select?: PresentationMaterialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PresentationMaterial
     */
    omit?: PresentationMaterialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationMaterialInclude<ExtArgs> | null
    /**
     * Filter, which PresentationMaterial to fetch.
     */
    where?: PresentationMaterialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PresentationMaterials to fetch.
     */
    orderBy?: PresentationMaterialOrderByWithRelationInput | PresentationMaterialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PresentationMaterials.
     */
    cursor?: PresentationMaterialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PresentationMaterials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PresentationMaterials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PresentationMaterials.
     */
    distinct?: PresentationMaterialScalarFieldEnum | PresentationMaterialScalarFieldEnum[]
  }

  /**
   * PresentationMaterial findMany
   */
  export type PresentationMaterialFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PresentationMaterial
     */
    select?: PresentationMaterialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PresentationMaterial
     */
    omit?: PresentationMaterialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationMaterialInclude<ExtArgs> | null
    /**
     * Filter, which PresentationMaterials to fetch.
     */
    where?: PresentationMaterialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PresentationMaterials to fetch.
     */
    orderBy?: PresentationMaterialOrderByWithRelationInput | PresentationMaterialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PresentationMaterials.
     */
    cursor?: PresentationMaterialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PresentationMaterials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PresentationMaterials.
     */
    skip?: number
    distinct?: PresentationMaterialScalarFieldEnum | PresentationMaterialScalarFieldEnum[]
  }

  /**
   * PresentationMaterial create
   */
  export type PresentationMaterialCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PresentationMaterial
     */
    select?: PresentationMaterialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PresentationMaterial
     */
    omit?: PresentationMaterialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationMaterialInclude<ExtArgs> | null
    /**
     * The data needed to create a PresentationMaterial.
     */
    data: XOR<PresentationMaterialCreateInput, PresentationMaterialUncheckedCreateInput>
  }

  /**
   * PresentationMaterial createMany
   */
  export type PresentationMaterialCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PresentationMaterials.
     */
    data: PresentationMaterialCreateManyInput | PresentationMaterialCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PresentationMaterial createManyAndReturn
   */
  export type PresentationMaterialCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PresentationMaterial
     */
    select?: PresentationMaterialSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PresentationMaterial
     */
    omit?: PresentationMaterialOmit<ExtArgs> | null
    /**
     * The data used to create many PresentationMaterials.
     */
    data: PresentationMaterialCreateManyInput | PresentationMaterialCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationMaterialIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PresentationMaterial update
   */
  export type PresentationMaterialUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PresentationMaterial
     */
    select?: PresentationMaterialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PresentationMaterial
     */
    omit?: PresentationMaterialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationMaterialInclude<ExtArgs> | null
    /**
     * The data needed to update a PresentationMaterial.
     */
    data: XOR<PresentationMaterialUpdateInput, PresentationMaterialUncheckedUpdateInput>
    /**
     * Choose, which PresentationMaterial to update.
     */
    where: PresentationMaterialWhereUniqueInput
  }

  /**
   * PresentationMaterial updateMany
   */
  export type PresentationMaterialUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PresentationMaterials.
     */
    data: XOR<PresentationMaterialUpdateManyMutationInput, PresentationMaterialUncheckedUpdateManyInput>
    /**
     * Filter which PresentationMaterials to update
     */
    where?: PresentationMaterialWhereInput
    /**
     * Limit how many PresentationMaterials to update.
     */
    limit?: number
  }

  /**
   * PresentationMaterial updateManyAndReturn
   */
  export type PresentationMaterialUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PresentationMaterial
     */
    select?: PresentationMaterialSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PresentationMaterial
     */
    omit?: PresentationMaterialOmit<ExtArgs> | null
    /**
     * The data used to update PresentationMaterials.
     */
    data: XOR<PresentationMaterialUpdateManyMutationInput, PresentationMaterialUncheckedUpdateManyInput>
    /**
     * Filter which PresentationMaterials to update
     */
    where?: PresentationMaterialWhereInput
    /**
     * Limit how many PresentationMaterials to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationMaterialIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PresentationMaterial upsert
   */
  export type PresentationMaterialUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PresentationMaterial
     */
    select?: PresentationMaterialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PresentationMaterial
     */
    omit?: PresentationMaterialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationMaterialInclude<ExtArgs> | null
    /**
     * The filter to search for the PresentationMaterial to update in case it exists.
     */
    where: PresentationMaterialWhereUniqueInput
    /**
     * In case the PresentationMaterial found by the `where` argument doesn't exist, create a new PresentationMaterial with this data.
     */
    create: XOR<PresentationMaterialCreateInput, PresentationMaterialUncheckedCreateInput>
    /**
     * In case the PresentationMaterial was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PresentationMaterialUpdateInput, PresentationMaterialUncheckedUpdateInput>
  }

  /**
   * PresentationMaterial delete
   */
  export type PresentationMaterialDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PresentationMaterial
     */
    select?: PresentationMaterialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PresentationMaterial
     */
    omit?: PresentationMaterialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationMaterialInclude<ExtArgs> | null
    /**
     * Filter which PresentationMaterial to delete.
     */
    where: PresentationMaterialWhereUniqueInput
  }

  /**
   * PresentationMaterial deleteMany
   */
  export type PresentationMaterialDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PresentationMaterials to delete
     */
    where?: PresentationMaterialWhereInput
    /**
     * Limit how many PresentationMaterials to delete.
     */
    limit?: number
  }

  /**
   * PresentationMaterial without action
   */
  export type PresentationMaterialDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PresentationMaterial
     */
    select?: PresentationMaterialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PresentationMaterial
     */
    omit?: PresentationMaterialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationMaterialInclude<ExtArgs> | null
  }


  /**
   * Model Break
   */

  export type AggregateBreak = {
    _count: BreakCountAggregateOutputType | null
    _min: BreakMinAggregateOutputType | null
    _max: BreakMaxAggregateOutputType | null
  }

  export type BreakMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    startTime: Date | null
    endTime: Date | null
    sectionId: string | null
  }

  export type BreakMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    startTime: Date | null
    endTime: Date | null
    sectionId: string | null
  }

  export type BreakCountAggregateOutputType = {
    id: number
    title: number
    description: number
    startTime: number
    endTime: number
    sectionId: number
    _all: number
  }


  export type BreakMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    startTime?: true
    endTime?: true
    sectionId?: true
  }

  export type BreakMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    startTime?: true
    endTime?: true
    sectionId?: true
  }

  export type BreakCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    startTime?: true
    endTime?: true
    sectionId?: true
    _all?: true
  }

  export type BreakAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Break to aggregate.
     */
    where?: BreakWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Breaks to fetch.
     */
    orderBy?: BreakOrderByWithRelationInput | BreakOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BreakWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Breaks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Breaks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Breaks
    **/
    _count?: true | BreakCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BreakMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BreakMaxAggregateInputType
  }

  export type GetBreakAggregateType<T extends BreakAggregateArgs> = {
        [P in keyof T & keyof AggregateBreak]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBreak[P]>
      : GetScalarType<T[P], AggregateBreak[P]>
  }




  export type BreakGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BreakWhereInput
    orderBy?: BreakOrderByWithAggregationInput | BreakOrderByWithAggregationInput[]
    by: BreakScalarFieldEnum[] | BreakScalarFieldEnum
    having?: BreakScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BreakCountAggregateInputType | true
    _min?: BreakMinAggregateInputType
    _max?: BreakMaxAggregateInputType
  }

  export type BreakGroupByOutputType = {
    id: string
    title: string
    description: string | null
    startTime: Date
    endTime: Date
    sectionId: string
    _count: BreakCountAggregateOutputType | null
    _min: BreakMinAggregateOutputType | null
    _max: BreakMaxAggregateOutputType | null
  }

  type GetBreakGroupByPayload<T extends BreakGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BreakGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BreakGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BreakGroupByOutputType[P]>
            : GetScalarType<T[P], BreakGroupByOutputType[P]>
        }
      >
    >


  export type BreakSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    startTime?: boolean
    endTime?: boolean
    sectionId?: boolean
    section?: boolean | SectionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["break"]>

  export type BreakSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    startTime?: boolean
    endTime?: boolean
    sectionId?: boolean
    section?: boolean | SectionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["break"]>

  export type BreakSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    startTime?: boolean
    endTime?: boolean
    sectionId?: boolean
    section?: boolean | SectionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["break"]>

  export type BreakSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    startTime?: boolean
    endTime?: boolean
    sectionId?: boolean
  }

  export type BreakOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "startTime" | "endTime" | "sectionId", ExtArgs["result"]["break"]>
  export type BreakInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    section?: boolean | SectionDefaultArgs<ExtArgs>
  }
  export type BreakIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    section?: boolean | SectionDefaultArgs<ExtArgs>
  }
  export type BreakIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    section?: boolean | SectionDefaultArgs<ExtArgs>
  }

  export type $BreakPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Break"
    objects: {
      section: Prisma.$SectionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string | null
      startTime: Date
      endTime: Date
      sectionId: string
    }, ExtArgs["result"]["break"]>
    composites: {}
  }

  type BreakGetPayload<S extends boolean | null | undefined | BreakDefaultArgs> = $Result.GetResult<Prisma.$BreakPayload, S>

  type BreakCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BreakFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BreakCountAggregateInputType | true
    }

  export interface BreakDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Break'], meta: { name: 'Break' } }
    /**
     * Find zero or one Break that matches the filter.
     * @param {BreakFindUniqueArgs} args - Arguments to find a Break
     * @example
     * // Get one Break
     * const break = await prisma.break.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BreakFindUniqueArgs>(args: SelectSubset<T, BreakFindUniqueArgs<ExtArgs>>): Prisma__BreakClient<$Result.GetResult<Prisma.$BreakPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Break that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BreakFindUniqueOrThrowArgs} args - Arguments to find a Break
     * @example
     * // Get one Break
     * const break = await prisma.break.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BreakFindUniqueOrThrowArgs>(args: SelectSubset<T, BreakFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BreakClient<$Result.GetResult<Prisma.$BreakPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Break that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BreakFindFirstArgs} args - Arguments to find a Break
     * @example
     * // Get one Break
     * const break = await prisma.break.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BreakFindFirstArgs>(args?: SelectSubset<T, BreakFindFirstArgs<ExtArgs>>): Prisma__BreakClient<$Result.GetResult<Prisma.$BreakPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Break that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BreakFindFirstOrThrowArgs} args - Arguments to find a Break
     * @example
     * // Get one Break
     * const break = await prisma.break.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BreakFindFirstOrThrowArgs>(args?: SelectSubset<T, BreakFindFirstOrThrowArgs<ExtArgs>>): Prisma__BreakClient<$Result.GetResult<Prisma.$BreakPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Breaks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BreakFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Breaks
     * const breaks = await prisma.break.findMany()
     * 
     * // Get first 10 Breaks
     * const breaks = await prisma.break.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const breakWithIdOnly = await prisma.break.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BreakFindManyArgs>(args?: SelectSubset<T, BreakFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BreakPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Break.
     * @param {BreakCreateArgs} args - Arguments to create a Break.
     * @example
     * // Create one Break
     * const Break = await prisma.break.create({
     *   data: {
     *     // ... data to create a Break
     *   }
     * })
     * 
     */
    create<T extends BreakCreateArgs>(args: SelectSubset<T, BreakCreateArgs<ExtArgs>>): Prisma__BreakClient<$Result.GetResult<Prisma.$BreakPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Breaks.
     * @param {BreakCreateManyArgs} args - Arguments to create many Breaks.
     * @example
     * // Create many Breaks
     * const break = await prisma.break.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BreakCreateManyArgs>(args?: SelectSubset<T, BreakCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Breaks and returns the data saved in the database.
     * @param {BreakCreateManyAndReturnArgs} args - Arguments to create many Breaks.
     * @example
     * // Create many Breaks
     * const break = await prisma.break.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Breaks and only return the `id`
     * const breakWithIdOnly = await prisma.break.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BreakCreateManyAndReturnArgs>(args?: SelectSubset<T, BreakCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BreakPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Break.
     * @param {BreakDeleteArgs} args - Arguments to delete one Break.
     * @example
     * // Delete one Break
     * const Break = await prisma.break.delete({
     *   where: {
     *     // ... filter to delete one Break
     *   }
     * })
     * 
     */
    delete<T extends BreakDeleteArgs>(args: SelectSubset<T, BreakDeleteArgs<ExtArgs>>): Prisma__BreakClient<$Result.GetResult<Prisma.$BreakPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Break.
     * @param {BreakUpdateArgs} args - Arguments to update one Break.
     * @example
     * // Update one Break
     * const break = await prisma.break.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BreakUpdateArgs>(args: SelectSubset<T, BreakUpdateArgs<ExtArgs>>): Prisma__BreakClient<$Result.GetResult<Prisma.$BreakPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Breaks.
     * @param {BreakDeleteManyArgs} args - Arguments to filter Breaks to delete.
     * @example
     * // Delete a few Breaks
     * const { count } = await prisma.break.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BreakDeleteManyArgs>(args?: SelectSubset<T, BreakDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Breaks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BreakUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Breaks
     * const break = await prisma.break.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BreakUpdateManyArgs>(args: SelectSubset<T, BreakUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Breaks and returns the data updated in the database.
     * @param {BreakUpdateManyAndReturnArgs} args - Arguments to update many Breaks.
     * @example
     * // Update many Breaks
     * const break = await prisma.break.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Breaks and only return the `id`
     * const breakWithIdOnly = await prisma.break.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BreakUpdateManyAndReturnArgs>(args: SelectSubset<T, BreakUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BreakPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Break.
     * @param {BreakUpsertArgs} args - Arguments to update or create a Break.
     * @example
     * // Update or create a Break
     * const break = await prisma.break.upsert({
     *   create: {
     *     // ... data to create a Break
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Break we want to update
     *   }
     * })
     */
    upsert<T extends BreakUpsertArgs>(args: SelectSubset<T, BreakUpsertArgs<ExtArgs>>): Prisma__BreakClient<$Result.GetResult<Prisma.$BreakPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Breaks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BreakCountArgs} args - Arguments to filter Breaks to count.
     * @example
     * // Count the number of Breaks
     * const count = await prisma.break.count({
     *   where: {
     *     // ... the filter for the Breaks we want to count
     *   }
     * })
    **/
    count<T extends BreakCountArgs>(
      args?: Subset<T, BreakCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BreakCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Break.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BreakAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BreakAggregateArgs>(args: Subset<T, BreakAggregateArgs>): Prisma.PrismaPromise<GetBreakAggregateType<T>>

    /**
     * Group by Break.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BreakGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BreakGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BreakGroupByArgs['orderBy'] }
        : { orderBy?: BreakGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BreakGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBreakGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Break model
   */
  readonly fields: BreakFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Break.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BreakClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    section<T extends SectionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SectionDefaultArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Break model
   */
  interface BreakFieldRefs {
    readonly id: FieldRef<"Break", 'String'>
    readonly title: FieldRef<"Break", 'String'>
    readonly description: FieldRef<"Break", 'String'>
    readonly startTime: FieldRef<"Break", 'DateTime'>
    readonly endTime: FieldRef<"Break", 'DateTime'>
    readonly sectionId: FieldRef<"Break", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Break findUnique
   */
  export type BreakFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Break
     */
    select?: BreakSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Break
     */
    omit?: BreakOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BreakInclude<ExtArgs> | null
    /**
     * Filter, which Break to fetch.
     */
    where: BreakWhereUniqueInput
  }

  /**
   * Break findUniqueOrThrow
   */
  export type BreakFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Break
     */
    select?: BreakSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Break
     */
    omit?: BreakOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BreakInclude<ExtArgs> | null
    /**
     * Filter, which Break to fetch.
     */
    where: BreakWhereUniqueInput
  }

  /**
   * Break findFirst
   */
  export type BreakFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Break
     */
    select?: BreakSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Break
     */
    omit?: BreakOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BreakInclude<ExtArgs> | null
    /**
     * Filter, which Break to fetch.
     */
    where?: BreakWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Breaks to fetch.
     */
    orderBy?: BreakOrderByWithRelationInput | BreakOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Breaks.
     */
    cursor?: BreakWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Breaks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Breaks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Breaks.
     */
    distinct?: BreakScalarFieldEnum | BreakScalarFieldEnum[]
  }

  /**
   * Break findFirstOrThrow
   */
  export type BreakFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Break
     */
    select?: BreakSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Break
     */
    omit?: BreakOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BreakInclude<ExtArgs> | null
    /**
     * Filter, which Break to fetch.
     */
    where?: BreakWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Breaks to fetch.
     */
    orderBy?: BreakOrderByWithRelationInput | BreakOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Breaks.
     */
    cursor?: BreakWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Breaks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Breaks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Breaks.
     */
    distinct?: BreakScalarFieldEnum | BreakScalarFieldEnum[]
  }

  /**
   * Break findMany
   */
  export type BreakFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Break
     */
    select?: BreakSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Break
     */
    omit?: BreakOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BreakInclude<ExtArgs> | null
    /**
     * Filter, which Breaks to fetch.
     */
    where?: BreakWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Breaks to fetch.
     */
    orderBy?: BreakOrderByWithRelationInput | BreakOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Breaks.
     */
    cursor?: BreakWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Breaks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Breaks.
     */
    skip?: number
    distinct?: BreakScalarFieldEnum | BreakScalarFieldEnum[]
  }

  /**
   * Break create
   */
  export type BreakCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Break
     */
    select?: BreakSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Break
     */
    omit?: BreakOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BreakInclude<ExtArgs> | null
    /**
     * The data needed to create a Break.
     */
    data: XOR<BreakCreateInput, BreakUncheckedCreateInput>
  }

  /**
   * Break createMany
   */
  export type BreakCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Breaks.
     */
    data: BreakCreateManyInput | BreakCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Break createManyAndReturn
   */
  export type BreakCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Break
     */
    select?: BreakSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Break
     */
    omit?: BreakOmit<ExtArgs> | null
    /**
     * The data used to create many Breaks.
     */
    data: BreakCreateManyInput | BreakCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BreakIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Break update
   */
  export type BreakUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Break
     */
    select?: BreakSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Break
     */
    omit?: BreakOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BreakInclude<ExtArgs> | null
    /**
     * The data needed to update a Break.
     */
    data: XOR<BreakUpdateInput, BreakUncheckedUpdateInput>
    /**
     * Choose, which Break to update.
     */
    where: BreakWhereUniqueInput
  }

  /**
   * Break updateMany
   */
  export type BreakUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Breaks.
     */
    data: XOR<BreakUpdateManyMutationInput, BreakUncheckedUpdateManyInput>
    /**
     * Filter which Breaks to update
     */
    where?: BreakWhereInput
    /**
     * Limit how many Breaks to update.
     */
    limit?: number
  }

  /**
   * Break updateManyAndReturn
   */
  export type BreakUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Break
     */
    select?: BreakSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Break
     */
    omit?: BreakOmit<ExtArgs> | null
    /**
     * The data used to update Breaks.
     */
    data: XOR<BreakUpdateManyMutationInput, BreakUncheckedUpdateManyInput>
    /**
     * Filter which Breaks to update
     */
    where?: BreakWhereInput
    /**
     * Limit how many Breaks to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BreakIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Break upsert
   */
  export type BreakUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Break
     */
    select?: BreakSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Break
     */
    omit?: BreakOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BreakInclude<ExtArgs> | null
    /**
     * The filter to search for the Break to update in case it exists.
     */
    where: BreakWhereUniqueInput
    /**
     * In case the Break found by the `where` argument doesn't exist, create a new Break with this data.
     */
    create: XOR<BreakCreateInput, BreakUncheckedCreateInput>
    /**
     * In case the Break was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BreakUpdateInput, BreakUncheckedUpdateInput>
  }

  /**
   * Break delete
   */
  export type BreakDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Break
     */
    select?: BreakSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Break
     */
    omit?: BreakOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BreakInclude<ExtArgs> | null
    /**
     * Filter which Break to delete.
     */
    where: BreakWhereUniqueInput
  }

  /**
   * Break deleteMany
   */
  export type BreakDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Breaks to delete
     */
    where?: BreakWhereInput
    /**
     * Limit how many Breaks to delete.
     */
    limit?: number
  }

  /**
   * Break without action
   */
  export type BreakDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Break
     */
    select?: BreakSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Break
     */
    omit?: BreakOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BreakInclude<ExtArgs> | null
  }


  /**
   * Model Favorite
   */

  export type AggregateFavorite = {
    _count: FavoriteCountAggregateOutputType | null
    _min: FavoriteMinAggregateOutputType | null
    _max: FavoriteMaxAggregateOutputType | null
  }

  export type FavoriteMinAggregateOutputType = {
    id: string | null
    userId: string | null
    presentationId: string | null
    createdAt: Date | null
  }

  export type FavoriteMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    presentationId: string | null
    createdAt: Date | null
  }

  export type FavoriteCountAggregateOutputType = {
    id: number
    userId: number
    presentationId: number
    createdAt: number
    _all: number
  }


  export type FavoriteMinAggregateInputType = {
    id?: true
    userId?: true
    presentationId?: true
    createdAt?: true
  }

  export type FavoriteMaxAggregateInputType = {
    id?: true
    userId?: true
    presentationId?: true
    createdAt?: true
  }

  export type FavoriteCountAggregateInputType = {
    id?: true
    userId?: true
    presentationId?: true
    createdAt?: true
    _all?: true
  }

  export type FavoriteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Favorite to aggregate.
     */
    where?: FavoriteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Favorites to fetch.
     */
    orderBy?: FavoriteOrderByWithRelationInput | FavoriteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FavoriteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Favorites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Favorites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Favorites
    **/
    _count?: true | FavoriteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FavoriteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FavoriteMaxAggregateInputType
  }

  export type GetFavoriteAggregateType<T extends FavoriteAggregateArgs> = {
        [P in keyof T & keyof AggregateFavorite]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFavorite[P]>
      : GetScalarType<T[P], AggregateFavorite[P]>
  }




  export type FavoriteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FavoriteWhereInput
    orderBy?: FavoriteOrderByWithAggregationInput | FavoriteOrderByWithAggregationInput[]
    by: FavoriteScalarFieldEnum[] | FavoriteScalarFieldEnum
    having?: FavoriteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FavoriteCountAggregateInputType | true
    _min?: FavoriteMinAggregateInputType
    _max?: FavoriteMaxAggregateInputType
  }

  export type FavoriteGroupByOutputType = {
    id: string
    userId: string
    presentationId: string
    createdAt: Date
    _count: FavoriteCountAggregateOutputType | null
    _min: FavoriteMinAggregateOutputType | null
    _max: FavoriteMaxAggregateOutputType | null
  }

  type GetFavoriteGroupByPayload<T extends FavoriteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FavoriteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FavoriteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FavoriteGroupByOutputType[P]>
            : GetScalarType<T[P], FavoriteGroupByOutputType[P]>
        }
      >
    >


  export type FavoriteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    presentationId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    presentation?: boolean | PresentationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["favorite"]>

  export type FavoriteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    presentationId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    presentation?: boolean | PresentationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["favorite"]>

  export type FavoriteSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    presentationId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    presentation?: boolean | PresentationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["favorite"]>

  export type FavoriteSelectScalar = {
    id?: boolean
    userId?: boolean
    presentationId?: boolean
    createdAt?: boolean
  }

  export type FavoriteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "presentationId" | "createdAt", ExtArgs["result"]["favorite"]>
  export type FavoriteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    presentation?: boolean | PresentationDefaultArgs<ExtArgs>
  }
  export type FavoriteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    presentation?: boolean | PresentationDefaultArgs<ExtArgs>
  }
  export type FavoriteIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    presentation?: boolean | PresentationDefaultArgs<ExtArgs>
  }

  export type $FavoritePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Favorite"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      presentation: Prisma.$PresentationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      presentationId: string
      createdAt: Date
    }, ExtArgs["result"]["favorite"]>
    composites: {}
  }

  type FavoriteGetPayload<S extends boolean | null | undefined | FavoriteDefaultArgs> = $Result.GetResult<Prisma.$FavoritePayload, S>

  type FavoriteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FavoriteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FavoriteCountAggregateInputType | true
    }

  export interface FavoriteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Favorite'], meta: { name: 'Favorite' } }
    /**
     * Find zero or one Favorite that matches the filter.
     * @param {FavoriteFindUniqueArgs} args - Arguments to find a Favorite
     * @example
     * // Get one Favorite
     * const favorite = await prisma.favorite.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FavoriteFindUniqueArgs>(args: SelectSubset<T, FavoriteFindUniqueArgs<ExtArgs>>): Prisma__FavoriteClient<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Favorite that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FavoriteFindUniqueOrThrowArgs} args - Arguments to find a Favorite
     * @example
     * // Get one Favorite
     * const favorite = await prisma.favorite.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FavoriteFindUniqueOrThrowArgs>(args: SelectSubset<T, FavoriteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FavoriteClient<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Favorite that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteFindFirstArgs} args - Arguments to find a Favorite
     * @example
     * // Get one Favorite
     * const favorite = await prisma.favorite.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FavoriteFindFirstArgs>(args?: SelectSubset<T, FavoriteFindFirstArgs<ExtArgs>>): Prisma__FavoriteClient<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Favorite that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteFindFirstOrThrowArgs} args - Arguments to find a Favorite
     * @example
     * // Get one Favorite
     * const favorite = await prisma.favorite.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FavoriteFindFirstOrThrowArgs>(args?: SelectSubset<T, FavoriteFindFirstOrThrowArgs<ExtArgs>>): Prisma__FavoriteClient<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Favorites that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Favorites
     * const favorites = await prisma.favorite.findMany()
     * 
     * // Get first 10 Favorites
     * const favorites = await prisma.favorite.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const favoriteWithIdOnly = await prisma.favorite.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FavoriteFindManyArgs>(args?: SelectSubset<T, FavoriteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Favorite.
     * @param {FavoriteCreateArgs} args - Arguments to create a Favorite.
     * @example
     * // Create one Favorite
     * const Favorite = await prisma.favorite.create({
     *   data: {
     *     // ... data to create a Favorite
     *   }
     * })
     * 
     */
    create<T extends FavoriteCreateArgs>(args: SelectSubset<T, FavoriteCreateArgs<ExtArgs>>): Prisma__FavoriteClient<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Favorites.
     * @param {FavoriteCreateManyArgs} args - Arguments to create many Favorites.
     * @example
     * // Create many Favorites
     * const favorite = await prisma.favorite.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FavoriteCreateManyArgs>(args?: SelectSubset<T, FavoriteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Favorites and returns the data saved in the database.
     * @param {FavoriteCreateManyAndReturnArgs} args - Arguments to create many Favorites.
     * @example
     * // Create many Favorites
     * const favorite = await prisma.favorite.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Favorites and only return the `id`
     * const favoriteWithIdOnly = await prisma.favorite.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FavoriteCreateManyAndReturnArgs>(args?: SelectSubset<T, FavoriteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Favorite.
     * @param {FavoriteDeleteArgs} args - Arguments to delete one Favorite.
     * @example
     * // Delete one Favorite
     * const Favorite = await prisma.favorite.delete({
     *   where: {
     *     // ... filter to delete one Favorite
     *   }
     * })
     * 
     */
    delete<T extends FavoriteDeleteArgs>(args: SelectSubset<T, FavoriteDeleteArgs<ExtArgs>>): Prisma__FavoriteClient<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Favorite.
     * @param {FavoriteUpdateArgs} args - Arguments to update one Favorite.
     * @example
     * // Update one Favorite
     * const favorite = await prisma.favorite.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FavoriteUpdateArgs>(args: SelectSubset<T, FavoriteUpdateArgs<ExtArgs>>): Prisma__FavoriteClient<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Favorites.
     * @param {FavoriteDeleteManyArgs} args - Arguments to filter Favorites to delete.
     * @example
     * // Delete a few Favorites
     * const { count } = await prisma.favorite.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FavoriteDeleteManyArgs>(args?: SelectSubset<T, FavoriteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Favorites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Favorites
     * const favorite = await prisma.favorite.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FavoriteUpdateManyArgs>(args: SelectSubset<T, FavoriteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Favorites and returns the data updated in the database.
     * @param {FavoriteUpdateManyAndReturnArgs} args - Arguments to update many Favorites.
     * @example
     * // Update many Favorites
     * const favorite = await prisma.favorite.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Favorites and only return the `id`
     * const favoriteWithIdOnly = await prisma.favorite.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FavoriteUpdateManyAndReturnArgs>(args: SelectSubset<T, FavoriteUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Favorite.
     * @param {FavoriteUpsertArgs} args - Arguments to update or create a Favorite.
     * @example
     * // Update or create a Favorite
     * const favorite = await prisma.favorite.upsert({
     *   create: {
     *     // ... data to create a Favorite
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Favorite we want to update
     *   }
     * })
     */
    upsert<T extends FavoriteUpsertArgs>(args: SelectSubset<T, FavoriteUpsertArgs<ExtArgs>>): Prisma__FavoriteClient<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Favorites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteCountArgs} args - Arguments to filter Favorites to count.
     * @example
     * // Count the number of Favorites
     * const count = await prisma.favorite.count({
     *   where: {
     *     // ... the filter for the Favorites we want to count
     *   }
     * })
    **/
    count<T extends FavoriteCountArgs>(
      args?: Subset<T, FavoriteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FavoriteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Favorite.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FavoriteAggregateArgs>(args: Subset<T, FavoriteAggregateArgs>): Prisma.PrismaPromise<GetFavoriteAggregateType<T>>

    /**
     * Group by Favorite.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FavoriteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FavoriteGroupByArgs['orderBy'] }
        : { orderBy?: FavoriteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FavoriteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFavoriteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Favorite model
   */
  readonly fields: FavoriteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Favorite.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FavoriteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    presentation<T extends PresentationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PresentationDefaultArgs<ExtArgs>>): Prisma__PresentationClient<$Result.GetResult<Prisma.$PresentationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Favorite model
   */
  interface FavoriteFieldRefs {
    readonly id: FieldRef<"Favorite", 'String'>
    readonly userId: FieldRef<"Favorite", 'String'>
    readonly presentationId: FieldRef<"Favorite", 'String'>
    readonly createdAt: FieldRef<"Favorite", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Favorite findUnique
   */
  export type FavoriteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Favorite
     */
    omit?: FavoriteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteInclude<ExtArgs> | null
    /**
     * Filter, which Favorite to fetch.
     */
    where: FavoriteWhereUniqueInput
  }

  /**
   * Favorite findUniqueOrThrow
   */
  export type FavoriteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Favorite
     */
    omit?: FavoriteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteInclude<ExtArgs> | null
    /**
     * Filter, which Favorite to fetch.
     */
    where: FavoriteWhereUniqueInput
  }

  /**
   * Favorite findFirst
   */
  export type FavoriteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Favorite
     */
    omit?: FavoriteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteInclude<ExtArgs> | null
    /**
     * Filter, which Favorite to fetch.
     */
    where?: FavoriteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Favorites to fetch.
     */
    orderBy?: FavoriteOrderByWithRelationInput | FavoriteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Favorites.
     */
    cursor?: FavoriteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Favorites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Favorites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Favorites.
     */
    distinct?: FavoriteScalarFieldEnum | FavoriteScalarFieldEnum[]
  }

  /**
   * Favorite findFirstOrThrow
   */
  export type FavoriteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Favorite
     */
    omit?: FavoriteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteInclude<ExtArgs> | null
    /**
     * Filter, which Favorite to fetch.
     */
    where?: FavoriteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Favorites to fetch.
     */
    orderBy?: FavoriteOrderByWithRelationInput | FavoriteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Favorites.
     */
    cursor?: FavoriteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Favorites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Favorites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Favorites.
     */
    distinct?: FavoriteScalarFieldEnum | FavoriteScalarFieldEnum[]
  }

  /**
   * Favorite findMany
   */
  export type FavoriteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Favorite
     */
    omit?: FavoriteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteInclude<ExtArgs> | null
    /**
     * Filter, which Favorites to fetch.
     */
    where?: FavoriteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Favorites to fetch.
     */
    orderBy?: FavoriteOrderByWithRelationInput | FavoriteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Favorites.
     */
    cursor?: FavoriteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Favorites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Favorites.
     */
    skip?: number
    distinct?: FavoriteScalarFieldEnum | FavoriteScalarFieldEnum[]
  }

  /**
   * Favorite create
   */
  export type FavoriteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Favorite
     */
    omit?: FavoriteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteInclude<ExtArgs> | null
    /**
     * The data needed to create a Favorite.
     */
    data: XOR<FavoriteCreateInput, FavoriteUncheckedCreateInput>
  }

  /**
   * Favorite createMany
   */
  export type FavoriteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Favorites.
     */
    data: FavoriteCreateManyInput | FavoriteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Favorite createManyAndReturn
   */
  export type FavoriteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Favorite
     */
    omit?: FavoriteOmit<ExtArgs> | null
    /**
     * The data used to create many Favorites.
     */
    data: FavoriteCreateManyInput | FavoriteCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Favorite update
   */
  export type FavoriteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Favorite
     */
    omit?: FavoriteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteInclude<ExtArgs> | null
    /**
     * The data needed to update a Favorite.
     */
    data: XOR<FavoriteUpdateInput, FavoriteUncheckedUpdateInput>
    /**
     * Choose, which Favorite to update.
     */
    where: FavoriteWhereUniqueInput
  }

  /**
   * Favorite updateMany
   */
  export type FavoriteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Favorites.
     */
    data: XOR<FavoriteUpdateManyMutationInput, FavoriteUncheckedUpdateManyInput>
    /**
     * Filter which Favorites to update
     */
    where?: FavoriteWhereInput
    /**
     * Limit how many Favorites to update.
     */
    limit?: number
  }

  /**
   * Favorite updateManyAndReturn
   */
  export type FavoriteUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Favorite
     */
    omit?: FavoriteOmit<ExtArgs> | null
    /**
     * The data used to update Favorites.
     */
    data: XOR<FavoriteUpdateManyMutationInput, FavoriteUncheckedUpdateManyInput>
    /**
     * Filter which Favorites to update
     */
    where?: FavoriteWhereInput
    /**
     * Limit how many Favorites to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Favorite upsert
   */
  export type FavoriteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Favorite
     */
    omit?: FavoriteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteInclude<ExtArgs> | null
    /**
     * The filter to search for the Favorite to update in case it exists.
     */
    where: FavoriteWhereUniqueInput
    /**
     * In case the Favorite found by the `where` argument doesn't exist, create a new Favorite with this data.
     */
    create: XOR<FavoriteCreateInput, FavoriteUncheckedCreateInput>
    /**
     * In case the Favorite was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FavoriteUpdateInput, FavoriteUncheckedUpdateInput>
  }

  /**
   * Favorite delete
   */
  export type FavoriteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Favorite
     */
    omit?: FavoriteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteInclude<ExtArgs> | null
    /**
     * Filter which Favorite to delete.
     */
    where: FavoriteWhereUniqueInput
  }

  /**
   * Favorite deleteMany
   */
  export type FavoriteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Favorites to delete
     */
    where?: FavoriteWhereInput
    /**
     * Limit how many Favorites to delete.
     */
    limit?: number
  }

  /**
   * Favorite without action
   */
  export type FavoriteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Favorite
     */
    omit?: FavoriteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteInclude<ExtArgs> | null
  }


  /**
   * Model AdminActionLog
   */

  export type AggregateAdminActionLog = {
    _count: AdminActionLogCountAggregateOutputType | null
    _min: AdminActionLogMinAggregateOutputType | null
    _max: AdminActionLogMaxAggregateOutputType | null
  }

  export type AdminActionLogMinAggregateOutputType = {
    id: string | null
    adminId: string | null
    organizerId: string | null
    action: string | null
    targetModel: string | null
    targetId: string | null
    reason: string | null
    timestamp: Date | null
  }

  export type AdminActionLogMaxAggregateOutputType = {
    id: string | null
    adminId: string | null
    organizerId: string | null
    action: string | null
    targetModel: string | null
    targetId: string | null
    reason: string | null
    timestamp: Date | null
  }

  export type AdminActionLogCountAggregateOutputType = {
    id: number
    adminId: number
    organizerId: number
    action: number
    targetModel: number
    targetId: number
    reason: number
    timestamp: number
    _all: number
  }


  export type AdminActionLogMinAggregateInputType = {
    id?: true
    adminId?: true
    organizerId?: true
    action?: true
    targetModel?: true
    targetId?: true
    reason?: true
    timestamp?: true
  }

  export type AdminActionLogMaxAggregateInputType = {
    id?: true
    adminId?: true
    organizerId?: true
    action?: true
    targetModel?: true
    targetId?: true
    reason?: true
    timestamp?: true
  }

  export type AdminActionLogCountAggregateInputType = {
    id?: true
    adminId?: true
    organizerId?: true
    action?: true
    targetModel?: true
    targetId?: true
    reason?: true
    timestamp?: true
    _all?: true
  }

  export type AdminActionLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AdminActionLog to aggregate.
     */
    where?: AdminActionLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminActionLogs to fetch.
     */
    orderBy?: AdminActionLogOrderByWithRelationInput | AdminActionLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminActionLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminActionLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminActionLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AdminActionLogs
    **/
    _count?: true | AdminActionLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminActionLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminActionLogMaxAggregateInputType
  }

  export type GetAdminActionLogAggregateType<T extends AdminActionLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAdminActionLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdminActionLog[P]>
      : GetScalarType<T[P], AggregateAdminActionLog[P]>
  }




  export type AdminActionLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminActionLogWhereInput
    orderBy?: AdminActionLogOrderByWithAggregationInput | AdminActionLogOrderByWithAggregationInput[]
    by: AdminActionLogScalarFieldEnum[] | AdminActionLogScalarFieldEnum
    having?: AdminActionLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminActionLogCountAggregateInputType | true
    _min?: AdminActionLogMinAggregateInputType
    _max?: AdminActionLogMaxAggregateInputType
  }

  export type AdminActionLogGroupByOutputType = {
    id: string
    adminId: string
    organizerId: string
    action: string
    targetModel: string
    targetId: string
    reason: string | null
    timestamp: Date
    _count: AdminActionLogCountAggregateOutputType | null
    _min: AdminActionLogMinAggregateOutputType | null
    _max: AdminActionLogMaxAggregateOutputType | null
  }

  type GetAdminActionLogGroupByPayload<T extends AdminActionLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminActionLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminActionLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminActionLogGroupByOutputType[P]>
            : GetScalarType<T[P], AdminActionLogGroupByOutputType[P]>
        }
      >
    >


  export type AdminActionLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    adminId?: boolean
    organizerId?: boolean
    action?: boolean
    targetModel?: boolean
    targetId?: boolean
    reason?: boolean
    timestamp?: boolean
    admin?: boolean | UserDefaultArgs<ExtArgs>
    organizer?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["adminActionLog"]>

  export type AdminActionLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    adminId?: boolean
    organizerId?: boolean
    action?: boolean
    targetModel?: boolean
    targetId?: boolean
    reason?: boolean
    timestamp?: boolean
    admin?: boolean | UserDefaultArgs<ExtArgs>
    organizer?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["adminActionLog"]>

  export type AdminActionLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    adminId?: boolean
    organizerId?: boolean
    action?: boolean
    targetModel?: boolean
    targetId?: boolean
    reason?: boolean
    timestamp?: boolean
    admin?: boolean | UserDefaultArgs<ExtArgs>
    organizer?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["adminActionLog"]>

  export type AdminActionLogSelectScalar = {
    id?: boolean
    adminId?: boolean
    organizerId?: boolean
    action?: boolean
    targetModel?: boolean
    targetId?: boolean
    reason?: boolean
    timestamp?: boolean
  }

  export type AdminActionLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "adminId" | "organizerId" | "action" | "targetModel" | "targetId" | "reason" | "timestamp", ExtArgs["result"]["adminActionLog"]>
  export type AdminActionLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | UserDefaultArgs<ExtArgs>
    organizer?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AdminActionLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | UserDefaultArgs<ExtArgs>
    organizer?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AdminActionLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | UserDefaultArgs<ExtArgs>
    organizer?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AdminActionLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AdminActionLog"
    objects: {
      admin: Prisma.$UserPayload<ExtArgs>
      organizer: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      adminId: string
      organizerId: string
      action: string
      targetModel: string
      targetId: string
      reason: string | null
      timestamp: Date
    }, ExtArgs["result"]["adminActionLog"]>
    composites: {}
  }

  type AdminActionLogGetPayload<S extends boolean | null | undefined | AdminActionLogDefaultArgs> = $Result.GetResult<Prisma.$AdminActionLogPayload, S>

  type AdminActionLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AdminActionLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AdminActionLogCountAggregateInputType | true
    }

  export interface AdminActionLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AdminActionLog'], meta: { name: 'AdminActionLog' } }
    /**
     * Find zero or one AdminActionLog that matches the filter.
     * @param {AdminActionLogFindUniqueArgs} args - Arguments to find a AdminActionLog
     * @example
     * // Get one AdminActionLog
     * const adminActionLog = await prisma.adminActionLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AdminActionLogFindUniqueArgs>(args: SelectSubset<T, AdminActionLogFindUniqueArgs<ExtArgs>>): Prisma__AdminActionLogClient<$Result.GetResult<Prisma.$AdminActionLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AdminActionLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AdminActionLogFindUniqueOrThrowArgs} args - Arguments to find a AdminActionLog
     * @example
     * // Get one AdminActionLog
     * const adminActionLog = await prisma.adminActionLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AdminActionLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AdminActionLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AdminActionLogClient<$Result.GetResult<Prisma.$AdminActionLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AdminActionLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminActionLogFindFirstArgs} args - Arguments to find a AdminActionLog
     * @example
     * // Get one AdminActionLog
     * const adminActionLog = await prisma.adminActionLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AdminActionLogFindFirstArgs>(args?: SelectSubset<T, AdminActionLogFindFirstArgs<ExtArgs>>): Prisma__AdminActionLogClient<$Result.GetResult<Prisma.$AdminActionLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AdminActionLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminActionLogFindFirstOrThrowArgs} args - Arguments to find a AdminActionLog
     * @example
     * // Get one AdminActionLog
     * const adminActionLog = await prisma.adminActionLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AdminActionLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AdminActionLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AdminActionLogClient<$Result.GetResult<Prisma.$AdminActionLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AdminActionLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminActionLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AdminActionLogs
     * const adminActionLogs = await prisma.adminActionLog.findMany()
     * 
     * // Get first 10 AdminActionLogs
     * const adminActionLogs = await prisma.adminActionLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adminActionLogWithIdOnly = await prisma.adminActionLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AdminActionLogFindManyArgs>(args?: SelectSubset<T, AdminActionLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminActionLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AdminActionLog.
     * @param {AdminActionLogCreateArgs} args - Arguments to create a AdminActionLog.
     * @example
     * // Create one AdminActionLog
     * const AdminActionLog = await prisma.adminActionLog.create({
     *   data: {
     *     // ... data to create a AdminActionLog
     *   }
     * })
     * 
     */
    create<T extends AdminActionLogCreateArgs>(args: SelectSubset<T, AdminActionLogCreateArgs<ExtArgs>>): Prisma__AdminActionLogClient<$Result.GetResult<Prisma.$AdminActionLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AdminActionLogs.
     * @param {AdminActionLogCreateManyArgs} args - Arguments to create many AdminActionLogs.
     * @example
     * // Create many AdminActionLogs
     * const adminActionLog = await prisma.adminActionLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AdminActionLogCreateManyArgs>(args?: SelectSubset<T, AdminActionLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AdminActionLogs and returns the data saved in the database.
     * @param {AdminActionLogCreateManyAndReturnArgs} args - Arguments to create many AdminActionLogs.
     * @example
     * // Create many AdminActionLogs
     * const adminActionLog = await prisma.adminActionLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AdminActionLogs and only return the `id`
     * const adminActionLogWithIdOnly = await prisma.adminActionLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AdminActionLogCreateManyAndReturnArgs>(args?: SelectSubset<T, AdminActionLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminActionLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AdminActionLog.
     * @param {AdminActionLogDeleteArgs} args - Arguments to delete one AdminActionLog.
     * @example
     * // Delete one AdminActionLog
     * const AdminActionLog = await prisma.adminActionLog.delete({
     *   where: {
     *     // ... filter to delete one AdminActionLog
     *   }
     * })
     * 
     */
    delete<T extends AdminActionLogDeleteArgs>(args: SelectSubset<T, AdminActionLogDeleteArgs<ExtArgs>>): Prisma__AdminActionLogClient<$Result.GetResult<Prisma.$AdminActionLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AdminActionLog.
     * @param {AdminActionLogUpdateArgs} args - Arguments to update one AdminActionLog.
     * @example
     * // Update one AdminActionLog
     * const adminActionLog = await prisma.adminActionLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AdminActionLogUpdateArgs>(args: SelectSubset<T, AdminActionLogUpdateArgs<ExtArgs>>): Prisma__AdminActionLogClient<$Result.GetResult<Prisma.$AdminActionLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AdminActionLogs.
     * @param {AdminActionLogDeleteManyArgs} args - Arguments to filter AdminActionLogs to delete.
     * @example
     * // Delete a few AdminActionLogs
     * const { count } = await prisma.adminActionLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AdminActionLogDeleteManyArgs>(args?: SelectSubset<T, AdminActionLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AdminActionLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminActionLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AdminActionLogs
     * const adminActionLog = await prisma.adminActionLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AdminActionLogUpdateManyArgs>(args: SelectSubset<T, AdminActionLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AdminActionLogs and returns the data updated in the database.
     * @param {AdminActionLogUpdateManyAndReturnArgs} args - Arguments to update many AdminActionLogs.
     * @example
     * // Update many AdminActionLogs
     * const adminActionLog = await prisma.adminActionLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AdminActionLogs and only return the `id`
     * const adminActionLogWithIdOnly = await prisma.adminActionLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AdminActionLogUpdateManyAndReturnArgs>(args: SelectSubset<T, AdminActionLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminActionLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AdminActionLog.
     * @param {AdminActionLogUpsertArgs} args - Arguments to update or create a AdminActionLog.
     * @example
     * // Update or create a AdminActionLog
     * const adminActionLog = await prisma.adminActionLog.upsert({
     *   create: {
     *     // ... data to create a AdminActionLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AdminActionLog we want to update
     *   }
     * })
     */
    upsert<T extends AdminActionLogUpsertArgs>(args: SelectSubset<T, AdminActionLogUpsertArgs<ExtArgs>>): Prisma__AdminActionLogClient<$Result.GetResult<Prisma.$AdminActionLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AdminActionLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminActionLogCountArgs} args - Arguments to filter AdminActionLogs to count.
     * @example
     * // Count the number of AdminActionLogs
     * const count = await prisma.adminActionLog.count({
     *   where: {
     *     // ... the filter for the AdminActionLogs we want to count
     *   }
     * })
    **/
    count<T extends AdminActionLogCountArgs>(
      args?: Subset<T, AdminActionLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminActionLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AdminActionLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminActionLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminActionLogAggregateArgs>(args: Subset<T, AdminActionLogAggregateArgs>): Prisma.PrismaPromise<GetAdminActionLogAggregateType<T>>

    /**
     * Group by AdminActionLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminActionLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminActionLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminActionLogGroupByArgs['orderBy'] }
        : { orderBy?: AdminActionLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminActionLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminActionLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AdminActionLog model
   */
  readonly fields: AdminActionLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AdminActionLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdminActionLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    admin<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    organizer<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AdminActionLog model
   */
  interface AdminActionLogFieldRefs {
    readonly id: FieldRef<"AdminActionLog", 'String'>
    readonly adminId: FieldRef<"AdminActionLog", 'String'>
    readonly organizerId: FieldRef<"AdminActionLog", 'String'>
    readonly action: FieldRef<"AdminActionLog", 'String'>
    readonly targetModel: FieldRef<"AdminActionLog", 'String'>
    readonly targetId: FieldRef<"AdminActionLog", 'String'>
    readonly reason: FieldRef<"AdminActionLog", 'String'>
    readonly timestamp: FieldRef<"AdminActionLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AdminActionLog findUnique
   */
  export type AdminActionLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminActionLog
     */
    select?: AdminActionLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminActionLog
     */
    omit?: AdminActionLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminActionLogInclude<ExtArgs> | null
    /**
     * Filter, which AdminActionLog to fetch.
     */
    where: AdminActionLogWhereUniqueInput
  }

  /**
   * AdminActionLog findUniqueOrThrow
   */
  export type AdminActionLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminActionLog
     */
    select?: AdminActionLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminActionLog
     */
    omit?: AdminActionLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminActionLogInclude<ExtArgs> | null
    /**
     * Filter, which AdminActionLog to fetch.
     */
    where: AdminActionLogWhereUniqueInput
  }

  /**
   * AdminActionLog findFirst
   */
  export type AdminActionLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminActionLog
     */
    select?: AdminActionLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminActionLog
     */
    omit?: AdminActionLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminActionLogInclude<ExtArgs> | null
    /**
     * Filter, which AdminActionLog to fetch.
     */
    where?: AdminActionLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminActionLogs to fetch.
     */
    orderBy?: AdminActionLogOrderByWithRelationInput | AdminActionLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AdminActionLogs.
     */
    cursor?: AdminActionLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminActionLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminActionLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AdminActionLogs.
     */
    distinct?: AdminActionLogScalarFieldEnum | AdminActionLogScalarFieldEnum[]
  }

  /**
   * AdminActionLog findFirstOrThrow
   */
  export type AdminActionLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminActionLog
     */
    select?: AdminActionLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminActionLog
     */
    omit?: AdminActionLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminActionLogInclude<ExtArgs> | null
    /**
     * Filter, which AdminActionLog to fetch.
     */
    where?: AdminActionLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminActionLogs to fetch.
     */
    orderBy?: AdminActionLogOrderByWithRelationInput | AdminActionLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AdminActionLogs.
     */
    cursor?: AdminActionLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminActionLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminActionLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AdminActionLogs.
     */
    distinct?: AdminActionLogScalarFieldEnum | AdminActionLogScalarFieldEnum[]
  }

  /**
   * AdminActionLog findMany
   */
  export type AdminActionLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminActionLog
     */
    select?: AdminActionLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminActionLog
     */
    omit?: AdminActionLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminActionLogInclude<ExtArgs> | null
    /**
     * Filter, which AdminActionLogs to fetch.
     */
    where?: AdminActionLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminActionLogs to fetch.
     */
    orderBy?: AdminActionLogOrderByWithRelationInput | AdminActionLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AdminActionLogs.
     */
    cursor?: AdminActionLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminActionLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminActionLogs.
     */
    skip?: number
    distinct?: AdminActionLogScalarFieldEnum | AdminActionLogScalarFieldEnum[]
  }

  /**
   * AdminActionLog create
   */
  export type AdminActionLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminActionLog
     */
    select?: AdminActionLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminActionLog
     */
    omit?: AdminActionLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminActionLogInclude<ExtArgs> | null
    /**
     * The data needed to create a AdminActionLog.
     */
    data: XOR<AdminActionLogCreateInput, AdminActionLogUncheckedCreateInput>
  }

  /**
   * AdminActionLog createMany
   */
  export type AdminActionLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AdminActionLogs.
     */
    data: AdminActionLogCreateManyInput | AdminActionLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AdminActionLog createManyAndReturn
   */
  export type AdminActionLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminActionLog
     */
    select?: AdminActionLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AdminActionLog
     */
    omit?: AdminActionLogOmit<ExtArgs> | null
    /**
     * The data used to create many AdminActionLogs.
     */
    data: AdminActionLogCreateManyInput | AdminActionLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminActionLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AdminActionLog update
   */
  export type AdminActionLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminActionLog
     */
    select?: AdminActionLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminActionLog
     */
    omit?: AdminActionLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminActionLogInclude<ExtArgs> | null
    /**
     * The data needed to update a AdminActionLog.
     */
    data: XOR<AdminActionLogUpdateInput, AdminActionLogUncheckedUpdateInput>
    /**
     * Choose, which AdminActionLog to update.
     */
    where: AdminActionLogWhereUniqueInput
  }

  /**
   * AdminActionLog updateMany
   */
  export type AdminActionLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AdminActionLogs.
     */
    data: XOR<AdminActionLogUpdateManyMutationInput, AdminActionLogUncheckedUpdateManyInput>
    /**
     * Filter which AdminActionLogs to update
     */
    where?: AdminActionLogWhereInput
    /**
     * Limit how many AdminActionLogs to update.
     */
    limit?: number
  }

  /**
   * AdminActionLog updateManyAndReturn
   */
  export type AdminActionLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminActionLog
     */
    select?: AdminActionLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AdminActionLog
     */
    omit?: AdminActionLogOmit<ExtArgs> | null
    /**
     * The data used to update AdminActionLogs.
     */
    data: XOR<AdminActionLogUpdateManyMutationInput, AdminActionLogUncheckedUpdateManyInput>
    /**
     * Filter which AdminActionLogs to update
     */
    where?: AdminActionLogWhereInput
    /**
     * Limit how many AdminActionLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminActionLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AdminActionLog upsert
   */
  export type AdminActionLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminActionLog
     */
    select?: AdminActionLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminActionLog
     */
    omit?: AdminActionLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminActionLogInclude<ExtArgs> | null
    /**
     * The filter to search for the AdminActionLog to update in case it exists.
     */
    where: AdminActionLogWhereUniqueInput
    /**
     * In case the AdminActionLog found by the `where` argument doesn't exist, create a new AdminActionLog with this data.
     */
    create: XOR<AdminActionLogCreateInput, AdminActionLogUncheckedCreateInput>
    /**
     * In case the AdminActionLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminActionLogUpdateInput, AdminActionLogUncheckedUpdateInput>
  }

  /**
   * AdminActionLog delete
   */
  export type AdminActionLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminActionLog
     */
    select?: AdminActionLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminActionLog
     */
    omit?: AdminActionLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminActionLogInclude<ExtArgs> | null
    /**
     * Filter which AdminActionLog to delete.
     */
    where: AdminActionLogWhereUniqueInput
  }

  /**
   * AdminActionLog deleteMany
   */
  export type AdminActionLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AdminActionLogs to delete
     */
    where?: AdminActionLogWhereInput
    /**
     * Limit how many AdminActionLogs to delete.
     */
    limit?: number
  }

  /**
   * AdminActionLog without action
   */
  export type AdminActionLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminActionLog
     */
    select?: AdminActionLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminActionLog
     */
    omit?: AdminActionLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminActionLogInclude<ExtArgs> | null
  }


  /**
   * Model UserProfile
   */

  export type AggregateUserProfile = {
    _count: UserProfileCountAggregateOutputType | null
    _min: UserProfileMinAggregateOutputType | null
    _max: UserProfileMaxAggregateOutputType | null
  }

  export type UserProfileMinAggregateOutputType = {
    id: string | null
    userId: string | null
    fullName: string | null
    bio: string | null
    institution: string | null
    photoUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserProfileMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    fullName: string | null
    bio: string | null
    institution: string | null
    photoUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserProfileCountAggregateOutputType = {
    id: number
    userId: number
    fullName: number
    bio: number
    institution: number
    photoUrl: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserProfileMinAggregateInputType = {
    id?: true
    userId?: true
    fullName?: true
    bio?: true
    institution?: true
    photoUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserProfileMaxAggregateInputType = {
    id?: true
    userId?: true
    fullName?: true
    bio?: true
    institution?: true
    photoUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserProfileCountAggregateInputType = {
    id?: true
    userId?: true
    fullName?: true
    bio?: true
    institution?: true
    photoUrl?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserProfile to aggregate.
     */
    where?: UserProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfiles to fetch.
     */
    orderBy?: UserProfileOrderByWithRelationInput | UserProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserProfiles
    **/
    _count?: true | UserProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserProfileMaxAggregateInputType
  }

  export type GetUserProfileAggregateType<T extends UserProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateUserProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserProfile[P]>
      : GetScalarType<T[P], AggregateUserProfile[P]>
  }




  export type UserProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserProfileWhereInput
    orderBy?: UserProfileOrderByWithAggregationInput | UserProfileOrderByWithAggregationInput[]
    by: UserProfileScalarFieldEnum[] | UserProfileScalarFieldEnum
    having?: UserProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserProfileCountAggregateInputType | true
    _min?: UserProfileMinAggregateInputType
    _max?: UserProfileMaxAggregateInputType
  }

  export type UserProfileGroupByOutputType = {
    id: string
    userId: string
    fullName: string
    bio: string | null
    institution: string | null
    photoUrl: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserProfileCountAggregateOutputType | null
    _min: UserProfileMinAggregateOutputType | null
    _max: UserProfileMaxAggregateOutputType | null
  }

  type GetUserProfileGroupByPayload<T extends UserProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserProfileGroupByOutputType[P]>
            : GetScalarType<T[P], UserProfileGroupByOutputType[P]>
        }
      >
    >


  export type UserProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    fullName?: boolean
    bio?: boolean
    institution?: boolean
    photoUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userProfile"]>

  export type UserProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    fullName?: boolean
    bio?: boolean
    institution?: boolean
    photoUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userProfile"]>

  export type UserProfileSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    fullName?: boolean
    bio?: boolean
    institution?: boolean
    photoUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userProfile"]>

  export type UserProfileSelectScalar = {
    id?: boolean
    userId?: boolean
    fullName?: boolean
    bio?: boolean
    institution?: boolean
    photoUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserProfileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "fullName" | "bio" | "institution" | "photoUrl" | "createdAt" | "updatedAt", ExtArgs["result"]["userProfile"]>
  export type UserProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserProfileIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserProfile"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      fullName: string
      bio: string | null
      institution: string | null
      photoUrl: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userProfile"]>
    composites: {}
  }

  type UserProfileGetPayload<S extends boolean | null | undefined | UserProfileDefaultArgs> = $Result.GetResult<Prisma.$UserProfilePayload, S>

  type UserProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserProfileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserProfileCountAggregateInputType | true
    }

  export interface UserProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserProfile'], meta: { name: 'UserProfile' } }
    /**
     * Find zero or one UserProfile that matches the filter.
     * @param {UserProfileFindUniqueArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserProfileFindUniqueArgs>(args: SelectSubset<T, UserProfileFindUniqueArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserProfile that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserProfileFindUniqueOrThrowArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, UserProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileFindFirstArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserProfileFindFirstArgs>(args?: SelectSubset<T, UserProfileFindFirstArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserProfile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileFindFirstOrThrowArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, UserProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserProfiles
     * const userProfiles = await prisma.userProfile.findMany()
     * 
     * // Get first 10 UserProfiles
     * const userProfiles = await prisma.userProfile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userProfileWithIdOnly = await prisma.userProfile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserProfileFindManyArgs>(args?: SelectSubset<T, UserProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserProfile.
     * @param {UserProfileCreateArgs} args - Arguments to create a UserProfile.
     * @example
     * // Create one UserProfile
     * const UserProfile = await prisma.userProfile.create({
     *   data: {
     *     // ... data to create a UserProfile
     *   }
     * })
     * 
     */
    create<T extends UserProfileCreateArgs>(args: SelectSubset<T, UserProfileCreateArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserProfiles.
     * @param {UserProfileCreateManyArgs} args - Arguments to create many UserProfiles.
     * @example
     * // Create many UserProfiles
     * const userProfile = await prisma.userProfile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserProfileCreateManyArgs>(args?: SelectSubset<T, UserProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserProfiles and returns the data saved in the database.
     * @param {UserProfileCreateManyAndReturnArgs} args - Arguments to create many UserProfiles.
     * @example
     * // Create many UserProfiles
     * const userProfile = await prisma.userProfile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserProfiles and only return the `id`
     * const userProfileWithIdOnly = await prisma.userProfile.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, UserProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserProfile.
     * @param {UserProfileDeleteArgs} args - Arguments to delete one UserProfile.
     * @example
     * // Delete one UserProfile
     * const UserProfile = await prisma.userProfile.delete({
     *   where: {
     *     // ... filter to delete one UserProfile
     *   }
     * })
     * 
     */
    delete<T extends UserProfileDeleteArgs>(args: SelectSubset<T, UserProfileDeleteArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserProfile.
     * @param {UserProfileUpdateArgs} args - Arguments to update one UserProfile.
     * @example
     * // Update one UserProfile
     * const userProfile = await prisma.userProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserProfileUpdateArgs>(args: SelectSubset<T, UserProfileUpdateArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserProfiles.
     * @param {UserProfileDeleteManyArgs} args - Arguments to filter UserProfiles to delete.
     * @example
     * // Delete a few UserProfiles
     * const { count } = await prisma.userProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserProfileDeleteManyArgs>(args?: SelectSubset<T, UserProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserProfiles
     * const userProfile = await prisma.userProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserProfileUpdateManyArgs>(args: SelectSubset<T, UserProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserProfiles and returns the data updated in the database.
     * @param {UserProfileUpdateManyAndReturnArgs} args - Arguments to update many UserProfiles.
     * @example
     * // Update many UserProfiles
     * const userProfile = await prisma.userProfile.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserProfiles and only return the `id`
     * const userProfileWithIdOnly = await prisma.userProfile.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserProfileUpdateManyAndReturnArgs>(args: SelectSubset<T, UserProfileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserProfile.
     * @param {UserProfileUpsertArgs} args - Arguments to update or create a UserProfile.
     * @example
     * // Update or create a UserProfile
     * const userProfile = await prisma.userProfile.upsert({
     *   create: {
     *     // ... data to create a UserProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserProfile we want to update
     *   }
     * })
     */
    upsert<T extends UserProfileUpsertArgs>(args: SelectSubset<T, UserProfileUpsertArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileCountArgs} args - Arguments to filter UserProfiles to count.
     * @example
     * // Count the number of UserProfiles
     * const count = await prisma.userProfile.count({
     *   where: {
     *     // ... the filter for the UserProfiles we want to count
     *   }
     * })
    **/
    count<T extends UserProfileCountArgs>(
      args?: Subset<T, UserProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserProfileAggregateArgs>(args: Subset<T, UserProfileAggregateArgs>): Prisma.PrismaPromise<GetUserProfileAggregateType<T>>

    /**
     * Group by UserProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserProfileGroupByArgs['orderBy'] }
        : { orderBy?: UserProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserProfile model
   */
  readonly fields: UserProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserProfile model
   */
  interface UserProfileFieldRefs {
    readonly id: FieldRef<"UserProfile", 'String'>
    readonly userId: FieldRef<"UserProfile", 'String'>
    readonly fullName: FieldRef<"UserProfile", 'String'>
    readonly bio: FieldRef<"UserProfile", 'String'>
    readonly institution: FieldRef<"UserProfile", 'String'>
    readonly photoUrl: FieldRef<"UserProfile", 'String'>
    readonly createdAt: FieldRef<"UserProfile", 'DateTime'>
    readonly updatedAt: FieldRef<"UserProfile", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserProfile findUnique
   */
  export type UserProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserProfile to fetch.
     */
    where: UserProfileWhereUniqueInput
  }

  /**
   * UserProfile findUniqueOrThrow
   */
  export type UserProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserProfile to fetch.
     */
    where: UserProfileWhereUniqueInput
  }

  /**
   * UserProfile findFirst
   */
  export type UserProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserProfile to fetch.
     */
    where?: UserProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfiles to fetch.
     */
    orderBy?: UserProfileOrderByWithRelationInput | UserProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserProfiles.
     */
    cursor?: UserProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserProfiles.
     */
    distinct?: UserProfileScalarFieldEnum | UserProfileScalarFieldEnum[]
  }

  /**
   * UserProfile findFirstOrThrow
   */
  export type UserProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserProfile to fetch.
     */
    where?: UserProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfiles to fetch.
     */
    orderBy?: UserProfileOrderByWithRelationInput | UserProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserProfiles.
     */
    cursor?: UserProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserProfiles.
     */
    distinct?: UserProfileScalarFieldEnum | UserProfileScalarFieldEnum[]
  }

  /**
   * UserProfile findMany
   */
  export type UserProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserProfiles to fetch.
     */
    where?: UserProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfiles to fetch.
     */
    orderBy?: UserProfileOrderByWithRelationInput | UserProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserProfiles.
     */
    cursor?: UserProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfiles.
     */
    skip?: number
    distinct?: UserProfileScalarFieldEnum | UserProfileScalarFieldEnum[]
  }

  /**
   * UserProfile create
   */
  export type UserProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a UserProfile.
     */
    data: XOR<UserProfileCreateInput, UserProfileUncheckedCreateInput>
  }

  /**
   * UserProfile createMany
   */
  export type UserProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserProfiles.
     */
    data: UserProfileCreateManyInput | UserProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserProfile createManyAndReturn
   */
  export type UserProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null
    /**
     * The data used to create many UserProfiles.
     */
    data: UserProfileCreateManyInput | UserProfileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserProfile update
   */
  export type UserProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a UserProfile.
     */
    data: XOR<UserProfileUpdateInput, UserProfileUncheckedUpdateInput>
    /**
     * Choose, which UserProfile to update.
     */
    where: UserProfileWhereUniqueInput
  }

  /**
   * UserProfile updateMany
   */
  export type UserProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserProfiles.
     */
    data: XOR<UserProfileUpdateManyMutationInput, UserProfileUncheckedUpdateManyInput>
    /**
     * Filter which UserProfiles to update
     */
    where?: UserProfileWhereInput
    /**
     * Limit how many UserProfiles to update.
     */
    limit?: number
  }

  /**
   * UserProfile updateManyAndReturn
   */
  export type UserProfileUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null
    /**
     * The data used to update UserProfiles.
     */
    data: XOR<UserProfileUpdateManyMutationInput, UserProfileUncheckedUpdateManyInput>
    /**
     * Filter which UserProfiles to update
     */
    where?: UserProfileWhereInput
    /**
     * Limit how many UserProfiles to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserProfile upsert
   */
  export type UserProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the UserProfile to update in case it exists.
     */
    where: UserProfileWhereUniqueInput
    /**
     * In case the UserProfile found by the `where` argument doesn't exist, create a new UserProfile with this data.
     */
    create: XOR<UserProfileCreateInput, UserProfileUncheckedCreateInput>
    /**
     * In case the UserProfile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserProfileUpdateInput, UserProfileUncheckedUpdateInput>
  }

  /**
   * UserProfile delete
   */
  export type UserProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * Filter which UserProfile to delete.
     */
    where: UserProfileWhereUniqueInput
  }

  /**
   * UserProfile deleteMany
   */
  export type UserProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserProfiles to delete
     */
    where?: UserProfileWhereInput
    /**
     * Limit how many UserProfiles to delete.
     */
    limit?: number
  }

  /**
   * UserProfile without action
   */
  export type UserProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
  }


  /**
   * Model ConferenceRegistration
   */

  export type AggregateConferenceRegistration = {
    _count: ConferenceRegistrationCountAggregateOutputType | null
    _min: ConferenceRegistrationMinAggregateOutputType | null
    _max: ConferenceRegistrationMaxAggregateOutputType | null
  }

  export type ConferenceRegistrationMinAggregateOutputType = {
    id: string | null
    userId: string | null
    eventId: string | null
    registeredAt: Date | null
  }

  export type ConferenceRegistrationMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    eventId: string | null
    registeredAt: Date | null
  }

  export type ConferenceRegistrationCountAggregateOutputType = {
    id: number
    userId: number
    eventId: number
    registeredAt: number
    _all: number
  }


  export type ConferenceRegistrationMinAggregateInputType = {
    id?: true
    userId?: true
    eventId?: true
    registeredAt?: true
  }

  export type ConferenceRegistrationMaxAggregateInputType = {
    id?: true
    userId?: true
    eventId?: true
    registeredAt?: true
  }

  export type ConferenceRegistrationCountAggregateInputType = {
    id?: true
    userId?: true
    eventId?: true
    registeredAt?: true
    _all?: true
  }

  export type ConferenceRegistrationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ConferenceRegistration to aggregate.
     */
    where?: ConferenceRegistrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConferenceRegistrations to fetch.
     */
    orderBy?: ConferenceRegistrationOrderByWithRelationInput | ConferenceRegistrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConferenceRegistrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConferenceRegistrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConferenceRegistrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ConferenceRegistrations
    **/
    _count?: true | ConferenceRegistrationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConferenceRegistrationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConferenceRegistrationMaxAggregateInputType
  }

  export type GetConferenceRegistrationAggregateType<T extends ConferenceRegistrationAggregateArgs> = {
        [P in keyof T & keyof AggregateConferenceRegistration]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConferenceRegistration[P]>
      : GetScalarType<T[P], AggregateConferenceRegistration[P]>
  }




  export type ConferenceRegistrationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConferenceRegistrationWhereInput
    orderBy?: ConferenceRegistrationOrderByWithAggregationInput | ConferenceRegistrationOrderByWithAggregationInput[]
    by: ConferenceRegistrationScalarFieldEnum[] | ConferenceRegistrationScalarFieldEnum
    having?: ConferenceRegistrationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConferenceRegistrationCountAggregateInputType | true
    _min?: ConferenceRegistrationMinAggregateInputType
    _max?: ConferenceRegistrationMaxAggregateInputType
  }

  export type ConferenceRegistrationGroupByOutputType = {
    id: string
    userId: string
    eventId: string
    registeredAt: Date
    _count: ConferenceRegistrationCountAggregateOutputType | null
    _min: ConferenceRegistrationMinAggregateOutputType | null
    _max: ConferenceRegistrationMaxAggregateOutputType | null
  }

  type GetConferenceRegistrationGroupByPayload<T extends ConferenceRegistrationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConferenceRegistrationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConferenceRegistrationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConferenceRegistrationGroupByOutputType[P]>
            : GetScalarType<T[P], ConferenceRegistrationGroupByOutputType[P]>
        }
      >
    >


  export type ConferenceRegistrationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    eventId?: boolean
    registeredAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["conferenceRegistration"]>

  export type ConferenceRegistrationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    eventId?: boolean
    registeredAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["conferenceRegistration"]>

  export type ConferenceRegistrationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    eventId?: boolean
    registeredAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["conferenceRegistration"]>

  export type ConferenceRegistrationSelectScalar = {
    id?: boolean
    userId?: boolean
    eventId?: boolean
    registeredAt?: boolean
  }

  export type ConferenceRegistrationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "eventId" | "registeredAt", ExtArgs["result"]["conferenceRegistration"]>
  export type ConferenceRegistrationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
  }
  export type ConferenceRegistrationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
  }
  export type ConferenceRegistrationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
  }

  export type $ConferenceRegistrationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ConferenceRegistration"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      event: Prisma.$EventPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      eventId: string
      registeredAt: Date
    }, ExtArgs["result"]["conferenceRegistration"]>
    composites: {}
  }

  type ConferenceRegistrationGetPayload<S extends boolean | null | undefined | ConferenceRegistrationDefaultArgs> = $Result.GetResult<Prisma.$ConferenceRegistrationPayload, S>

  type ConferenceRegistrationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ConferenceRegistrationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ConferenceRegistrationCountAggregateInputType | true
    }

  export interface ConferenceRegistrationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ConferenceRegistration'], meta: { name: 'ConferenceRegistration' } }
    /**
     * Find zero or one ConferenceRegistration that matches the filter.
     * @param {ConferenceRegistrationFindUniqueArgs} args - Arguments to find a ConferenceRegistration
     * @example
     * // Get one ConferenceRegistration
     * const conferenceRegistration = await prisma.conferenceRegistration.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ConferenceRegistrationFindUniqueArgs>(args: SelectSubset<T, ConferenceRegistrationFindUniqueArgs<ExtArgs>>): Prisma__ConferenceRegistrationClient<$Result.GetResult<Prisma.$ConferenceRegistrationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ConferenceRegistration that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ConferenceRegistrationFindUniqueOrThrowArgs} args - Arguments to find a ConferenceRegistration
     * @example
     * // Get one ConferenceRegistration
     * const conferenceRegistration = await prisma.conferenceRegistration.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ConferenceRegistrationFindUniqueOrThrowArgs>(args: SelectSubset<T, ConferenceRegistrationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ConferenceRegistrationClient<$Result.GetResult<Prisma.$ConferenceRegistrationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ConferenceRegistration that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConferenceRegistrationFindFirstArgs} args - Arguments to find a ConferenceRegistration
     * @example
     * // Get one ConferenceRegistration
     * const conferenceRegistration = await prisma.conferenceRegistration.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ConferenceRegistrationFindFirstArgs>(args?: SelectSubset<T, ConferenceRegistrationFindFirstArgs<ExtArgs>>): Prisma__ConferenceRegistrationClient<$Result.GetResult<Prisma.$ConferenceRegistrationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ConferenceRegistration that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConferenceRegistrationFindFirstOrThrowArgs} args - Arguments to find a ConferenceRegistration
     * @example
     * // Get one ConferenceRegistration
     * const conferenceRegistration = await prisma.conferenceRegistration.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ConferenceRegistrationFindFirstOrThrowArgs>(args?: SelectSubset<T, ConferenceRegistrationFindFirstOrThrowArgs<ExtArgs>>): Prisma__ConferenceRegistrationClient<$Result.GetResult<Prisma.$ConferenceRegistrationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ConferenceRegistrations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConferenceRegistrationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ConferenceRegistrations
     * const conferenceRegistrations = await prisma.conferenceRegistration.findMany()
     * 
     * // Get first 10 ConferenceRegistrations
     * const conferenceRegistrations = await prisma.conferenceRegistration.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const conferenceRegistrationWithIdOnly = await prisma.conferenceRegistration.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ConferenceRegistrationFindManyArgs>(args?: SelectSubset<T, ConferenceRegistrationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConferenceRegistrationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ConferenceRegistration.
     * @param {ConferenceRegistrationCreateArgs} args - Arguments to create a ConferenceRegistration.
     * @example
     * // Create one ConferenceRegistration
     * const ConferenceRegistration = await prisma.conferenceRegistration.create({
     *   data: {
     *     // ... data to create a ConferenceRegistration
     *   }
     * })
     * 
     */
    create<T extends ConferenceRegistrationCreateArgs>(args: SelectSubset<T, ConferenceRegistrationCreateArgs<ExtArgs>>): Prisma__ConferenceRegistrationClient<$Result.GetResult<Prisma.$ConferenceRegistrationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ConferenceRegistrations.
     * @param {ConferenceRegistrationCreateManyArgs} args - Arguments to create many ConferenceRegistrations.
     * @example
     * // Create many ConferenceRegistrations
     * const conferenceRegistration = await prisma.conferenceRegistration.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ConferenceRegistrationCreateManyArgs>(args?: SelectSubset<T, ConferenceRegistrationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ConferenceRegistrations and returns the data saved in the database.
     * @param {ConferenceRegistrationCreateManyAndReturnArgs} args - Arguments to create many ConferenceRegistrations.
     * @example
     * // Create many ConferenceRegistrations
     * const conferenceRegistration = await prisma.conferenceRegistration.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ConferenceRegistrations and only return the `id`
     * const conferenceRegistrationWithIdOnly = await prisma.conferenceRegistration.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ConferenceRegistrationCreateManyAndReturnArgs>(args?: SelectSubset<T, ConferenceRegistrationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConferenceRegistrationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ConferenceRegistration.
     * @param {ConferenceRegistrationDeleteArgs} args - Arguments to delete one ConferenceRegistration.
     * @example
     * // Delete one ConferenceRegistration
     * const ConferenceRegistration = await prisma.conferenceRegistration.delete({
     *   where: {
     *     // ... filter to delete one ConferenceRegistration
     *   }
     * })
     * 
     */
    delete<T extends ConferenceRegistrationDeleteArgs>(args: SelectSubset<T, ConferenceRegistrationDeleteArgs<ExtArgs>>): Prisma__ConferenceRegistrationClient<$Result.GetResult<Prisma.$ConferenceRegistrationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ConferenceRegistration.
     * @param {ConferenceRegistrationUpdateArgs} args - Arguments to update one ConferenceRegistration.
     * @example
     * // Update one ConferenceRegistration
     * const conferenceRegistration = await prisma.conferenceRegistration.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ConferenceRegistrationUpdateArgs>(args: SelectSubset<T, ConferenceRegistrationUpdateArgs<ExtArgs>>): Prisma__ConferenceRegistrationClient<$Result.GetResult<Prisma.$ConferenceRegistrationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ConferenceRegistrations.
     * @param {ConferenceRegistrationDeleteManyArgs} args - Arguments to filter ConferenceRegistrations to delete.
     * @example
     * // Delete a few ConferenceRegistrations
     * const { count } = await prisma.conferenceRegistration.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ConferenceRegistrationDeleteManyArgs>(args?: SelectSubset<T, ConferenceRegistrationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ConferenceRegistrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConferenceRegistrationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ConferenceRegistrations
     * const conferenceRegistration = await prisma.conferenceRegistration.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ConferenceRegistrationUpdateManyArgs>(args: SelectSubset<T, ConferenceRegistrationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ConferenceRegistrations and returns the data updated in the database.
     * @param {ConferenceRegistrationUpdateManyAndReturnArgs} args - Arguments to update many ConferenceRegistrations.
     * @example
     * // Update many ConferenceRegistrations
     * const conferenceRegistration = await prisma.conferenceRegistration.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ConferenceRegistrations and only return the `id`
     * const conferenceRegistrationWithIdOnly = await prisma.conferenceRegistration.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ConferenceRegistrationUpdateManyAndReturnArgs>(args: SelectSubset<T, ConferenceRegistrationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConferenceRegistrationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ConferenceRegistration.
     * @param {ConferenceRegistrationUpsertArgs} args - Arguments to update or create a ConferenceRegistration.
     * @example
     * // Update or create a ConferenceRegistration
     * const conferenceRegistration = await prisma.conferenceRegistration.upsert({
     *   create: {
     *     // ... data to create a ConferenceRegistration
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ConferenceRegistration we want to update
     *   }
     * })
     */
    upsert<T extends ConferenceRegistrationUpsertArgs>(args: SelectSubset<T, ConferenceRegistrationUpsertArgs<ExtArgs>>): Prisma__ConferenceRegistrationClient<$Result.GetResult<Prisma.$ConferenceRegistrationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ConferenceRegistrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConferenceRegistrationCountArgs} args - Arguments to filter ConferenceRegistrations to count.
     * @example
     * // Count the number of ConferenceRegistrations
     * const count = await prisma.conferenceRegistration.count({
     *   where: {
     *     // ... the filter for the ConferenceRegistrations we want to count
     *   }
     * })
    **/
    count<T extends ConferenceRegistrationCountArgs>(
      args?: Subset<T, ConferenceRegistrationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConferenceRegistrationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ConferenceRegistration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConferenceRegistrationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConferenceRegistrationAggregateArgs>(args: Subset<T, ConferenceRegistrationAggregateArgs>): Prisma.PrismaPromise<GetConferenceRegistrationAggregateType<T>>

    /**
     * Group by ConferenceRegistration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConferenceRegistrationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConferenceRegistrationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConferenceRegistrationGroupByArgs['orderBy'] }
        : { orderBy?: ConferenceRegistrationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConferenceRegistrationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConferenceRegistrationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ConferenceRegistration model
   */
  readonly fields: ConferenceRegistrationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ConferenceRegistration.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ConferenceRegistrationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    event<T extends EventDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventDefaultArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ConferenceRegistration model
   */
  interface ConferenceRegistrationFieldRefs {
    readonly id: FieldRef<"ConferenceRegistration", 'String'>
    readonly userId: FieldRef<"ConferenceRegistration", 'String'>
    readonly eventId: FieldRef<"ConferenceRegistration", 'String'>
    readonly registeredAt: FieldRef<"ConferenceRegistration", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ConferenceRegistration findUnique
   */
  export type ConferenceRegistrationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConferenceRegistration
     */
    select?: ConferenceRegistrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConferenceRegistration
     */
    omit?: ConferenceRegistrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConferenceRegistrationInclude<ExtArgs> | null
    /**
     * Filter, which ConferenceRegistration to fetch.
     */
    where: ConferenceRegistrationWhereUniqueInput
  }

  /**
   * ConferenceRegistration findUniqueOrThrow
   */
  export type ConferenceRegistrationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConferenceRegistration
     */
    select?: ConferenceRegistrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConferenceRegistration
     */
    omit?: ConferenceRegistrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConferenceRegistrationInclude<ExtArgs> | null
    /**
     * Filter, which ConferenceRegistration to fetch.
     */
    where: ConferenceRegistrationWhereUniqueInput
  }

  /**
   * ConferenceRegistration findFirst
   */
  export type ConferenceRegistrationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConferenceRegistration
     */
    select?: ConferenceRegistrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConferenceRegistration
     */
    omit?: ConferenceRegistrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConferenceRegistrationInclude<ExtArgs> | null
    /**
     * Filter, which ConferenceRegistration to fetch.
     */
    where?: ConferenceRegistrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConferenceRegistrations to fetch.
     */
    orderBy?: ConferenceRegistrationOrderByWithRelationInput | ConferenceRegistrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ConferenceRegistrations.
     */
    cursor?: ConferenceRegistrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConferenceRegistrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConferenceRegistrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ConferenceRegistrations.
     */
    distinct?: ConferenceRegistrationScalarFieldEnum | ConferenceRegistrationScalarFieldEnum[]
  }

  /**
   * ConferenceRegistration findFirstOrThrow
   */
  export type ConferenceRegistrationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConferenceRegistration
     */
    select?: ConferenceRegistrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConferenceRegistration
     */
    omit?: ConferenceRegistrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConferenceRegistrationInclude<ExtArgs> | null
    /**
     * Filter, which ConferenceRegistration to fetch.
     */
    where?: ConferenceRegistrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConferenceRegistrations to fetch.
     */
    orderBy?: ConferenceRegistrationOrderByWithRelationInput | ConferenceRegistrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ConferenceRegistrations.
     */
    cursor?: ConferenceRegistrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConferenceRegistrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConferenceRegistrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ConferenceRegistrations.
     */
    distinct?: ConferenceRegistrationScalarFieldEnum | ConferenceRegistrationScalarFieldEnum[]
  }

  /**
   * ConferenceRegistration findMany
   */
  export type ConferenceRegistrationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConferenceRegistration
     */
    select?: ConferenceRegistrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConferenceRegistration
     */
    omit?: ConferenceRegistrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConferenceRegistrationInclude<ExtArgs> | null
    /**
     * Filter, which ConferenceRegistrations to fetch.
     */
    where?: ConferenceRegistrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConferenceRegistrations to fetch.
     */
    orderBy?: ConferenceRegistrationOrderByWithRelationInput | ConferenceRegistrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ConferenceRegistrations.
     */
    cursor?: ConferenceRegistrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConferenceRegistrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConferenceRegistrations.
     */
    skip?: number
    distinct?: ConferenceRegistrationScalarFieldEnum | ConferenceRegistrationScalarFieldEnum[]
  }

  /**
   * ConferenceRegistration create
   */
  export type ConferenceRegistrationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConferenceRegistration
     */
    select?: ConferenceRegistrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConferenceRegistration
     */
    omit?: ConferenceRegistrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConferenceRegistrationInclude<ExtArgs> | null
    /**
     * The data needed to create a ConferenceRegistration.
     */
    data: XOR<ConferenceRegistrationCreateInput, ConferenceRegistrationUncheckedCreateInput>
  }

  /**
   * ConferenceRegistration createMany
   */
  export type ConferenceRegistrationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ConferenceRegistrations.
     */
    data: ConferenceRegistrationCreateManyInput | ConferenceRegistrationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ConferenceRegistration createManyAndReturn
   */
  export type ConferenceRegistrationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConferenceRegistration
     */
    select?: ConferenceRegistrationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ConferenceRegistration
     */
    omit?: ConferenceRegistrationOmit<ExtArgs> | null
    /**
     * The data used to create many ConferenceRegistrations.
     */
    data: ConferenceRegistrationCreateManyInput | ConferenceRegistrationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConferenceRegistrationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ConferenceRegistration update
   */
  export type ConferenceRegistrationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConferenceRegistration
     */
    select?: ConferenceRegistrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConferenceRegistration
     */
    omit?: ConferenceRegistrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConferenceRegistrationInclude<ExtArgs> | null
    /**
     * The data needed to update a ConferenceRegistration.
     */
    data: XOR<ConferenceRegistrationUpdateInput, ConferenceRegistrationUncheckedUpdateInput>
    /**
     * Choose, which ConferenceRegistration to update.
     */
    where: ConferenceRegistrationWhereUniqueInput
  }

  /**
   * ConferenceRegistration updateMany
   */
  export type ConferenceRegistrationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ConferenceRegistrations.
     */
    data: XOR<ConferenceRegistrationUpdateManyMutationInput, ConferenceRegistrationUncheckedUpdateManyInput>
    /**
     * Filter which ConferenceRegistrations to update
     */
    where?: ConferenceRegistrationWhereInput
    /**
     * Limit how many ConferenceRegistrations to update.
     */
    limit?: number
  }

  /**
   * ConferenceRegistration updateManyAndReturn
   */
  export type ConferenceRegistrationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConferenceRegistration
     */
    select?: ConferenceRegistrationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ConferenceRegistration
     */
    omit?: ConferenceRegistrationOmit<ExtArgs> | null
    /**
     * The data used to update ConferenceRegistrations.
     */
    data: XOR<ConferenceRegistrationUpdateManyMutationInput, ConferenceRegistrationUncheckedUpdateManyInput>
    /**
     * Filter which ConferenceRegistrations to update
     */
    where?: ConferenceRegistrationWhereInput
    /**
     * Limit how many ConferenceRegistrations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConferenceRegistrationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ConferenceRegistration upsert
   */
  export type ConferenceRegistrationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConferenceRegistration
     */
    select?: ConferenceRegistrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConferenceRegistration
     */
    omit?: ConferenceRegistrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConferenceRegistrationInclude<ExtArgs> | null
    /**
     * The filter to search for the ConferenceRegistration to update in case it exists.
     */
    where: ConferenceRegistrationWhereUniqueInput
    /**
     * In case the ConferenceRegistration found by the `where` argument doesn't exist, create a new ConferenceRegistration with this data.
     */
    create: XOR<ConferenceRegistrationCreateInput, ConferenceRegistrationUncheckedCreateInput>
    /**
     * In case the ConferenceRegistration was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConferenceRegistrationUpdateInput, ConferenceRegistrationUncheckedUpdateInput>
  }

  /**
   * ConferenceRegistration delete
   */
  export type ConferenceRegistrationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConferenceRegistration
     */
    select?: ConferenceRegistrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConferenceRegistration
     */
    omit?: ConferenceRegistrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConferenceRegistrationInclude<ExtArgs> | null
    /**
     * Filter which ConferenceRegistration to delete.
     */
    where: ConferenceRegistrationWhereUniqueInput
  }

  /**
   * ConferenceRegistration deleteMany
   */
  export type ConferenceRegistrationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ConferenceRegistrations to delete
     */
    where?: ConferenceRegistrationWhereInput
    /**
     * Limit how many ConferenceRegistrations to delete.
     */
    limit?: number
  }

  /**
   * ConferenceRegistration without action
   */
  export type ConferenceRegistrationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConferenceRegistration
     */
    select?: ConferenceRegistrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConferenceRegistration
     */
    omit?: ConferenceRegistrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConferenceRegistrationInclude<ExtArgs> | null
  }


  /**
   * Model PresentationMetrics
   */

  export type AggregatePresentationMetrics = {
    _count: PresentationMetricsCountAggregateOutputType | null
    _avg: PresentationMetricsAvgAggregateOutputType | null
    _sum: PresentationMetricsSumAggregateOutputType | null
    _min: PresentationMetricsMinAggregateOutputType | null
    _max: PresentationMetricsMaxAggregateOutputType | null
  }

  export type PresentationMetricsAvgAggregateOutputType = {
    viewCount: number | null
  }

  export type PresentationMetricsSumAggregateOutputType = {
    viewCount: number | null
  }

  export type PresentationMetricsMinAggregateOutputType = {
    id: string | null
    presentationId: string | null
    viewCount: number | null
    lastViewedAt: Date | null
    updatedAt: Date | null
  }

  export type PresentationMetricsMaxAggregateOutputType = {
    id: string | null
    presentationId: string | null
    viewCount: number | null
    lastViewedAt: Date | null
    updatedAt: Date | null
  }

  export type PresentationMetricsCountAggregateOutputType = {
    id: number
    presentationId: number
    viewCount: number
    lastViewedAt: number
    updatedAt: number
    _all: number
  }


  export type PresentationMetricsAvgAggregateInputType = {
    viewCount?: true
  }

  export type PresentationMetricsSumAggregateInputType = {
    viewCount?: true
  }

  export type PresentationMetricsMinAggregateInputType = {
    id?: true
    presentationId?: true
    viewCount?: true
    lastViewedAt?: true
    updatedAt?: true
  }

  export type PresentationMetricsMaxAggregateInputType = {
    id?: true
    presentationId?: true
    viewCount?: true
    lastViewedAt?: true
    updatedAt?: true
  }

  export type PresentationMetricsCountAggregateInputType = {
    id?: true
    presentationId?: true
    viewCount?: true
    lastViewedAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PresentationMetricsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PresentationMetrics to aggregate.
     */
    where?: PresentationMetricsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PresentationMetrics to fetch.
     */
    orderBy?: PresentationMetricsOrderByWithRelationInput | PresentationMetricsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PresentationMetricsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PresentationMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PresentationMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PresentationMetrics
    **/
    _count?: true | PresentationMetricsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PresentationMetricsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PresentationMetricsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PresentationMetricsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PresentationMetricsMaxAggregateInputType
  }

  export type GetPresentationMetricsAggregateType<T extends PresentationMetricsAggregateArgs> = {
        [P in keyof T & keyof AggregatePresentationMetrics]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePresentationMetrics[P]>
      : GetScalarType<T[P], AggregatePresentationMetrics[P]>
  }




  export type PresentationMetricsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PresentationMetricsWhereInput
    orderBy?: PresentationMetricsOrderByWithAggregationInput | PresentationMetricsOrderByWithAggregationInput[]
    by: PresentationMetricsScalarFieldEnum[] | PresentationMetricsScalarFieldEnum
    having?: PresentationMetricsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PresentationMetricsCountAggregateInputType | true
    _avg?: PresentationMetricsAvgAggregateInputType
    _sum?: PresentationMetricsSumAggregateInputType
    _min?: PresentationMetricsMinAggregateInputType
    _max?: PresentationMetricsMaxAggregateInputType
  }

  export type PresentationMetricsGroupByOutputType = {
    id: string
    presentationId: string
    viewCount: number
    lastViewedAt: Date | null
    updatedAt: Date
    _count: PresentationMetricsCountAggregateOutputType | null
    _avg: PresentationMetricsAvgAggregateOutputType | null
    _sum: PresentationMetricsSumAggregateOutputType | null
    _min: PresentationMetricsMinAggregateOutputType | null
    _max: PresentationMetricsMaxAggregateOutputType | null
  }

  type GetPresentationMetricsGroupByPayload<T extends PresentationMetricsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PresentationMetricsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PresentationMetricsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PresentationMetricsGroupByOutputType[P]>
            : GetScalarType<T[P], PresentationMetricsGroupByOutputType[P]>
        }
      >
    >


  export type PresentationMetricsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    presentationId?: boolean
    viewCount?: boolean
    lastViewedAt?: boolean
    updatedAt?: boolean
    presentation?: boolean | PresentationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["presentationMetrics"]>

  export type PresentationMetricsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    presentationId?: boolean
    viewCount?: boolean
    lastViewedAt?: boolean
    updatedAt?: boolean
    presentation?: boolean | PresentationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["presentationMetrics"]>

  export type PresentationMetricsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    presentationId?: boolean
    viewCount?: boolean
    lastViewedAt?: boolean
    updatedAt?: boolean
    presentation?: boolean | PresentationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["presentationMetrics"]>

  export type PresentationMetricsSelectScalar = {
    id?: boolean
    presentationId?: boolean
    viewCount?: boolean
    lastViewedAt?: boolean
    updatedAt?: boolean
  }

  export type PresentationMetricsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "presentationId" | "viewCount" | "lastViewedAt" | "updatedAt", ExtArgs["result"]["presentationMetrics"]>
  export type PresentationMetricsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    presentation?: boolean | PresentationDefaultArgs<ExtArgs>
  }
  export type PresentationMetricsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    presentation?: boolean | PresentationDefaultArgs<ExtArgs>
  }
  export type PresentationMetricsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    presentation?: boolean | PresentationDefaultArgs<ExtArgs>
  }

  export type $PresentationMetricsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PresentationMetrics"
    objects: {
      presentation: Prisma.$PresentationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      presentationId: string
      viewCount: number
      lastViewedAt: Date | null
      updatedAt: Date
    }, ExtArgs["result"]["presentationMetrics"]>
    composites: {}
  }

  type PresentationMetricsGetPayload<S extends boolean | null | undefined | PresentationMetricsDefaultArgs> = $Result.GetResult<Prisma.$PresentationMetricsPayload, S>

  type PresentationMetricsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PresentationMetricsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PresentationMetricsCountAggregateInputType | true
    }

  export interface PresentationMetricsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PresentationMetrics'], meta: { name: 'PresentationMetrics' } }
    /**
     * Find zero or one PresentationMetrics that matches the filter.
     * @param {PresentationMetricsFindUniqueArgs} args - Arguments to find a PresentationMetrics
     * @example
     * // Get one PresentationMetrics
     * const presentationMetrics = await prisma.presentationMetrics.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PresentationMetricsFindUniqueArgs>(args: SelectSubset<T, PresentationMetricsFindUniqueArgs<ExtArgs>>): Prisma__PresentationMetricsClient<$Result.GetResult<Prisma.$PresentationMetricsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PresentationMetrics that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PresentationMetricsFindUniqueOrThrowArgs} args - Arguments to find a PresentationMetrics
     * @example
     * // Get one PresentationMetrics
     * const presentationMetrics = await prisma.presentationMetrics.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PresentationMetricsFindUniqueOrThrowArgs>(args: SelectSubset<T, PresentationMetricsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PresentationMetricsClient<$Result.GetResult<Prisma.$PresentationMetricsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PresentationMetrics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresentationMetricsFindFirstArgs} args - Arguments to find a PresentationMetrics
     * @example
     * // Get one PresentationMetrics
     * const presentationMetrics = await prisma.presentationMetrics.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PresentationMetricsFindFirstArgs>(args?: SelectSubset<T, PresentationMetricsFindFirstArgs<ExtArgs>>): Prisma__PresentationMetricsClient<$Result.GetResult<Prisma.$PresentationMetricsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PresentationMetrics that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresentationMetricsFindFirstOrThrowArgs} args - Arguments to find a PresentationMetrics
     * @example
     * // Get one PresentationMetrics
     * const presentationMetrics = await prisma.presentationMetrics.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PresentationMetricsFindFirstOrThrowArgs>(args?: SelectSubset<T, PresentationMetricsFindFirstOrThrowArgs<ExtArgs>>): Prisma__PresentationMetricsClient<$Result.GetResult<Prisma.$PresentationMetricsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PresentationMetrics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresentationMetricsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PresentationMetrics
     * const presentationMetrics = await prisma.presentationMetrics.findMany()
     * 
     * // Get first 10 PresentationMetrics
     * const presentationMetrics = await prisma.presentationMetrics.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const presentationMetricsWithIdOnly = await prisma.presentationMetrics.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PresentationMetricsFindManyArgs>(args?: SelectSubset<T, PresentationMetricsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PresentationMetricsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PresentationMetrics.
     * @param {PresentationMetricsCreateArgs} args - Arguments to create a PresentationMetrics.
     * @example
     * // Create one PresentationMetrics
     * const PresentationMetrics = await prisma.presentationMetrics.create({
     *   data: {
     *     // ... data to create a PresentationMetrics
     *   }
     * })
     * 
     */
    create<T extends PresentationMetricsCreateArgs>(args: SelectSubset<T, PresentationMetricsCreateArgs<ExtArgs>>): Prisma__PresentationMetricsClient<$Result.GetResult<Prisma.$PresentationMetricsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PresentationMetrics.
     * @param {PresentationMetricsCreateManyArgs} args - Arguments to create many PresentationMetrics.
     * @example
     * // Create many PresentationMetrics
     * const presentationMetrics = await prisma.presentationMetrics.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PresentationMetricsCreateManyArgs>(args?: SelectSubset<T, PresentationMetricsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PresentationMetrics and returns the data saved in the database.
     * @param {PresentationMetricsCreateManyAndReturnArgs} args - Arguments to create many PresentationMetrics.
     * @example
     * // Create many PresentationMetrics
     * const presentationMetrics = await prisma.presentationMetrics.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PresentationMetrics and only return the `id`
     * const presentationMetricsWithIdOnly = await prisma.presentationMetrics.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PresentationMetricsCreateManyAndReturnArgs>(args?: SelectSubset<T, PresentationMetricsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PresentationMetricsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PresentationMetrics.
     * @param {PresentationMetricsDeleteArgs} args - Arguments to delete one PresentationMetrics.
     * @example
     * // Delete one PresentationMetrics
     * const PresentationMetrics = await prisma.presentationMetrics.delete({
     *   where: {
     *     // ... filter to delete one PresentationMetrics
     *   }
     * })
     * 
     */
    delete<T extends PresentationMetricsDeleteArgs>(args: SelectSubset<T, PresentationMetricsDeleteArgs<ExtArgs>>): Prisma__PresentationMetricsClient<$Result.GetResult<Prisma.$PresentationMetricsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PresentationMetrics.
     * @param {PresentationMetricsUpdateArgs} args - Arguments to update one PresentationMetrics.
     * @example
     * // Update one PresentationMetrics
     * const presentationMetrics = await prisma.presentationMetrics.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PresentationMetricsUpdateArgs>(args: SelectSubset<T, PresentationMetricsUpdateArgs<ExtArgs>>): Prisma__PresentationMetricsClient<$Result.GetResult<Prisma.$PresentationMetricsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PresentationMetrics.
     * @param {PresentationMetricsDeleteManyArgs} args - Arguments to filter PresentationMetrics to delete.
     * @example
     * // Delete a few PresentationMetrics
     * const { count } = await prisma.presentationMetrics.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PresentationMetricsDeleteManyArgs>(args?: SelectSubset<T, PresentationMetricsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PresentationMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresentationMetricsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PresentationMetrics
     * const presentationMetrics = await prisma.presentationMetrics.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PresentationMetricsUpdateManyArgs>(args: SelectSubset<T, PresentationMetricsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PresentationMetrics and returns the data updated in the database.
     * @param {PresentationMetricsUpdateManyAndReturnArgs} args - Arguments to update many PresentationMetrics.
     * @example
     * // Update many PresentationMetrics
     * const presentationMetrics = await prisma.presentationMetrics.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PresentationMetrics and only return the `id`
     * const presentationMetricsWithIdOnly = await prisma.presentationMetrics.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PresentationMetricsUpdateManyAndReturnArgs>(args: SelectSubset<T, PresentationMetricsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PresentationMetricsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PresentationMetrics.
     * @param {PresentationMetricsUpsertArgs} args - Arguments to update or create a PresentationMetrics.
     * @example
     * // Update or create a PresentationMetrics
     * const presentationMetrics = await prisma.presentationMetrics.upsert({
     *   create: {
     *     // ... data to create a PresentationMetrics
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PresentationMetrics we want to update
     *   }
     * })
     */
    upsert<T extends PresentationMetricsUpsertArgs>(args: SelectSubset<T, PresentationMetricsUpsertArgs<ExtArgs>>): Prisma__PresentationMetricsClient<$Result.GetResult<Prisma.$PresentationMetricsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PresentationMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresentationMetricsCountArgs} args - Arguments to filter PresentationMetrics to count.
     * @example
     * // Count the number of PresentationMetrics
     * const count = await prisma.presentationMetrics.count({
     *   where: {
     *     // ... the filter for the PresentationMetrics we want to count
     *   }
     * })
    **/
    count<T extends PresentationMetricsCountArgs>(
      args?: Subset<T, PresentationMetricsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PresentationMetricsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PresentationMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresentationMetricsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PresentationMetricsAggregateArgs>(args: Subset<T, PresentationMetricsAggregateArgs>): Prisma.PrismaPromise<GetPresentationMetricsAggregateType<T>>

    /**
     * Group by PresentationMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresentationMetricsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PresentationMetricsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PresentationMetricsGroupByArgs['orderBy'] }
        : { orderBy?: PresentationMetricsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PresentationMetricsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPresentationMetricsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PresentationMetrics model
   */
  readonly fields: PresentationMetricsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PresentationMetrics.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PresentationMetricsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    presentation<T extends PresentationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PresentationDefaultArgs<ExtArgs>>): Prisma__PresentationClient<$Result.GetResult<Prisma.$PresentationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PresentationMetrics model
   */
  interface PresentationMetricsFieldRefs {
    readonly id: FieldRef<"PresentationMetrics", 'String'>
    readonly presentationId: FieldRef<"PresentationMetrics", 'String'>
    readonly viewCount: FieldRef<"PresentationMetrics", 'Int'>
    readonly lastViewedAt: FieldRef<"PresentationMetrics", 'DateTime'>
    readonly updatedAt: FieldRef<"PresentationMetrics", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PresentationMetrics findUnique
   */
  export type PresentationMetricsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PresentationMetrics
     */
    select?: PresentationMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PresentationMetrics
     */
    omit?: PresentationMetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationMetricsInclude<ExtArgs> | null
    /**
     * Filter, which PresentationMetrics to fetch.
     */
    where: PresentationMetricsWhereUniqueInput
  }

  /**
   * PresentationMetrics findUniqueOrThrow
   */
  export type PresentationMetricsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PresentationMetrics
     */
    select?: PresentationMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PresentationMetrics
     */
    omit?: PresentationMetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationMetricsInclude<ExtArgs> | null
    /**
     * Filter, which PresentationMetrics to fetch.
     */
    where: PresentationMetricsWhereUniqueInput
  }

  /**
   * PresentationMetrics findFirst
   */
  export type PresentationMetricsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PresentationMetrics
     */
    select?: PresentationMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PresentationMetrics
     */
    omit?: PresentationMetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationMetricsInclude<ExtArgs> | null
    /**
     * Filter, which PresentationMetrics to fetch.
     */
    where?: PresentationMetricsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PresentationMetrics to fetch.
     */
    orderBy?: PresentationMetricsOrderByWithRelationInput | PresentationMetricsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PresentationMetrics.
     */
    cursor?: PresentationMetricsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PresentationMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PresentationMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PresentationMetrics.
     */
    distinct?: PresentationMetricsScalarFieldEnum | PresentationMetricsScalarFieldEnum[]
  }

  /**
   * PresentationMetrics findFirstOrThrow
   */
  export type PresentationMetricsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PresentationMetrics
     */
    select?: PresentationMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PresentationMetrics
     */
    omit?: PresentationMetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationMetricsInclude<ExtArgs> | null
    /**
     * Filter, which PresentationMetrics to fetch.
     */
    where?: PresentationMetricsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PresentationMetrics to fetch.
     */
    orderBy?: PresentationMetricsOrderByWithRelationInput | PresentationMetricsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PresentationMetrics.
     */
    cursor?: PresentationMetricsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PresentationMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PresentationMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PresentationMetrics.
     */
    distinct?: PresentationMetricsScalarFieldEnum | PresentationMetricsScalarFieldEnum[]
  }

  /**
   * PresentationMetrics findMany
   */
  export type PresentationMetricsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PresentationMetrics
     */
    select?: PresentationMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PresentationMetrics
     */
    omit?: PresentationMetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationMetricsInclude<ExtArgs> | null
    /**
     * Filter, which PresentationMetrics to fetch.
     */
    where?: PresentationMetricsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PresentationMetrics to fetch.
     */
    orderBy?: PresentationMetricsOrderByWithRelationInput | PresentationMetricsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PresentationMetrics.
     */
    cursor?: PresentationMetricsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PresentationMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PresentationMetrics.
     */
    skip?: number
    distinct?: PresentationMetricsScalarFieldEnum | PresentationMetricsScalarFieldEnum[]
  }

  /**
   * PresentationMetrics create
   */
  export type PresentationMetricsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PresentationMetrics
     */
    select?: PresentationMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PresentationMetrics
     */
    omit?: PresentationMetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationMetricsInclude<ExtArgs> | null
    /**
     * The data needed to create a PresentationMetrics.
     */
    data: XOR<PresentationMetricsCreateInput, PresentationMetricsUncheckedCreateInput>
  }

  /**
   * PresentationMetrics createMany
   */
  export type PresentationMetricsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PresentationMetrics.
     */
    data: PresentationMetricsCreateManyInput | PresentationMetricsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PresentationMetrics createManyAndReturn
   */
  export type PresentationMetricsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PresentationMetrics
     */
    select?: PresentationMetricsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PresentationMetrics
     */
    omit?: PresentationMetricsOmit<ExtArgs> | null
    /**
     * The data used to create many PresentationMetrics.
     */
    data: PresentationMetricsCreateManyInput | PresentationMetricsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationMetricsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PresentationMetrics update
   */
  export type PresentationMetricsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PresentationMetrics
     */
    select?: PresentationMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PresentationMetrics
     */
    omit?: PresentationMetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationMetricsInclude<ExtArgs> | null
    /**
     * The data needed to update a PresentationMetrics.
     */
    data: XOR<PresentationMetricsUpdateInput, PresentationMetricsUncheckedUpdateInput>
    /**
     * Choose, which PresentationMetrics to update.
     */
    where: PresentationMetricsWhereUniqueInput
  }

  /**
   * PresentationMetrics updateMany
   */
  export type PresentationMetricsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PresentationMetrics.
     */
    data: XOR<PresentationMetricsUpdateManyMutationInput, PresentationMetricsUncheckedUpdateManyInput>
    /**
     * Filter which PresentationMetrics to update
     */
    where?: PresentationMetricsWhereInput
    /**
     * Limit how many PresentationMetrics to update.
     */
    limit?: number
  }

  /**
   * PresentationMetrics updateManyAndReturn
   */
  export type PresentationMetricsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PresentationMetrics
     */
    select?: PresentationMetricsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PresentationMetrics
     */
    omit?: PresentationMetricsOmit<ExtArgs> | null
    /**
     * The data used to update PresentationMetrics.
     */
    data: XOR<PresentationMetricsUpdateManyMutationInput, PresentationMetricsUncheckedUpdateManyInput>
    /**
     * Filter which PresentationMetrics to update
     */
    where?: PresentationMetricsWhereInput
    /**
     * Limit how many PresentationMetrics to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationMetricsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PresentationMetrics upsert
   */
  export type PresentationMetricsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PresentationMetrics
     */
    select?: PresentationMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PresentationMetrics
     */
    omit?: PresentationMetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationMetricsInclude<ExtArgs> | null
    /**
     * The filter to search for the PresentationMetrics to update in case it exists.
     */
    where: PresentationMetricsWhereUniqueInput
    /**
     * In case the PresentationMetrics found by the `where` argument doesn't exist, create a new PresentationMetrics with this data.
     */
    create: XOR<PresentationMetricsCreateInput, PresentationMetricsUncheckedCreateInput>
    /**
     * In case the PresentationMetrics was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PresentationMetricsUpdateInput, PresentationMetricsUncheckedUpdateInput>
  }

  /**
   * PresentationMetrics delete
   */
  export type PresentationMetricsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PresentationMetrics
     */
    select?: PresentationMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PresentationMetrics
     */
    omit?: PresentationMetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationMetricsInclude<ExtArgs> | null
    /**
     * Filter which PresentationMetrics to delete.
     */
    where: PresentationMetricsWhereUniqueInput
  }

  /**
   * PresentationMetrics deleteMany
   */
  export type PresentationMetricsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PresentationMetrics to delete
     */
    where?: PresentationMetricsWhereInput
    /**
     * Limit how many PresentationMetrics to delete.
     */
    limit?: number
  }

  /**
   * PresentationMetrics without action
   */
  export type PresentationMetricsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PresentationMetrics
     */
    select?: PresentationMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PresentationMetrics
     */
    omit?: PresentationMetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationMetricsInclude<ExtArgs> | null
  }


  /**
   * Model RefreshToken
   */

  export type AggregateRefreshToken = {
    _count: RefreshTokenCountAggregateOutputType | null
    _min: RefreshTokenMinAggregateOutputType | null
    _max: RefreshTokenMaxAggregateOutputType | null
  }

  export type RefreshTokenMinAggregateOutputType = {
    id: string | null
    token: string | null
    userId: string | null
    expiresAt: Date | null
    createdAt: Date | null
  }

  export type RefreshTokenMaxAggregateOutputType = {
    id: string | null
    token: string | null
    userId: string | null
    expiresAt: Date | null
    createdAt: Date | null
  }

  export type RefreshTokenCountAggregateOutputType = {
    id: number
    token: number
    userId: number
    expiresAt: number
    createdAt: number
    _all: number
  }


  export type RefreshTokenMinAggregateInputType = {
    id?: true
    token?: true
    userId?: true
    expiresAt?: true
    createdAt?: true
  }

  export type RefreshTokenMaxAggregateInputType = {
    id?: true
    token?: true
    userId?: true
    expiresAt?: true
    createdAt?: true
  }

  export type RefreshTokenCountAggregateInputType = {
    id?: true
    token?: true
    userId?: true
    expiresAt?: true
    createdAt?: true
    _all?: true
  }

  export type RefreshTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RefreshToken to aggregate.
     */
    where?: RefreshTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefreshTokens to fetch.
     */
    orderBy?: RefreshTokenOrderByWithRelationInput | RefreshTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RefreshTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefreshTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefreshTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RefreshTokens
    **/
    _count?: true | RefreshTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RefreshTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RefreshTokenMaxAggregateInputType
  }

  export type GetRefreshTokenAggregateType<T extends RefreshTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateRefreshToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRefreshToken[P]>
      : GetScalarType<T[P], AggregateRefreshToken[P]>
  }




  export type RefreshTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RefreshTokenWhereInput
    orderBy?: RefreshTokenOrderByWithAggregationInput | RefreshTokenOrderByWithAggregationInput[]
    by: RefreshTokenScalarFieldEnum[] | RefreshTokenScalarFieldEnum
    having?: RefreshTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RefreshTokenCountAggregateInputType | true
    _min?: RefreshTokenMinAggregateInputType
    _max?: RefreshTokenMaxAggregateInputType
  }

  export type RefreshTokenGroupByOutputType = {
    id: string
    token: string
    userId: string
    expiresAt: Date
    createdAt: Date
    _count: RefreshTokenCountAggregateOutputType | null
    _min: RefreshTokenMinAggregateOutputType | null
    _max: RefreshTokenMaxAggregateOutputType | null
  }

  type GetRefreshTokenGroupByPayload<T extends RefreshTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RefreshTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RefreshTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RefreshTokenGroupByOutputType[P]>
            : GetScalarType<T[P], RefreshTokenGroupByOutputType[P]>
        }
      >
    >


  export type RefreshTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    token?: boolean
    userId?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["refreshToken"]>

  export type RefreshTokenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    token?: boolean
    userId?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["refreshToken"]>

  export type RefreshTokenSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    token?: boolean
    userId?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["refreshToken"]>

  export type RefreshTokenSelectScalar = {
    id?: boolean
    token?: boolean
    userId?: boolean
    expiresAt?: boolean
    createdAt?: boolean
  }

  export type RefreshTokenOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "token" | "userId" | "expiresAt" | "createdAt", ExtArgs["result"]["refreshToken"]>
  export type RefreshTokenInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type RefreshTokenIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type RefreshTokenIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $RefreshTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RefreshToken"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      token: string
      userId: string
      expiresAt: Date
      createdAt: Date
    }, ExtArgs["result"]["refreshToken"]>
    composites: {}
  }

  type RefreshTokenGetPayload<S extends boolean | null | undefined | RefreshTokenDefaultArgs> = $Result.GetResult<Prisma.$RefreshTokenPayload, S>

  type RefreshTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RefreshTokenFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RefreshTokenCountAggregateInputType | true
    }

  export interface RefreshTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RefreshToken'], meta: { name: 'RefreshToken' } }
    /**
     * Find zero or one RefreshToken that matches the filter.
     * @param {RefreshTokenFindUniqueArgs} args - Arguments to find a RefreshToken
     * @example
     * // Get one RefreshToken
     * const refreshToken = await prisma.refreshToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RefreshTokenFindUniqueArgs>(args: SelectSubset<T, RefreshTokenFindUniqueArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RefreshToken that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RefreshTokenFindUniqueOrThrowArgs} args - Arguments to find a RefreshToken
     * @example
     * // Get one RefreshToken
     * const refreshToken = await prisma.refreshToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RefreshTokenFindUniqueOrThrowArgs>(args: SelectSubset<T, RefreshTokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RefreshToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenFindFirstArgs} args - Arguments to find a RefreshToken
     * @example
     * // Get one RefreshToken
     * const refreshToken = await prisma.refreshToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RefreshTokenFindFirstArgs>(args?: SelectSubset<T, RefreshTokenFindFirstArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RefreshToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenFindFirstOrThrowArgs} args - Arguments to find a RefreshToken
     * @example
     * // Get one RefreshToken
     * const refreshToken = await prisma.refreshToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RefreshTokenFindFirstOrThrowArgs>(args?: SelectSubset<T, RefreshTokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RefreshTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RefreshTokens
     * const refreshTokens = await prisma.refreshToken.findMany()
     * 
     * // Get first 10 RefreshTokens
     * const refreshTokens = await prisma.refreshToken.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const refreshTokenWithIdOnly = await prisma.refreshToken.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RefreshTokenFindManyArgs>(args?: SelectSubset<T, RefreshTokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RefreshToken.
     * @param {RefreshTokenCreateArgs} args - Arguments to create a RefreshToken.
     * @example
     * // Create one RefreshToken
     * const RefreshToken = await prisma.refreshToken.create({
     *   data: {
     *     // ... data to create a RefreshToken
     *   }
     * })
     * 
     */
    create<T extends RefreshTokenCreateArgs>(args: SelectSubset<T, RefreshTokenCreateArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RefreshTokens.
     * @param {RefreshTokenCreateManyArgs} args - Arguments to create many RefreshTokens.
     * @example
     * // Create many RefreshTokens
     * const refreshToken = await prisma.refreshToken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RefreshTokenCreateManyArgs>(args?: SelectSubset<T, RefreshTokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RefreshTokens and returns the data saved in the database.
     * @param {RefreshTokenCreateManyAndReturnArgs} args - Arguments to create many RefreshTokens.
     * @example
     * // Create many RefreshTokens
     * const refreshToken = await prisma.refreshToken.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RefreshTokens and only return the `id`
     * const refreshTokenWithIdOnly = await prisma.refreshToken.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RefreshTokenCreateManyAndReturnArgs>(args?: SelectSubset<T, RefreshTokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RefreshToken.
     * @param {RefreshTokenDeleteArgs} args - Arguments to delete one RefreshToken.
     * @example
     * // Delete one RefreshToken
     * const RefreshToken = await prisma.refreshToken.delete({
     *   where: {
     *     // ... filter to delete one RefreshToken
     *   }
     * })
     * 
     */
    delete<T extends RefreshTokenDeleteArgs>(args: SelectSubset<T, RefreshTokenDeleteArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RefreshToken.
     * @param {RefreshTokenUpdateArgs} args - Arguments to update one RefreshToken.
     * @example
     * // Update one RefreshToken
     * const refreshToken = await prisma.refreshToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RefreshTokenUpdateArgs>(args: SelectSubset<T, RefreshTokenUpdateArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RefreshTokens.
     * @param {RefreshTokenDeleteManyArgs} args - Arguments to filter RefreshTokens to delete.
     * @example
     * // Delete a few RefreshTokens
     * const { count } = await prisma.refreshToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RefreshTokenDeleteManyArgs>(args?: SelectSubset<T, RefreshTokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RefreshTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RefreshTokens
     * const refreshToken = await prisma.refreshToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RefreshTokenUpdateManyArgs>(args: SelectSubset<T, RefreshTokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RefreshTokens and returns the data updated in the database.
     * @param {RefreshTokenUpdateManyAndReturnArgs} args - Arguments to update many RefreshTokens.
     * @example
     * // Update many RefreshTokens
     * const refreshToken = await prisma.refreshToken.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RefreshTokens and only return the `id`
     * const refreshTokenWithIdOnly = await prisma.refreshToken.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RefreshTokenUpdateManyAndReturnArgs>(args: SelectSubset<T, RefreshTokenUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RefreshToken.
     * @param {RefreshTokenUpsertArgs} args - Arguments to update or create a RefreshToken.
     * @example
     * // Update or create a RefreshToken
     * const refreshToken = await prisma.refreshToken.upsert({
     *   create: {
     *     // ... data to create a RefreshToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RefreshToken we want to update
     *   }
     * })
     */
    upsert<T extends RefreshTokenUpsertArgs>(args: SelectSubset<T, RefreshTokenUpsertArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RefreshTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenCountArgs} args - Arguments to filter RefreshTokens to count.
     * @example
     * // Count the number of RefreshTokens
     * const count = await prisma.refreshToken.count({
     *   where: {
     *     // ... the filter for the RefreshTokens we want to count
     *   }
     * })
    **/
    count<T extends RefreshTokenCountArgs>(
      args?: Subset<T, RefreshTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RefreshTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RefreshToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RefreshTokenAggregateArgs>(args: Subset<T, RefreshTokenAggregateArgs>): Prisma.PrismaPromise<GetRefreshTokenAggregateType<T>>

    /**
     * Group by RefreshToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RefreshTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RefreshTokenGroupByArgs['orderBy'] }
        : { orderBy?: RefreshTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RefreshTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRefreshTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RefreshToken model
   */
  readonly fields: RefreshTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RefreshToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RefreshTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RefreshToken model
   */
  interface RefreshTokenFieldRefs {
    readonly id: FieldRef<"RefreshToken", 'String'>
    readonly token: FieldRef<"RefreshToken", 'String'>
    readonly userId: FieldRef<"RefreshToken", 'String'>
    readonly expiresAt: FieldRef<"RefreshToken", 'DateTime'>
    readonly createdAt: FieldRef<"RefreshToken", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RefreshToken findUnique
   */
  export type RefreshTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter, which RefreshToken to fetch.
     */
    where: RefreshTokenWhereUniqueInput
  }

  /**
   * RefreshToken findUniqueOrThrow
   */
  export type RefreshTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter, which RefreshToken to fetch.
     */
    where: RefreshTokenWhereUniqueInput
  }

  /**
   * RefreshToken findFirst
   */
  export type RefreshTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter, which RefreshToken to fetch.
     */
    where?: RefreshTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefreshTokens to fetch.
     */
    orderBy?: RefreshTokenOrderByWithRelationInput | RefreshTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RefreshTokens.
     */
    cursor?: RefreshTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefreshTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefreshTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RefreshTokens.
     */
    distinct?: RefreshTokenScalarFieldEnum | RefreshTokenScalarFieldEnum[]
  }

  /**
   * RefreshToken findFirstOrThrow
   */
  export type RefreshTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter, which RefreshToken to fetch.
     */
    where?: RefreshTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefreshTokens to fetch.
     */
    orderBy?: RefreshTokenOrderByWithRelationInput | RefreshTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RefreshTokens.
     */
    cursor?: RefreshTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefreshTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefreshTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RefreshTokens.
     */
    distinct?: RefreshTokenScalarFieldEnum | RefreshTokenScalarFieldEnum[]
  }

  /**
   * RefreshToken findMany
   */
  export type RefreshTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter, which RefreshTokens to fetch.
     */
    where?: RefreshTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefreshTokens to fetch.
     */
    orderBy?: RefreshTokenOrderByWithRelationInput | RefreshTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RefreshTokens.
     */
    cursor?: RefreshTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefreshTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefreshTokens.
     */
    skip?: number
    distinct?: RefreshTokenScalarFieldEnum | RefreshTokenScalarFieldEnum[]
  }

  /**
   * RefreshToken create
   */
  export type RefreshTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * The data needed to create a RefreshToken.
     */
    data: XOR<RefreshTokenCreateInput, RefreshTokenUncheckedCreateInput>
  }

  /**
   * RefreshToken createMany
   */
  export type RefreshTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RefreshTokens.
     */
    data: RefreshTokenCreateManyInput | RefreshTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RefreshToken createManyAndReturn
   */
  export type RefreshTokenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * The data used to create many RefreshTokens.
     */
    data: RefreshTokenCreateManyInput | RefreshTokenCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RefreshToken update
   */
  export type RefreshTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * The data needed to update a RefreshToken.
     */
    data: XOR<RefreshTokenUpdateInput, RefreshTokenUncheckedUpdateInput>
    /**
     * Choose, which RefreshToken to update.
     */
    where: RefreshTokenWhereUniqueInput
  }

  /**
   * RefreshToken updateMany
   */
  export type RefreshTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RefreshTokens.
     */
    data: XOR<RefreshTokenUpdateManyMutationInput, RefreshTokenUncheckedUpdateManyInput>
    /**
     * Filter which RefreshTokens to update
     */
    where?: RefreshTokenWhereInput
    /**
     * Limit how many RefreshTokens to update.
     */
    limit?: number
  }

  /**
   * RefreshToken updateManyAndReturn
   */
  export type RefreshTokenUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * The data used to update RefreshTokens.
     */
    data: XOR<RefreshTokenUpdateManyMutationInput, RefreshTokenUncheckedUpdateManyInput>
    /**
     * Filter which RefreshTokens to update
     */
    where?: RefreshTokenWhereInput
    /**
     * Limit how many RefreshTokens to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RefreshToken upsert
   */
  export type RefreshTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * The filter to search for the RefreshToken to update in case it exists.
     */
    where: RefreshTokenWhereUniqueInput
    /**
     * In case the RefreshToken found by the `where` argument doesn't exist, create a new RefreshToken with this data.
     */
    create: XOR<RefreshTokenCreateInput, RefreshTokenUncheckedCreateInput>
    /**
     * In case the RefreshToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RefreshTokenUpdateInput, RefreshTokenUncheckedUpdateInput>
  }

  /**
   * RefreshToken delete
   */
  export type RefreshTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter which RefreshToken to delete.
     */
    where: RefreshTokenWhereUniqueInput
  }

  /**
   * RefreshToken deleteMany
   */
  export type RefreshTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RefreshTokens to delete
     */
    where?: RefreshTokenWhereInput
    /**
     * Limit how many RefreshTokens to delete.
     */
    limit?: number
  }

  /**
   * RefreshToken without action
   */
  export type RefreshTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    password: 'password',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    logo: 'logo'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    description: 'description',
    color: 'color',
    isActive: 'isActive',
    createdAt: 'createdAt'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const EventScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    startDate: 'startDate',
    endDate: 'endDate',
    slug: 'slug',
    status: 'status',
    isFeatured: 'isFeatured',
    locationId: 'locationId',
    maxCapacity: 'maxCapacity',
    isEducational: 'isEducational',
    organizerId: 'organizerId',
    categoryId: 'categoryId',
    viewCount: 'viewCount',
    attendeeCount: 'attendeeCount',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EventScalarFieldEnum = (typeof EventScalarFieldEnum)[keyof typeof EventScalarFieldEnum]


  export const LocationScalarFieldEnum: {
    id: 'id',
    city: 'city',
    country: 'country',
    venue: 'venue'
  };

  export type LocationScalarFieldEnum = (typeof LocationScalarFieldEnum)[keyof typeof LocationScalarFieldEnum]


  export const EventImageScalarFieldEnum: {
    id: 'id',
    banner: 'banner',
    thumbnail: 'thumbnail',
    eventId: 'eventId'
  };

  export type EventImageScalarFieldEnum = (typeof EventImageScalarFieldEnum)[keyof typeof EventImageScalarFieldEnum]


  export const EventAttendeeScalarFieldEnum: {
    id: 'id',
    status: 'status',
    registeredAt: 'registeredAt',
    userId: 'userId',
    eventId: 'eventId'
  };

  export type EventAttendeeScalarFieldEnum = (typeof EventAttendeeScalarFieldEnum)[keyof typeof EventAttendeeScalarFieldEnum]


  export const ConferenceDayScalarFieldEnum: {
    id: 'id',
    date: 'date',
    sortOrder: 'sortOrder',
    eventId: 'eventId'
  };

  export type ConferenceDayScalarFieldEnum = (typeof ConferenceDayScalarFieldEnum)[keyof typeof ConferenceDayScalarFieldEnum]


  export const SectionScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    sortOrder: 'sortOrder',
    startTime: 'startTime',
    endTime: 'endTime',
    dayId: 'dayId'
  };

  export type SectionScalarFieldEnum = (typeof SectionScalarFieldEnum)[keyof typeof SectionScalarFieldEnum]


  export const PresentationScalarFieldEnum: {
    id: 'id',
    title: 'title',
    abstract: 'abstract',
    durationMin: 'durationMin',
    keywords: 'keywords',
    status: 'status',
    submissionType: 'submissionType',
    sortOrder: 'sortOrder',
    startTime: 'startTime',
    endTime: 'endTime',
    sectionId: 'sectionId',
    viewCount: 'viewCount',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    submittedAt: 'submittedAt'
  };

  export type PresentationScalarFieldEnum = (typeof PresentationScalarFieldEnum)[keyof typeof PresentationScalarFieldEnum]


  export const PresentationAuthorScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    presentationId: 'presentationId',
    affiliationId: 'affiliationId',
    isCorrespondingAuthor: 'isCorrespondingAuthor'
  };

  export type PresentationAuthorScalarFieldEnum = (typeof PresentationAuthorScalarFieldEnum)[keyof typeof PresentationAuthorScalarFieldEnum]


  export const AffiliationScalarFieldEnum: {
    id: 'id',
    name: 'name',
    country: 'country'
  };

  export type AffiliationScalarFieldEnum = (typeof AffiliationScalarFieldEnum)[keyof typeof AffiliationScalarFieldEnum]


  export const PresentationMaterialScalarFieldEnum: {
    id: 'id',
    fileUrl: 'fileUrl',
    fileType: 'fileType',
    label: 'label',
    presentationId: 'presentationId',
    uploadedAt: 'uploadedAt'
  };

  export type PresentationMaterialScalarFieldEnum = (typeof PresentationMaterialScalarFieldEnum)[keyof typeof PresentationMaterialScalarFieldEnum]


  export const BreakScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    startTime: 'startTime',
    endTime: 'endTime',
    sectionId: 'sectionId'
  };

  export type BreakScalarFieldEnum = (typeof BreakScalarFieldEnum)[keyof typeof BreakScalarFieldEnum]


  export const FavoriteScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    presentationId: 'presentationId',
    createdAt: 'createdAt'
  };

  export type FavoriteScalarFieldEnum = (typeof FavoriteScalarFieldEnum)[keyof typeof FavoriteScalarFieldEnum]


  export const AdminActionLogScalarFieldEnum: {
    id: 'id',
    adminId: 'adminId',
    organizerId: 'organizerId',
    action: 'action',
    targetModel: 'targetModel',
    targetId: 'targetId',
    reason: 'reason',
    timestamp: 'timestamp'
  };

  export type AdminActionLogScalarFieldEnum = (typeof AdminActionLogScalarFieldEnum)[keyof typeof AdminActionLogScalarFieldEnum]


  export const UserProfileScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    fullName: 'fullName',
    bio: 'bio',
    institution: 'institution',
    photoUrl: 'photoUrl',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserProfileScalarFieldEnum = (typeof UserProfileScalarFieldEnum)[keyof typeof UserProfileScalarFieldEnum]


  export const ConferenceRegistrationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    eventId: 'eventId',
    registeredAt: 'registeredAt'
  };

  export type ConferenceRegistrationScalarFieldEnum = (typeof ConferenceRegistrationScalarFieldEnum)[keyof typeof ConferenceRegistrationScalarFieldEnum]


  export const PresentationMetricsScalarFieldEnum: {
    id: 'id',
    presentationId: 'presentationId',
    viewCount: 'viewCount',
    lastViewedAt: 'lastViewedAt',
    updatedAt: 'updatedAt'
  };

  export type PresentationMetricsScalarFieldEnum = (typeof PresentationMetricsScalarFieldEnum)[keyof typeof PresentationMetricsScalarFieldEnum]


  export const RefreshTokenScalarFieldEnum: {
    id: 'id',
    token: 'token',
    userId: 'userId',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt'
  };

  export type RefreshTokenScalarFieldEnum = (typeof RefreshTokenScalarFieldEnum)[keyof typeof RefreshTokenScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'EventStatus'
   */
  export type EnumEventStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EventStatus'>
    


  /**
   * Reference to a field of type 'EventStatus[]'
   */
  export type ListEnumEventStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EventStatus[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'AttendeeStatus'
   */
  export type EnumAttendeeStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AttendeeStatus'>
    


  /**
   * Reference to a field of type 'AttendeeStatus[]'
   */
  export type ListEnumAttendeeStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AttendeeStatus[]'>
    


  /**
   * Reference to a field of type 'PresentationStatus'
   */
  export type EnumPresentationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PresentationStatus'>
    


  /**
   * Reference to a field of type 'PresentationStatus[]'
   */
  export type ListEnumPresentationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PresentationStatus[]'>
    


  /**
   * Reference to a field of type 'SubmissionType'
   */
  export type EnumSubmissionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SubmissionType'>
    


  /**
   * Reference to a field of type 'SubmissionType[]'
   */
  export type ListEnumSubmissionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SubmissionType[]'>
    


  /**
   * Reference to a field of type 'MaterialType'
   */
  export type EnumMaterialTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MaterialType'>
    


  /**
   * Reference to a field of type 'MaterialType[]'
   */
  export type ListEnumMaterialTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MaterialType[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    logo?: StringNullableFilter<"User"> | string | null
    profile?: XOR<UserProfileNullableScalarRelationFilter, UserProfileWhereInput> | null
    organizedEvents?: EventListRelationFilter
    attendedEvents?: EventAttendeeListRelationFilter
    favorites?: FavoriteListRelationFilter
    authoredPresentations?: PresentationAuthorListRelationFilter
    adminActionsTaken?: AdminActionLogListRelationFilter
    adminLogsAsOrganizer?: AdminActionLogListRelationFilter
    conferenceRegistrations?: ConferenceRegistrationListRelationFilter
    refreshTokens?: RefreshTokenListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    logo?: SortOrderInput | SortOrder
    profile?: UserProfileOrderByWithRelationInput
    organizedEvents?: EventOrderByRelationAggregateInput
    attendedEvents?: EventAttendeeOrderByRelationAggregateInput
    favorites?: FavoriteOrderByRelationAggregateInput
    authoredPresentations?: PresentationAuthorOrderByRelationAggregateInput
    adminActionsTaken?: AdminActionLogOrderByRelationAggregateInput
    adminLogsAsOrganizer?: AdminActionLogOrderByRelationAggregateInput
    conferenceRegistrations?: ConferenceRegistrationOrderByRelationAggregateInput
    refreshTokens?: RefreshTokenOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    logo?: StringNullableFilter<"User"> | string | null
    profile?: XOR<UserProfileNullableScalarRelationFilter, UserProfileWhereInput> | null
    organizedEvents?: EventListRelationFilter
    attendedEvents?: EventAttendeeListRelationFilter
    favorites?: FavoriteListRelationFilter
    authoredPresentations?: PresentationAuthorListRelationFilter
    adminActionsTaken?: AdminActionLogListRelationFilter
    adminLogsAsOrganizer?: AdminActionLogListRelationFilter
    conferenceRegistrations?: ConferenceRegistrationListRelationFilter
    refreshTokens?: RefreshTokenListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    logo?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    logo?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type CategoryWhereInput = {
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    id?: StringFilter<"Category"> | string
    name?: StringFilter<"Category"> | string
    slug?: StringFilter<"Category"> | string
    description?: StringNullableFilter<"Category"> | string | null
    color?: StringFilter<"Category"> | string
    isActive?: BoolFilter<"Category"> | boolean
    createdAt?: DateTimeFilter<"Category"> | Date | string
    events?: EventListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrderInput | SortOrder
    color?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    events?: EventOrderByRelationAggregateInput
  }

  export type CategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    slug?: string
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    description?: StringNullableFilter<"Category"> | string | null
    color?: StringFilter<"Category"> | string
    isActive?: BoolFilter<"Category"> | boolean
    createdAt?: DateTimeFilter<"Category"> | Date | string
    events?: EventListRelationFilter
  }, "id" | "name" | "slug">

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrderInput | SortOrder
    color?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    OR?: CategoryScalarWhereWithAggregatesInput[]
    NOT?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Category"> | string
    name?: StringWithAggregatesFilter<"Category"> | string
    slug?: StringWithAggregatesFilter<"Category"> | string
    description?: StringNullableWithAggregatesFilter<"Category"> | string | null
    color?: StringWithAggregatesFilter<"Category"> | string
    isActive?: BoolWithAggregatesFilter<"Category"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Category"> | Date | string
  }

  export type EventWhereInput = {
    AND?: EventWhereInput | EventWhereInput[]
    OR?: EventWhereInput[]
    NOT?: EventWhereInput | EventWhereInput[]
    id?: StringFilter<"Event"> | string
    title?: StringFilter<"Event"> | string
    description?: StringFilter<"Event"> | string
    startDate?: DateTimeFilter<"Event"> | Date | string
    endDate?: DateTimeFilter<"Event"> | Date | string
    slug?: StringFilter<"Event"> | string
    status?: EnumEventStatusFilter<"Event"> | $Enums.EventStatus
    isFeatured?: BoolFilter<"Event"> | boolean
    locationId?: StringFilter<"Event"> | string
    maxCapacity?: IntFilter<"Event"> | number
    isEducational?: BoolFilter<"Event"> | boolean
    organizerId?: StringFilter<"Event"> | string
    categoryId?: StringFilter<"Event"> | string
    viewCount?: IntFilter<"Event"> | number
    attendeeCount?: IntFilter<"Event"> | number
    createdAt?: DateTimeFilter<"Event"> | Date | string
    updatedAt?: DateTimeFilter<"Event"> | Date | string
    location?: XOR<LocationScalarRelationFilter, LocationWhereInput>
    images?: XOR<EventImageNullableScalarRelationFilter, EventImageWhereInput> | null
    organizer?: XOR<UserScalarRelationFilter, UserWhereInput>
    category?: XOR<CategoryScalarRelationFilter, CategoryWhereInput>
    attendees?: EventAttendeeListRelationFilter
    days?: ConferenceDayListRelationFilter
    registrations?: ConferenceRegistrationListRelationFilter
  }

  export type EventOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    slug?: SortOrder
    status?: SortOrder
    isFeatured?: SortOrder
    locationId?: SortOrder
    maxCapacity?: SortOrder
    isEducational?: SortOrder
    organizerId?: SortOrder
    categoryId?: SortOrder
    viewCount?: SortOrder
    attendeeCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    location?: LocationOrderByWithRelationInput
    images?: EventImageOrderByWithRelationInput
    organizer?: UserOrderByWithRelationInput
    category?: CategoryOrderByWithRelationInput
    attendees?: EventAttendeeOrderByRelationAggregateInput
    days?: ConferenceDayOrderByRelationAggregateInput
    registrations?: ConferenceRegistrationOrderByRelationAggregateInput
  }

  export type EventWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    slug?: string
    AND?: EventWhereInput | EventWhereInput[]
    OR?: EventWhereInput[]
    NOT?: EventWhereInput | EventWhereInput[]
    title?: StringFilter<"Event"> | string
    description?: StringFilter<"Event"> | string
    startDate?: DateTimeFilter<"Event"> | Date | string
    endDate?: DateTimeFilter<"Event"> | Date | string
    status?: EnumEventStatusFilter<"Event"> | $Enums.EventStatus
    isFeatured?: BoolFilter<"Event"> | boolean
    locationId?: StringFilter<"Event"> | string
    maxCapacity?: IntFilter<"Event"> | number
    isEducational?: BoolFilter<"Event"> | boolean
    organizerId?: StringFilter<"Event"> | string
    categoryId?: StringFilter<"Event"> | string
    viewCount?: IntFilter<"Event"> | number
    attendeeCount?: IntFilter<"Event"> | number
    createdAt?: DateTimeFilter<"Event"> | Date | string
    updatedAt?: DateTimeFilter<"Event"> | Date | string
    location?: XOR<LocationScalarRelationFilter, LocationWhereInput>
    images?: XOR<EventImageNullableScalarRelationFilter, EventImageWhereInput> | null
    organizer?: XOR<UserScalarRelationFilter, UserWhereInput>
    category?: XOR<CategoryScalarRelationFilter, CategoryWhereInput>
    attendees?: EventAttendeeListRelationFilter
    days?: ConferenceDayListRelationFilter
    registrations?: ConferenceRegistrationListRelationFilter
  }, "id" | "slug">

  export type EventOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    slug?: SortOrder
    status?: SortOrder
    isFeatured?: SortOrder
    locationId?: SortOrder
    maxCapacity?: SortOrder
    isEducational?: SortOrder
    organizerId?: SortOrder
    categoryId?: SortOrder
    viewCount?: SortOrder
    attendeeCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EventCountOrderByAggregateInput
    _avg?: EventAvgOrderByAggregateInput
    _max?: EventMaxOrderByAggregateInput
    _min?: EventMinOrderByAggregateInput
    _sum?: EventSumOrderByAggregateInput
  }

  export type EventScalarWhereWithAggregatesInput = {
    AND?: EventScalarWhereWithAggregatesInput | EventScalarWhereWithAggregatesInput[]
    OR?: EventScalarWhereWithAggregatesInput[]
    NOT?: EventScalarWhereWithAggregatesInput | EventScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Event"> | string
    title?: StringWithAggregatesFilter<"Event"> | string
    description?: StringWithAggregatesFilter<"Event"> | string
    startDate?: DateTimeWithAggregatesFilter<"Event"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"Event"> | Date | string
    slug?: StringWithAggregatesFilter<"Event"> | string
    status?: EnumEventStatusWithAggregatesFilter<"Event"> | $Enums.EventStatus
    isFeatured?: BoolWithAggregatesFilter<"Event"> | boolean
    locationId?: StringWithAggregatesFilter<"Event"> | string
    maxCapacity?: IntWithAggregatesFilter<"Event"> | number
    isEducational?: BoolWithAggregatesFilter<"Event"> | boolean
    organizerId?: StringWithAggregatesFilter<"Event"> | string
    categoryId?: StringWithAggregatesFilter<"Event"> | string
    viewCount?: IntWithAggregatesFilter<"Event"> | number
    attendeeCount?: IntWithAggregatesFilter<"Event"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Event"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Event"> | Date | string
  }

  export type LocationWhereInput = {
    AND?: LocationWhereInput | LocationWhereInput[]
    OR?: LocationWhereInput[]
    NOT?: LocationWhereInput | LocationWhereInput[]
    id?: StringFilter<"Location"> | string
    city?: StringFilter<"Location"> | string
    country?: StringFilter<"Location"> | string
    venue?: StringNullableFilter<"Location"> | string | null
    events?: EventListRelationFilter
  }

  export type LocationOrderByWithRelationInput = {
    id?: SortOrder
    city?: SortOrder
    country?: SortOrder
    venue?: SortOrderInput | SortOrder
    events?: EventOrderByRelationAggregateInput
  }

  export type LocationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LocationWhereInput | LocationWhereInput[]
    OR?: LocationWhereInput[]
    NOT?: LocationWhereInput | LocationWhereInput[]
    city?: StringFilter<"Location"> | string
    country?: StringFilter<"Location"> | string
    venue?: StringNullableFilter<"Location"> | string | null
    events?: EventListRelationFilter
  }, "id">

  export type LocationOrderByWithAggregationInput = {
    id?: SortOrder
    city?: SortOrder
    country?: SortOrder
    venue?: SortOrderInput | SortOrder
    _count?: LocationCountOrderByAggregateInput
    _max?: LocationMaxOrderByAggregateInput
    _min?: LocationMinOrderByAggregateInput
  }

  export type LocationScalarWhereWithAggregatesInput = {
    AND?: LocationScalarWhereWithAggregatesInput | LocationScalarWhereWithAggregatesInput[]
    OR?: LocationScalarWhereWithAggregatesInput[]
    NOT?: LocationScalarWhereWithAggregatesInput | LocationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Location"> | string
    city?: StringWithAggregatesFilter<"Location"> | string
    country?: StringWithAggregatesFilter<"Location"> | string
    venue?: StringNullableWithAggregatesFilter<"Location"> | string | null
  }

  export type EventImageWhereInput = {
    AND?: EventImageWhereInput | EventImageWhereInput[]
    OR?: EventImageWhereInput[]
    NOT?: EventImageWhereInput | EventImageWhereInput[]
    id?: StringFilter<"EventImage"> | string
    banner?: StringNullableFilter<"EventImage"> | string | null
    thumbnail?: StringNullableFilter<"EventImage"> | string | null
    eventId?: StringFilter<"EventImage"> | string
    event?: XOR<EventScalarRelationFilter, EventWhereInput>
  }

  export type EventImageOrderByWithRelationInput = {
    id?: SortOrder
    banner?: SortOrderInput | SortOrder
    thumbnail?: SortOrderInput | SortOrder
    eventId?: SortOrder
    event?: EventOrderByWithRelationInput
  }

  export type EventImageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    eventId?: string
    AND?: EventImageWhereInput | EventImageWhereInput[]
    OR?: EventImageWhereInput[]
    NOT?: EventImageWhereInput | EventImageWhereInput[]
    banner?: StringNullableFilter<"EventImage"> | string | null
    thumbnail?: StringNullableFilter<"EventImage"> | string | null
    event?: XOR<EventScalarRelationFilter, EventWhereInput>
  }, "id" | "eventId">

  export type EventImageOrderByWithAggregationInput = {
    id?: SortOrder
    banner?: SortOrderInput | SortOrder
    thumbnail?: SortOrderInput | SortOrder
    eventId?: SortOrder
    _count?: EventImageCountOrderByAggregateInput
    _max?: EventImageMaxOrderByAggregateInput
    _min?: EventImageMinOrderByAggregateInput
  }

  export type EventImageScalarWhereWithAggregatesInput = {
    AND?: EventImageScalarWhereWithAggregatesInput | EventImageScalarWhereWithAggregatesInput[]
    OR?: EventImageScalarWhereWithAggregatesInput[]
    NOT?: EventImageScalarWhereWithAggregatesInput | EventImageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EventImage"> | string
    banner?: StringNullableWithAggregatesFilter<"EventImage"> | string | null
    thumbnail?: StringNullableWithAggregatesFilter<"EventImage"> | string | null
    eventId?: StringWithAggregatesFilter<"EventImage"> | string
  }

  export type EventAttendeeWhereInput = {
    AND?: EventAttendeeWhereInput | EventAttendeeWhereInput[]
    OR?: EventAttendeeWhereInput[]
    NOT?: EventAttendeeWhereInput | EventAttendeeWhereInput[]
    id?: StringFilter<"EventAttendee"> | string
    status?: EnumAttendeeStatusFilter<"EventAttendee"> | $Enums.AttendeeStatus
    registeredAt?: DateTimeFilter<"EventAttendee"> | Date | string
    userId?: StringFilter<"EventAttendee"> | string
    eventId?: StringFilter<"EventAttendee"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    event?: XOR<EventScalarRelationFilter, EventWhereInput>
  }

  export type EventAttendeeOrderByWithRelationInput = {
    id?: SortOrder
    status?: SortOrder
    registeredAt?: SortOrder
    userId?: SortOrder
    eventId?: SortOrder
    user?: UserOrderByWithRelationInput
    event?: EventOrderByWithRelationInput
  }

  export type EventAttendeeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_eventId?: EventAttendeeUserIdEventIdCompoundUniqueInput
    AND?: EventAttendeeWhereInput | EventAttendeeWhereInput[]
    OR?: EventAttendeeWhereInput[]
    NOT?: EventAttendeeWhereInput | EventAttendeeWhereInput[]
    status?: EnumAttendeeStatusFilter<"EventAttendee"> | $Enums.AttendeeStatus
    registeredAt?: DateTimeFilter<"EventAttendee"> | Date | string
    userId?: StringFilter<"EventAttendee"> | string
    eventId?: StringFilter<"EventAttendee"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    event?: XOR<EventScalarRelationFilter, EventWhereInput>
  }, "id" | "userId_eventId">

  export type EventAttendeeOrderByWithAggregationInput = {
    id?: SortOrder
    status?: SortOrder
    registeredAt?: SortOrder
    userId?: SortOrder
    eventId?: SortOrder
    _count?: EventAttendeeCountOrderByAggregateInput
    _max?: EventAttendeeMaxOrderByAggregateInput
    _min?: EventAttendeeMinOrderByAggregateInput
  }

  export type EventAttendeeScalarWhereWithAggregatesInput = {
    AND?: EventAttendeeScalarWhereWithAggregatesInput | EventAttendeeScalarWhereWithAggregatesInput[]
    OR?: EventAttendeeScalarWhereWithAggregatesInput[]
    NOT?: EventAttendeeScalarWhereWithAggregatesInput | EventAttendeeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EventAttendee"> | string
    status?: EnumAttendeeStatusWithAggregatesFilter<"EventAttendee"> | $Enums.AttendeeStatus
    registeredAt?: DateTimeWithAggregatesFilter<"EventAttendee"> | Date | string
    userId?: StringWithAggregatesFilter<"EventAttendee"> | string
    eventId?: StringWithAggregatesFilter<"EventAttendee"> | string
  }

  export type ConferenceDayWhereInput = {
    AND?: ConferenceDayWhereInput | ConferenceDayWhereInput[]
    OR?: ConferenceDayWhereInput[]
    NOT?: ConferenceDayWhereInput | ConferenceDayWhereInput[]
    id?: StringFilter<"ConferenceDay"> | string
    date?: DateTimeFilter<"ConferenceDay"> | Date | string
    sortOrder?: IntFilter<"ConferenceDay"> | number
    eventId?: StringFilter<"ConferenceDay"> | string
    event?: XOR<EventScalarRelationFilter, EventWhereInput>
    sections?: SectionListRelationFilter
  }

  export type ConferenceDayOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    sortOrder?: SortOrder
    eventId?: SortOrder
    event?: EventOrderByWithRelationInput
    sections?: SectionOrderByRelationAggregateInput
  }

  export type ConferenceDayWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    eventId_date?: ConferenceDayEventIdDateCompoundUniqueInput
    AND?: ConferenceDayWhereInput | ConferenceDayWhereInput[]
    OR?: ConferenceDayWhereInput[]
    NOT?: ConferenceDayWhereInput | ConferenceDayWhereInput[]
    date?: DateTimeFilter<"ConferenceDay"> | Date | string
    sortOrder?: IntFilter<"ConferenceDay"> | number
    eventId?: StringFilter<"ConferenceDay"> | string
    event?: XOR<EventScalarRelationFilter, EventWhereInput>
    sections?: SectionListRelationFilter
  }, "id" | "eventId_date">

  export type ConferenceDayOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    sortOrder?: SortOrder
    eventId?: SortOrder
    _count?: ConferenceDayCountOrderByAggregateInput
    _avg?: ConferenceDayAvgOrderByAggregateInput
    _max?: ConferenceDayMaxOrderByAggregateInput
    _min?: ConferenceDayMinOrderByAggregateInput
    _sum?: ConferenceDaySumOrderByAggregateInput
  }

  export type ConferenceDayScalarWhereWithAggregatesInput = {
    AND?: ConferenceDayScalarWhereWithAggregatesInput | ConferenceDayScalarWhereWithAggregatesInput[]
    OR?: ConferenceDayScalarWhereWithAggregatesInput[]
    NOT?: ConferenceDayScalarWhereWithAggregatesInput | ConferenceDayScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ConferenceDay"> | string
    date?: DateTimeWithAggregatesFilter<"ConferenceDay"> | Date | string
    sortOrder?: IntWithAggregatesFilter<"ConferenceDay"> | number
    eventId?: StringWithAggregatesFilter<"ConferenceDay"> | string
  }

  export type SectionWhereInput = {
    AND?: SectionWhereInput | SectionWhereInput[]
    OR?: SectionWhereInput[]
    NOT?: SectionWhereInput | SectionWhereInput[]
    id?: StringFilter<"Section"> | string
    title?: StringFilter<"Section"> | string
    description?: StringNullableFilter<"Section"> | string | null
    sortOrder?: IntFilter<"Section"> | number
    startTime?: DateTimeFilter<"Section"> | Date | string
    endTime?: DateTimeFilter<"Section"> | Date | string
    dayId?: StringFilter<"Section"> | string
    day?: XOR<ConferenceDayScalarRelationFilter, ConferenceDayWhereInput>
    presentations?: PresentationListRelationFilter
    breaks?: BreakListRelationFilter
  }

  export type SectionOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    sortOrder?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    dayId?: SortOrder
    day?: ConferenceDayOrderByWithRelationInput
    presentations?: PresentationOrderByRelationAggregateInput
    breaks?: BreakOrderByRelationAggregateInput
  }

  export type SectionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SectionWhereInput | SectionWhereInput[]
    OR?: SectionWhereInput[]
    NOT?: SectionWhereInput | SectionWhereInput[]
    title?: StringFilter<"Section"> | string
    description?: StringNullableFilter<"Section"> | string | null
    sortOrder?: IntFilter<"Section"> | number
    startTime?: DateTimeFilter<"Section"> | Date | string
    endTime?: DateTimeFilter<"Section"> | Date | string
    dayId?: StringFilter<"Section"> | string
    day?: XOR<ConferenceDayScalarRelationFilter, ConferenceDayWhereInput>
    presentations?: PresentationListRelationFilter
    breaks?: BreakListRelationFilter
  }, "id">

  export type SectionOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    sortOrder?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    dayId?: SortOrder
    _count?: SectionCountOrderByAggregateInput
    _avg?: SectionAvgOrderByAggregateInput
    _max?: SectionMaxOrderByAggregateInput
    _min?: SectionMinOrderByAggregateInput
    _sum?: SectionSumOrderByAggregateInput
  }

  export type SectionScalarWhereWithAggregatesInput = {
    AND?: SectionScalarWhereWithAggregatesInput | SectionScalarWhereWithAggregatesInput[]
    OR?: SectionScalarWhereWithAggregatesInput[]
    NOT?: SectionScalarWhereWithAggregatesInput | SectionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Section"> | string
    title?: StringWithAggregatesFilter<"Section"> | string
    description?: StringNullableWithAggregatesFilter<"Section"> | string | null
    sortOrder?: IntWithAggregatesFilter<"Section"> | number
    startTime?: DateTimeWithAggregatesFilter<"Section"> | Date | string
    endTime?: DateTimeWithAggregatesFilter<"Section"> | Date | string
    dayId?: StringWithAggregatesFilter<"Section"> | string
  }

  export type PresentationWhereInput = {
    AND?: PresentationWhereInput | PresentationWhereInput[]
    OR?: PresentationWhereInput[]
    NOT?: PresentationWhereInput | PresentationWhereInput[]
    id?: StringFilter<"Presentation"> | string
    title?: StringFilter<"Presentation"> | string
    abstract?: StringFilter<"Presentation"> | string
    durationMin?: IntFilter<"Presentation"> | number
    keywords?: StringNullableListFilter<"Presentation">
    status?: EnumPresentationStatusFilter<"Presentation"> | $Enums.PresentationStatus
    submissionType?: EnumSubmissionTypeFilter<"Presentation"> | $Enums.SubmissionType
    sortOrder?: IntFilter<"Presentation"> | number
    startTime?: DateTimeNullableFilter<"Presentation"> | Date | string | null
    endTime?: DateTimeNullableFilter<"Presentation"> | Date | string | null
    sectionId?: StringFilter<"Presentation"> | string
    viewCount?: IntFilter<"Presentation"> | number
    createdAt?: DateTimeFilter<"Presentation"> | Date | string
    updatedAt?: DateTimeFilter<"Presentation"> | Date | string
    submittedAt?: DateTimeNullableFilter<"Presentation"> | Date | string | null
    section?: XOR<SectionScalarRelationFilter, SectionWhereInput>
    metrics?: XOR<PresentationMetricsNullableScalarRelationFilter, PresentationMetricsWhereInput> | null
    authors?: PresentationAuthorListRelationFilter
    materials?: PresentationMaterialListRelationFilter
    favorites?: FavoriteListRelationFilter
  }

  export type PresentationOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    abstract?: SortOrder
    durationMin?: SortOrder
    keywords?: SortOrder
    status?: SortOrder
    submissionType?: SortOrder
    sortOrder?: SortOrder
    startTime?: SortOrderInput | SortOrder
    endTime?: SortOrderInput | SortOrder
    sectionId?: SortOrder
    viewCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    submittedAt?: SortOrderInput | SortOrder
    section?: SectionOrderByWithRelationInput
    metrics?: PresentationMetricsOrderByWithRelationInput
    authors?: PresentationAuthorOrderByRelationAggregateInput
    materials?: PresentationMaterialOrderByRelationAggregateInput
    favorites?: FavoriteOrderByRelationAggregateInput
  }

  export type PresentationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PresentationWhereInput | PresentationWhereInput[]
    OR?: PresentationWhereInput[]
    NOT?: PresentationWhereInput | PresentationWhereInput[]
    title?: StringFilter<"Presentation"> | string
    abstract?: StringFilter<"Presentation"> | string
    durationMin?: IntFilter<"Presentation"> | number
    keywords?: StringNullableListFilter<"Presentation">
    status?: EnumPresentationStatusFilter<"Presentation"> | $Enums.PresentationStatus
    submissionType?: EnumSubmissionTypeFilter<"Presentation"> | $Enums.SubmissionType
    sortOrder?: IntFilter<"Presentation"> | number
    startTime?: DateTimeNullableFilter<"Presentation"> | Date | string | null
    endTime?: DateTimeNullableFilter<"Presentation"> | Date | string | null
    sectionId?: StringFilter<"Presentation"> | string
    viewCount?: IntFilter<"Presentation"> | number
    createdAt?: DateTimeFilter<"Presentation"> | Date | string
    updatedAt?: DateTimeFilter<"Presentation"> | Date | string
    submittedAt?: DateTimeNullableFilter<"Presentation"> | Date | string | null
    section?: XOR<SectionScalarRelationFilter, SectionWhereInput>
    metrics?: XOR<PresentationMetricsNullableScalarRelationFilter, PresentationMetricsWhereInput> | null
    authors?: PresentationAuthorListRelationFilter
    materials?: PresentationMaterialListRelationFilter
    favorites?: FavoriteListRelationFilter
  }, "id">

  export type PresentationOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    abstract?: SortOrder
    durationMin?: SortOrder
    keywords?: SortOrder
    status?: SortOrder
    submissionType?: SortOrder
    sortOrder?: SortOrder
    startTime?: SortOrderInput | SortOrder
    endTime?: SortOrderInput | SortOrder
    sectionId?: SortOrder
    viewCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    submittedAt?: SortOrderInput | SortOrder
    _count?: PresentationCountOrderByAggregateInput
    _avg?: PresentationAvgOrderByAggregateInput
    _max?: PresentationMaxOrderByAggregateInput
    _min?: PresentationMinOrderByAggregateInput
    _sum?: PresentationSumOrderByAggregateInput
  }

  export type PresentationScalarWhereWithAggregatesInput = {
    AND?: PresentationScalarWhereWithAggregatesInput | PresentationScalarWhereWithAggregatesInput[]
    OR?: PresentationScalarWhereWithAggregatesInput[]
    NOT?: PresentationScalarWhereWithAggregatesInput | PresentationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Presentation"> | string
    title?: StringWithAggregatesFilter<"Presentation"> | string
    abstract?: StringWithAggregatesFilter<"Presentation"> | string
    durationMin?: IntWithAggregatesFilter<"Presentation"> | number
    keywords?: StringNullableListFilter<"Presentation">
    status?: EnumPresentationStatusWithAggregatesFilter<"Presentation"> | $Enums.PresentationStatus
    submissionType?: EnumSubmissionTypeWithAggregatesFilter<"Presentation"> | $Enums.SubmissionType
    sortOrder?: IntWithAggregatesFilter<"Presentation"> | number
    startTime?: DateTimeNullableWithAggregatesFilter<"Presentation"> | Date | string | null
    endTime?: DateTimeNullableWithAggregatesFilter<"Presentation"> | Date | string | null
    sectionId?: StringWithAggregatesFilter<"Presentation"> | string
    viewCount?: IntWithAggregatesFilter<"Presentation"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Presentation"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Presentation"> | Date | string
    submittedAt?: DateTimeNullableWithAggregatesFilter<"Presentation"> | Date | string | null
  }

  export type PresentationAuthorWhereInput = {
    AND?: PresentationAuthorWhereInput | PresentationAuthorWhereInput[]
    OR?: PresentationAuthorWhereInput[]
    NOT?: PresentationAuthorWhereInput | PresentationAuthorWhereInput[]
    id?: StringFilter<"PresentationAuthor"> | string
    userId?: StringFilter<"PresentationAuthor"> | string
    presentationId?: StringFilter<"PresentationAuthor"> | string
    affiliationId?: StringNullableFilter<"PresentationAuthor"> | string | null
    isCorrespondingAuthor?: BoolFilter<"PresentationAuthor"> | boolean
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    presentation?: XOR<PresentationScalarRelationFilter, PresentationWhereInput>
    affiliation?: XOR<AffiliationNullableScalarRelationFilter, AffiliationWhereInput> | null
  }

  export type PresentationAuthorOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    presentationId?: SortOrder
    affiliationId?: SortOrderInput | SortOrder
    isCorrespondingAuthor?: SortOrder
    user?: UserOrderByWithRelationInput
    presentation?: PresentationOrderByWithRelationInput
    affiliation?: AffiliationOrderByWithRelationInput
  }

  export type PresentationAuthorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_presentationId?: PresentationAuthorUserIdPresentationIdCompoundUniqueInput
    AND?: PresentationAuthorWhereInput | PresentationAuthorWhereInput[]
    OR?: PresentationAuthorWhereInput[]
    NOT?: PresentationAuthorWhereInput | PresentationAuthorWhereInput[]
    userId?: StringFilter<"PresentationAuthor"> | string
    presentationId?: StringFilter<"PresentationAuthor"> | string
    affiliationId?: StringNullableFilter<"PresentationAuthor"> | string | null
    isCorrespondingAuthor?: BoolFilter<"PresentationAuthor"> | boolean
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    presentation?: XOR<PresentationScalarRelationFilter, PresentationWhereInput>
    affiliation?: XOR<AffiliationNullableScalarRelationFilter, AffiliationWhereInput> | null
  }, "id" | "userId_presentationId">

  export type PresentationAuthorOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    presentationId?: SortOrder
    affiliationId?: SortOrderInput | SortOrder
    isCorrespondingAuthor?: SortOrder
    _count?: PresentationAuthorCountOrderByAggregateInput
    _max?: PresentationAuthorMaxOrderByAggregateInput
    _min?: PresentationAuthorMinOrderByAggregateInput
  }

  export type PresentationAuthorScalarWhereWithAggregatesInput = {
    AND?: PresentationAuthorScalarWhereWithAggregatesInput | PresentationAuthorScalarWhereWithAggregatesInput[]
    OR?: PresentationAuthorScalarWhereWithAggregatesInput[]
    NOT?: PresentationAuthorScalarWhereWithAggregatesInput | PresentationAuthorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PresentationAuthor"> | string
    userId?: StringWithAggregatesFilter<"PresentationAuthor"> | string
    presentationId?: StringWithAggregatesFilter<"PresentationAuthor"> | string
    affiliationId?: StringNullableWithAggregatesFilter<"PresentationAuthor"> | string | null
    isCorrespondingAuthor?: BoolWithAggregatesFilter<"PresentationAuthor"> | boolean
  }

  export type AffiliationWhereInput = {
    AND?: AffiliationWhereInput | AffiliationWhereInput[]
    OR?: AffiliationWhereInput[]
    NOT?: AffiliationWhereInput | AffiliationWhereInput[]
    id?: StringFilter<"Affiliation"> | string
    name?: StringFilter<"Affiliation"> | string
    country?: StringNullableFilter<"Affiliation"> | string | null
    authors?: PresentationAuthorListRelationFilter
  }

  export type AffiliationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    country?: SortOrderInput | SortOrder
    authors?: PresentationAuthorOrderByRelationAggregateInput
  }

  export type AffiliationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: AffiliationWhereInput | AffiliationWhereInput[]
    OR?: AffiliationWhereInput[]
    NOT?: AffiliationWhereInput | AffiliationWhereInput[]
    country?: StringNullableFilter<"Affiliation"> | string | null
    authors?: PresentationAuthorListRelationFilter
  }, "id" | "name">

  export type AffiliationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    country?: SortOrderInput | SortOrder
    _count?: AffiliationCountOrderByAggregateInput
    _max?: AffiliationMaxOrderByAggregateInput
    _min?: AffiliationMinOrderByAggregateInput
  }

  export type AffiliationScalarWhereWithAggregatesInput = {
    AND?: AffiliationScalarWhereWithAggregatesInput | AffiliationScalarWhereWithAggregatesInput[]
    OR?: AffiliationScalarWhereWithAggregatesInput[]
    NOT?: AffiliationScalarWhereWithAggregatesInput | AffiliationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Affiliation"> | string
    name?: StringWithAggregatesFilter<"Affiliation"> | string
    country?: StringNullableWithAggregatesFilter<"Affiliation"> | string | null
  }

  export type PresentationMaterialWhereInput = {
    AND?: PresentationMaterialWhereInput | PresentationMaterialWhereInput[]
    OR?: PresentationMaterialWhereInput[]
    NOT?: PresentationMaterialWhereInput | PresentationMaterialWhereInput[]
    id?: StringFilter<"PresentationMaterial"> | string
    fileUrl?: StringFilter<"PresentationMaterial"> | string
    fileType?: EnumMaterialTypeFilter<"PresentationMaterial"> | $Enums.MaterialType
    label?: StringNullableFilter<"PresentationMaterial"> | string | null
    presentationId?: StringFilter<"PresentationMaterial"> | string
    uploadedAt?: DateTimeFilter<"PresentationMaterial"> | Date | string
    presentation?: XOR<PresentationScalarRelationFilter, PresentationWhereInput>
  }

  export type PresentationMaterialOrderByWithRelationInput = {
    id?: SortOrder
    fileUrl?: SortOrder
    fileType?: SortOrder
    label?: SortOrderInput | SortOrder
    presentationId?: SortOrder
    uploadedAt?: SortOrder
    presentation?: PresentationOrderByWithRelationInput
  }

  export type PresentationMaterialWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PresentationMaterialWhereInput | PresentationMaterialWhereInput[]
    OR?: PresentationMaterialWhereInput[]
    NOT?: PresentationMaterialWhereInput | PresentationMaterialWhereInput[]
    fileUrl?: StringFilter<"PresentationMaterial"> | string
    fileType?: EnumMaterialTypeFilter<"PresentationMaterial"> | $Enums.MaterialType
    label?: StringNullableFilter<"PresentationMaterial"> | string | null
    presentationId?: StringFilter<"PresentationMaterial"> | string
    uploadedAt?: DateTimeFilter<"PresentationMaterial"> | Date | string
    presentation?: XOR<PresentationScalarRelationFilter, PresentationWhereInput>
  }, "id">

  export type PresentationMaterialOrderByWithAggregationInput = {
    id?: SortOrder
    fileUrl?: SortOrder
    fileType?: SortOrder
    label?: SortOrderInput | SortOrder
    presentationId?: SortOrder
    uploadedAt?: SortOrder
    _count?: PresentationMaterialCountOrderByAggregateInput
    _max?: PresentationMaterialMaxOrderByAggregateInput
    _min?: PresentationMaterialMinOrderByAggregateInput
  }

  export type PresentationMaterialScalarWhereWithAggregatesInput = {
    AND?: PresentationMaterialScalarWhereWithAggregatesInput | PresentationMaterialScalarWhereWithAggregatesInput[]
    OR?: PresentationMaterialScalarWhereWithAggregatesInput[]
    NOT?: PresentationMaterialScalarWhereWithAggregatesInput | PresentationMaterialScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PresentationMaterial"> | string
    fileUrl?: StringWithAggregatesFilter<"PresentationMaterial"> | string
    fileType?: EnumMaterialTypeWithAggregatesFilter<"PresentationMaterial"> | $Enums.MaterialType
    label?: StringNullableWithAggregatesFilter<"PresentationMaterial"> | string | null
    presentationId?: StringWithAggregatesFilter<"PresentationMaterial"> | string
    uploadedAt?: DateTimeWithAggregatesFilter<"PresentationMaterial"> | Date | string
  }

  export type BreakWhereInput = {
    AND?: BreakWhereInput | BreakWhereInput[]
    OR?: BreakWhereInput[]
    NOT?: BreakWhereInput | BreakWhereInput[]
    id?: StringFilter<"Break"> | string
    title?: StringFilter<"Break"> | string
    description?: StringNullableFilter<"Break"> | string | null
    startTime?: DateTimeFilter<"Break"> | Date | string
    endTime?: DateTimeFilter<"Break"> | Date | string
    sectionId?: StringFilter<"Break"> | string
    section?: XOR<SectionScalarRelationFilter, SectionWhereInput>
  }

  export type BreakOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    sectionId?: SortOrder
    section?: SectionOrderByWithRelationInput
  }

  export type BreakWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BreakWhereInput | BreakWhereInput[]
    OR?: BreakWhereInput[]
    NOT?: BreakWhereInput | BreakWhereInput[]
    title?: StringFilter<"Break"> | string
    description?: StringNullableFilter<"Break"> | string | null
    startTime?: DateTimeFilter<"Break"> | Date | string
    endTime?: DateTimeFilter<"Break"> | Date | string
    sectionId?: StringFilter<"Break"> | string
    section?: XOR<SectionScalarRelationFilter, SectionWhereInput>
  }, "id">

  export type BreakOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    sectionId?: SortOrder
    _count?: BreakCountOrderByAggregateInput
    _max?: BreakMaxOrderByAggregateInput
    _min?: BreakMinOrderByAggregateInput
  }

  export type BreakScalarWhereWithAggregatesInput = {
    AND?: BreakScalarWhereWithAggregatesInput | BreakScalarWhereWithAggregatesInput[]
    OR?: BreakScalarWhereWithAggregatesInput[]
    NOT?: BreakScalarWhereWithAggregatesInput | BreakScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Break"> | string
    title?: StringWithAggregatesFilter<"Break"> | string
    description?: StringNullableWithAggregatesFilter<"Break"> | string | null
    startTime?: DateTimeWithAggregatesFilter<"Break"> | Date | string
    endTime?: DateTimeWithAggregatesFilter<"Break"> | Date | string
    sectionId?: StringWithAggregatesFilter<"Break"> | string
  }

  export type FavoriteWhereInput = {
    AND?: FavoriteWhereInput | FavoriteWhereInput[]
    OR?: FavoriteWhereInput[]
    NOT?: FavoriteWhereInput | FavoriteWhereInput[]
    id?: StringFilter<"Favorite"> | string
    userId?: StringFilter<"Favorite"> | string
    presentationId?: StringFilter<"Favorite"> | string
    createdAt?: DateTimeFilter<"Favorite"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    presentation?: XOR<PresentationScalarRelationFilter, PresentationWhereInput>
  }

  export type FavoriteOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    presentationId?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    presentation?: PresentationOrderByWithRelationInput
  }

  export type FavoriteWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_presentationId?: FavoriteUserIdPresentationIdCompoundUniqueInput
    AND?: FavoriteWhereInput | FavoriteWhereInput[]
    OR?: FavoriteWhereInput[]
    NOT?: FavoriteWhereInput | FavoriteWhereInput[]
    userId?: StringFilter<"Favorite"> | string
    presentationId?: StringFilter<"Favorite"> | string
    createdAt?: DateTimeFilter<"Favorite"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    presentation?: XOR<PresentationScalarRelationFilter, PresentationWhereInput>
  }, "id" | "userId_presentationId">

  export type FavoriteOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    presentationId?: SortOrder
    createdAt?: SortOrder
    _count?: FavoriteCountOrderByAggregateInput
    _max?: FavoriteMaxOrderByAggregateInput
    _min?: FavoriteMinOrderByAggregateInput
  }

  export type FavoriteScalarWhereWithAggregatesInput = {
    AND?: FavoriteScalarWhereWithAggregatesInput | FavoriteScalarWhereWithAggregatesInput[]
    OR?: FavoriteScalarWhereWithAggregatesInput[]
    NOT?: FavoriteScalarWhereWithAggregatesInput | FavoriteScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Favorite"> | string
    userId?: StringWithAggregatesFilter<"Favorite"> | string
    presentationId?: StringWithAggregatesFilter<"Favorite"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Favorite"> | Date | string
  }

  export type AdminActionLogWhereInput = {
    AND?: AdminActionLogWhereInput | AdminActionLogWhereInput[]
    OR?: AdminActionLogWhereInput[]
    NOT?: AdminActionLogWhereInput | AdminActionLogWhereInput[]
    id?: StringFilter<"AdminActionLog"> | string
    adminId?: StringFilter<"AdminActionLog"> | string
    organizerId?: StringFilter<"AdminActionLog"> | string
    action?: StringFilter<"AdminActionLog"> | string
    targetModel?: StringFilter<"AdminActionLog"> | string
    targetId?: StringFilter<"AdminActionLog"> | string
    reason?: StringNullableFilter<"AdminActionLog"> | string | null
    timestamp?: DateTimeFilter<"AdminActionLog"> | Date | string
    admin?: XOR<UserScalarRelationFilter, UserWhereInput>
    organizer?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AdminActionLogOrderByWithRelationInput = {
    id?: SortOrder
    adminId?: SortOrder
    organizerId?: SortOrder
    action?: SortOrder
    targetModel?: SortOrder
    targetId?: SortOrder
    reason?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    admin?: UserOrderByWithRelationInput
    organizer?: UserOrderByWithRelationInput
  }

  export type AdminActionLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AdminActionLogWhereInput | AdminActionLogWhereInput[]
    OR?: AdminActionLogWhereInput[]
    NOT?: AdminActionLogWhereInput | AdminActionLogWhereInput[]
    adminId?: StringFilter<"AdminActionLog"> | string
    organizerId?: StringFilter<"AdminActionLog"> | string
    action?: StringFilter<"AdminActionLog"> | string
    targetModel?: StringFilter<"AdminActionLog"> | string
    targetId?: StringFilter<"AdminActionLog"> | string
    reason?: StringNullableFilter<"AdminActionLog"> | string | null
    timestamp?: DateTimeFilter<"AdminActionLog"> | Date | string
    admin?: XOR<UserScalarRelationFilter, UserWhereInput>
    organizer?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type AdminActionLogOrderByWithAggregationInput = {
    id?: SortOrder
    adminId?: SortOrder
    organizerId?: SortOrder
    action?: SortOrder
    targetModel?: SortOrder
    targetId?: SortOrder
    reason?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    _count?: AdminActionLogCountOrderByAggregateInput
    _max?: AdminActionLogMaxOrderByAggregateInput
    _min?: AdminActionLogMinOrderByAggregateInput
  }

  export type AdminActionLogScalarWhereWithAggregatesInput = {
    AND?: AdminActionLogScalarWhereWithAggregatesInput | AdminActionLogScalarWhereWithAggregatesInput[]
    OR?: AdminActionLogScalarWhereWithAggregatesInput[]
    NOT?: AdminActionLogScalarWhereWithAggregatesInput | AdminActionLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AdminActionLog"> | string
    adminId?: StringWithAggregatesFilter<"AdminActionLog"> | string
    organizerId?: StringWithAggregatesFilter<"AdminActionLog"> | string
    action?: StringWithAggregatesFilter<"AdminActionLog"> | string
    targetModel?: StringWithAggregatesFilter<"AdminActionLog"> | string
    targetId?: StringWithAggregatesFilter<"AdminActionLog"> | string
    reason?: StringNullableWithAggregatesFilter<"AdminActionLog"> | string | null
    timestamp?: DateTimeWithAggregatesFilter<"AdminActionLog"> | Date | string
  }

  export type UserProfileWhereInput = {
    AND?: UserProfileWhereInput | UserProfileWhereInput[]
    OR?: UserProfileWhereInput[]
    NOT?: UserProfileWhereInput | UserProfileWhereInput[]
    id?: StringFilter<"UserProfile"> | string
    userId?: StringFilter<"UserProfile"> | string
    fullName?: StringFilter<"UserProfile"> | string
    bio?: StringNullableFilter<"UserProfile"> | string | null
    institution?: StringNullableFilter<"UserProfile"> | string | null
    photoUrl?: StringNullableFilter<"UserProfile"> | string | null
    createdAt?: DateTimeFilter<"UserProfile"> | Date | string
    updatedAt?: DateTimeFilter<"UserProfile"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type UserProfileOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    fullName?: SortOrder
    bio?: SortOrderInput | SortOrder
    institution?: SortOrderInput | SortOrder
    photoUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: UserProfileWhereInput | UserProfileWhereInput[]
    OR?: UserProfileWhereInput[]
    NOT?: UserProfileWhereInput | UserProfileWhereInput[]
    fullName?: StringFilter<"UserProfile"> | string
    bio?: StringNullableFilter<"UserProfile"> | string | null
    institution?: StringNullableFilter<"UserProfile"> | string | null
    photoUrl?: StringNullableFilter<"UserProfile"> | string | null
    createdAt?: DateTimeFilter<"UserProfile"> | Date | string
    updatedAt?: DateTimeFilter<"UserProfile"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type UserProfileOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    fullName?: SortOrder
    bio?: SortOrderInput | SortOrder
    institution?: SortOrderInput | SortOrder
    photoUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserProfileCountOrderByAggregateInput
    _max?: UserProfileMaxOrderByAggregateInput
    _min?: UserProfileMinOrderByAggregateInput
  }

  export type UserProfileScalarWhereWithAggregatesInput = {
    AND?: UserProfileScalarWhereWithAggregatesInput | UserProfileScalarWhereWithAggregatesInput[]
    OR?: UserProfileScalarWhereWithAggregatesInput[]
    NOT?: UserProfileScalarWhereWithAggregatesInput | UserProfileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserProfile"> | string
    userId?: StringWithAggregatesFilter<"UserProfile"> | string
    fullName?: StringWithAggregatesFilter<"UserProfile"> | string
    bio?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    institution?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    photoUrl?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"UserProfile"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserProfile"> | Date | string
  }

  export type ConferenceRegistrationWhereInput = {
    AND?: ConferenceRegistrationWhereInput | ConferenceRegistrationWhereInput[]
    OR?: ConferenceRegistrationWhereInput[]
    NOT?: ConferenceRegistrationWhereInput | ConferenceRegistrationWhereInput[]
    id?: StringFilter<"ConferenceRegistration"> | string
    userId?: StringFilter<"ConferenceRegistration"> | string
    eventId?: StringFilter<"ConferenceRegistration"> | string
    registeredAt?: DateTimeFilter<"ConferenceRegistration"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    event?: XOR<EventScalarRelationFilter, EventWhereInput>
  }

  export type ConferenceRegistrationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    eventId?: SortOrder
    registeredAt?: SortOrder
    user?: UserOrderByWithRelationInput
    event?: EventOrderByWithRelationInput
  }

  export type ConferenceRegistrationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_eventId?: ConferenceRegistrationUserIdEventIdCompoundUniqueInput
    AND?: ConferenceRegistrationWhereInput | ConferenceRegistrationWhereInput[]
    OR?: ConferenceRegistrationWhereInput[]
    NOT?: ConferenceRegistrationWhereInput | ConferenceRegistrationWhereInput[]
    userId?: StringFilter<"ConferenceRegistration"> | string
    eventId?: StringFilter<"ConferenceRegistration"> | string
    registeredAt?: DateTimeFilter<"ConferenceRegistration"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    event?: XOR<EventScalarRelationFilter, EventWhereInput>
  }, "id" | "userId_eventId">

  export type ConferenceRegistrationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    eventId?: SortOrder
    registeredAt?: SortOrder
    _count?: ConferenceRegistrationCountOrderByAggregateInput
    _max?: ConferenceRegistrationMaxOrderByAggregateInput
    _min?: ConferenceRegistrationMinOrderByAggregateInput
  }

  export type ConferenceRegistrationScalarWhereWithAggregatesInput = {
    AND?: ConferenceRegistrationScalarWhereWithAggregatesInput | ConferenceRegistrationScalarWhereWithAggregatesInput[]
    OR?: ConferenceRegistrationScalarWhereWithAggregatesInput[]
    NOT?: ConferenceRegistrationScalarWhereWithAggregatesInput | ConferenceRegistrationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ConferenceRegistration"> | string
    userId?: StringWithAggregatesFilter<"ConferenceRegistration"> | string
    eventId?: StringWithAggregatesFilter<"ConferenceRegistration"> | string
    registeredAt?: DateTimeWithAggregatesFilter<"ConferenceRegistration"> | Date | string
  }

  export type PresentationMetricsWhereInput = {
    AND?: PresentationMetricsWhereInput | PresentationMetricsWhereInput[]
    OR?: PresentationMetricsWhereInput[]
    NOT?: PresentationMetricsWhereInput | PresentationMetricsWhereInput[]
    id?: StringFilter<"PresentationMetrics"> | string
    presentationId?: StringFilter<"PresentationMetrics"> | string
    viewCount?: IntFilter<"PresentationMetrics"> | number
    lastViewedAt?: DateTimeNullableFilter<"PresentationMetrics"> | Date | string | null
    updatedAt?: DateTimeFilter<"PresentationMetrics"> | Date | string
    presentation?: XOR<PresentationScalarRelationFilter, PresentationWhereInput>
  }

  export type PresentationMetricsOrderByWithRelationInput = {
    id?: SortOrder
    presentationId?: SortOrder
    viewCount?: SortOrder
    lastViewedAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    presentation?: PresentationOrderByWithRelationInput
  }

  export type PresentationMetricsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    presentationId?: string
    AND?: PresentationMetricsWhereInput | PresentationMetricsWhereInput[]
    OR?: PresentationMetricsWhereInput[]
    NOT?: PresentationMetricsWhereInput | PresentationMetricsWhereInput[]
    viewCount?: IntFilter<"PresentationMetrics"> | number
    lastViewedAt?: DateTimeNullableFilter<"PresentationMetrics"> | Date | string | null
    updatedAt?: DateTimeFilter<"PresentationMetrics"> | Date | string
    presentation?: XOR<PresentationScalarRelationFilter, PresentationWhereInput>
  }, "id" | "presentationId">

  export type PresentationMetricsOrderByWithAggregationInput = {
    id?: SortOrder
    presentationId?: SortOrder
    viewCount?: SortOrder
    lastViewedAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    _count?: PresentationMetricsCountOrderByAggregateInput
    _avg?: PresentationMetricsAvgOrderByAggregateInput
    _max?: PresentationMetricsMaxOrderByAggregateInput
    _min?: PresentationMetricsMinOrderByAggregateInput
    _sum?: PresentationMetricsSumOrderByAggregateInput
  }

  export type PresentationMetricsScalarWhereWithAggregatesInput = {
    AND?: PresentationMetricsScalarWhereWithAggregatesInput | PresentationMetricsScalarWhereWithAggregatesInput[]
    OR?: PresentationMetricsScalarWhereWithAggregatesInput[]
    NOT?: PresentationMetricsScalarWhereWithAggregatesInput | PresentationMetricsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PresentationMetrics"> | string
    presentationId?: StringWithAggregatesFilter<"PresentationMetrics"> | string
    viewCount?: IntWithAggregatesFilter<"PresentationMetrics"> | number
    lastViewedAt?: DateTimeNullableWithAggregatesFilter<"PresentationMetrics"> | Date | string | null
    updatedAt?: DateTimeWithAggregatesFilter<"PresentationMetrics"> | Date | string
  }

  export type RefreshTokenWhereInput = {
    AND?: RefreshTokenWhereInput | RefreshTokenWhereInput[]
    OR?: RefreshTokenWhereInput[]
    NOT?: RefreshTokenWhereInput | RefreshTokenWhereInput[]
    id?: StringFilter<"RefreshToken"> | string
    token?: StringFilter<"RefreshToken"> | string
    userId?: StringFilter<"RefreshToken"> | string
    expiresAt?: DateTimeFilter<"RefreshToken"> | Date | string
    createdAt?: DateTimeFilter<"RefreshToken"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type RefreshTokenOrderByWithRelationInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type RefreshTokenWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    AND?: RefreshTokenWhereInput | RefreshTokenWhereInput[]
    OR?: RefreshTokenWhereInput[]
    NOT?: RefreshTokenWhereInput | RefreshTokenWhereInput[]
    userId?: StringFilter<"RefreshToken"> | string
    expiresAt?: DateTimeFilter<"RefreshToken"> | Date | string
    createdAt?: DateTimeFilter<"RefreshToken"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "token">

  export type RefreshTokenOrderByWithAggregationInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    _count?: RefreshTokenCountOrderByAggregateInput
    _max?: RefreshTokenMaxOrderByAggregateInput
    _min?: RefreshTokenMinOrderByAggregateInput
  }

  export type RefreshTokenScalarWhereWithAggregatesInput = {
    AND?: RefreshTokenScalarWhereWithAggregatesInput | RefreshTokenScalarWhereWithAggregatesInput[]
    OR?: RefreshTokenScalarWhereWithAggregatesInput[]
    NOT?: RefreshTokenScalarWhereWithAggregatesInput | RefreshTokenScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RefreshToken"> | string
    token?: StringWithAggregatesFilter<"RefreshToken"> | string
    userId?: StringWithAggregatesFilter<"RefreshToken"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"RefreshToken"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"RefreshToken"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    logo?: string | null
    profile?: UserProfileCreateNestedOneWithoutUserInput
    organizedEvents?: EventCreateNestedManyWithoutOrganizerInput
    attendedEvents?: EventAttendeeCreateNestedManyWithoutUserInput
    favorites?: FavoriteCreateNestedManyWithoutUserInput
    authoredPresentations?: PresentationAuthorCreateNestedManyWithoutUserInput
    adminActionsTaken?: AdminActionLogCreateNestedManyWithoutAdminInput
    adminLogsAsOrganizer?: AdminActionLogCreateNestedManyWithoutOrganizerInput
    conferenceRegistrations?: ConferenceRegistrationCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    logo?: string | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    organizedEvents?: EventUncheckedCreateNestedManyWithoutOrganizerInput
    attendedEvents?: EventAttendeeUncheckedCreateNestedManyWithoutUserInput
    favorites?: FavoriteUncheckedCreateNestedManyWithoutUserInput
    authoredPresentations?: PresentationAuthorUncheckedCreateNestedManyWithoutUserInput
    adminActionsTaken?: AdminActionLogUncheckedCreateNestedManyWithoutAdminInput
    adminLogsAsOrganizer?: AdminActionLogUncheckedCreateNestedManyWithoutOrganizerInput
    conferenceRegistrations?: ConferenceRegistrationUncheckedCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    organizedEvents?: EventUpdateManyWithoutOrganizerNestedInput
    attendedEvents?: EventAttendeeUpdateManyWithoutUserNestedInput
    favorites?: FavoriteUpdateManyWithoutUserNestedInput
    authoredPresentations?: PresentationAuthorUpdateManyWithoutUserNestedInput
    adminActionsTaken?: AdminActionLogUpdateManyWithoutAdminNestedInput
    adminLogsAsOrganizer?: AdminActionLogUpdateManyWithoutOrganizerNestedInput
    conferenceRegistrations?: ConferenceRegistrationUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    organizedEvents?: EventUncheckedUpdateManyWithoutOrganizerNestedInput
    attendedEvents?: EventAttendeeUncheckedUpdateManyWithoutUserNestedInput
    favorites?: FavoriteUncheckedUpdateManyWithoutUserNestedInput
    authoredPresentations?: PresentationAuthorUncheckedUpdateManyWithoutUserNestedInput
    adminActionsTaken?: AdminActionLogUncheckedUpdateManyWithoutAdminNestedInput
    adminLogsAsOrganizer?: AdminActionLogUncheckedUpdateManyWithoutOrganizerNestedInput
    conferenceRegistrations?: ConferenceRegistrationUncheckedUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    logo?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CategoryCreateInput = {
    id?: string
    name: string
    slug: string
    description?: string | null
    color?: string
    isActive?: boolean
    createdAt?: Date | string
    events?: EventCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: string
    name: string
    slug: string
    description?: string | null
    color?: string
    isActive?: boolean
    createdAt?: Date | string
    events?: EventUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryCreateManyInput = {
    id?: string
    name: string
    slug: string
    description?: string | null
    color?: string
    isActive?: boolean
    createdAt?: Date | string
  }

  export type CategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventCreateInput = {
    id?: string
    title: string
    description: string
    startDate: Date | string
    endDate: Date | string
    slug: string
    status?: $Enums.EventStatus
    isFeatured?: boolean
    maxCapacity?: number
    isEducational?: boolean
    viewCount?: number
    attendeeCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    location: LocationCreateNestedOneWithoutEventsInput
    images?: EventImageCreateNestedOneWithoutEventInput
    organizer: UserCreateNestedOneWithoutOrganizedEventsInput
    category: CategoryCreateNestedOneWithoutEventsInput
    attendees?: EventAttendeeCreateNestedManyWithoutEventInput
    days?: ConferenceDayCreateNestedManyWithoutEventInput
    registrations?: ConferenceRegistrationCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateInput = {
    id?: string
    title: string
    description: string
    startDate: Date | string
    endDate: Date | string
    slug: string
    status?: $Enums.EventStatus
    isFeatured?: boolean
    locationId: string
    maxCapacity?: number
    isEducational?: boolean
    organizerId: string
    categoryId: string
    viewCount?: number
    attendeeCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: EventImageUncheckedCreateNestedOneWithoutEventInput
    attendees?: EventAttendeeUncheckedCreateNestedManyWithoutEventInput
    days?: ConferenceDayUncheckedCreateNestedManyWithoutEventInput
    registrations?: ConferenceRegistrationUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    isFeatured?: BoolFieldUpdateOperationsInput | boolean
    maxCapacity?: IntFieldUpdateOperationsInput | number
    isEducational?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    attendeeCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: LocationUpdateOneRequiredWithoutEventsNestedInput
    images?: EventImageUpdateOneWithoutEventNestedInput
    organizer?: UserUpdateOneRequiredWithoutOrganizedEventsNestedInput
    category?: CategoryUpdateOneRequiredWithoutEventsNestedInput
    attendees?: EventAttendeeUpdateManyWithoutEventNestedInput
    days?: ConferenceDayUpdateManyWithoutEventNestedInput
    registrations?: ConferenceRegistrationUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    isFeatured?: BoolFieldUpdateOperationsInput | boolean
    locationId?: StringFieldUpdateOperationsInput | string
    maxCapacity?: IntFieldUpdateOperationsInput | number
    isEducational?: BoolFieldUpdateOperationsInput | boolean
    organizerId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    viewCount?: IntFieldUpdateOperationsInput | number
    attendeeCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: EventImageUncheckedUpdateOneWithoutEventNestedInput
    attendees?: EventAttendeeUncheckedUpdateManyWithoutEventNestedInput
    days?: ConferenceDayUncheckedUpdateManyWithoutEventNestedInput
    registrations?: ConferenceRegistrationUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EventCreateManyInput = {
    id?: string
    title: string
    description: string
    startDate: Date | string
    endDate: Date | string
    slug: string
    status?: $Enums.EventStatus
    isFeatured?: boolean
    locationId: string
    maxCapacity?: number
    isEducational?: boolean
    organizerId: string
    categoryId: string
    viewCount?: number
    attendeeCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EventUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    isFeatured?: BoolFieldUpdateOperationsInput | boolean
    maxCapacity?: IntFieldUpdateOperationsInput | number
    isEducational?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    attendeeCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    isFeatured?: BoolFieldUpdateOperationsInput | boolean
    locationId?: StringFieldUpdateOperationsInput | string
    maxCapacity?: IntFieldUpdateOperationsInput | number
    isEducational?: BoolFieldUpdateOperationsInput | boolean
    organizerId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    viewCount?: IntFieldUpdateOperationsInput | number
    attendeeCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationCreateInput = {
    id?: string
    city: string
    country: string
    venue?: string | null
    events?: EventCreateNestedManyWithoutLocationInput
  }

  export type LocationUncheckedCreateInput = {
    id?: string
    city: string
    country: string
    venue?: string | null
    events?: EventUncheckedCreateNestedManyWithoutLocationInput
  }

  export type LocationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    events?: EventUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    events?: EventUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type LocationCreateManyInput = {
    id?: string
    city: string
    country: string
    venue?: string | null
  }

  export type LocationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    venue?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LocationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    venue?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EventImageCreateInput = {
    id?: string
    banner?: string | null
    thumbnail?: string | null
    event: EventCreateNestedOneWithoutImagesInput
  }

  export type EventImageUncheckedCreateInput = {
    id?: string
    banner?: string | null
    thumbnail?: string | null
    eventId: string
  }

  export type EventImageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    event?: EventUpdateOneRequiredWithoutImagesNestedInput
  }

  export type EventImageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    eventId?: StringFieldUpdateOperationsInput | string
  }

  export type EventImageCreateManyInput = {
    id?: string
    banner?: string | null
    thumbnail?: string | null
    eventId: string
  }

  export type EventImageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EventImageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    eventId?: StringFieldUpdateOperationsInput | string
  }

  export type EventAttendeeCreateInput = {
    id?: string
    status?: $Enums.AttendeeStatus
    registeredAt?: Date | string
    user: UserCreateNestedOneWithoutAttendedEventsInput
    event: EventCreateNestedOneWithoutAttendeesInput
  }

  export type EventAttendeeUncheckedCreateInput = {
    id?: string
    status?: $Enums.AttendeeStatus
    registeredAt?: Date | string
    userId: string
    eventId: string
  }

  export type EventAttendeeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumAttendeeStatusFieldUpdateOperationsInput | $Enums.AttendeeStatus
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAttendedEventsNestedInput
    event?: EventUpdateOneRequiredWithoutAttendeesNestedInput
  }

  export type EventAttendeeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumAttendeeStatusFieldUpdateOperationsInput | $Enums.AttendeeStatus
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
  }

  export type EventAttendeeCreateManyInput = {
    id?: string
    status?: $Enums.AttendeeStatus
    registeredAt?: Date | string
    userId: string
    eventId: string
  }

  export type EventAttendeeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumAttendeeStatusFieldUpdateOperationsInput | $Enums.AttendeeStatus
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventAttendeeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumAttendeeStatusFieldUpdateOperationsInput | $Enums.AttendeeStatus
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
  }

  export type ConferenceDayCreateInput = {
    id?: string
    date: Date | string
    sortOrder: number
    event: EventCreateNestedOneWithoutDaysInput
    sections?: SectionCreateNestedManyWithoutDayInput
  }

  export type ConferenceDayUncheckedCreateInput = {
    id?: string
    date: Date | string
    sortOrder: number
    eventId: string
    sections?: SectionUncheckedCreateNestedManyWithoutDayInput
  }

  export type ConferenceDayUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    event?: EventUpdateOneRequiredWithoutDaysNestedInput
    sections?: SectionUpdateManyWithoutDayNestedInput
  }

  export type ConferenceDayUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    eventId?: StringFieldUpdateOperationsInput | string
    sections?: SectionUncheckedUpdateManyWithoutDayNestedInput
  }

  export type ConferenceDayCreateManyInput = {
    id?: string
    date: Date | string
    sortOrder: number
    eventId: string
  }

  export type ConferenceDayUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    sortOrder?: IntFieldUpdateOperationsInput | number
  }

  export type ConferenceDayUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    eventId?: StringFieldUpdateOperationsInput | string
  }

  export type SectionCreateInput = {
    id?: string
    title: string
    description?: string | null
    sortOrder: number
    startTime: Date | string
    endTime: Date | string
    day: ConferenceDayCreateNestedOneWithoutSectionsInput
    presentations?: PresentationCreateNestedManyWithoutSectionInput
    breaks?: BreakCreateNestedManyWithoutSectionInput
  }

  export type SectionUncheckedCreateInput = {
    id?: string
    title: string
    description?: string | null
    sortOrder: number
    startTime: Date | string
    endTime: Date | string
    dayId: string
    presentations?: PresentationUncheckedCreateNestedManyWithoutSectionInput
    breaks?: BreakUncheckedCreateNestedManyWithoutSectionInput
  }

  export type SectionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    day?: ConferenceDayUpdateOneRequiredWithoutSectionsNestedInput
    presentations?: PresentationUpdateManyWithoutSectionNestedInput
    breaks?: BreakUpdateManyWithoutSectionNestedInput
  }

  export type SectionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    dayId?: StringFieldUpdateOperationsInput | string
    presentations?: PresentationUncheckedUpdateManyWithoutSectionNestedInput
    breaks?: BreakUncheckedUpdateManyWithoutSectionNestedInput
  }

  export type SectionCreateManyInput = {
    id?: string
    title: string
    description?: string | null
    sortOrder: number
    startTime: Date | string
    endTime: Date | string
    dayId: string
  }

  export type SectionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SectionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    dayId?: StringFieldUpdateOperationsInput | string
  }

  export type PresentationCreateInput = {
    id?: string
    title: string
    abstract: string
    durationMin: number
    keywords?: PresentationCreatekeywordsInput | string[]
    status?: $Enums.PresentationStatus
    submissionType: $Enums.SubmissionType
    sortOrder: number
    startTime?: Date | string | null
    endTime?: Date | string | null
    viewCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    submittedAt?: Date | string | null
    section: SectionCreateNestedOneWithoutPresentationsInput
    metrics?: PresentationMetricsCreateNestedOneWithoutPresentationInput
    authors?: PresentationAuthorCreateNestedManyWithoutPresentationInput
    materials?: PresentationMaterialCreateNestedManyWithoutPresentationInput
    favorites?: FavoriteCreateNestedManyWithoutPresentationInput
  }

  export type PresentationUncheckedCreateInput = {
    id?: string
    title: string
    abstract: string
    durationMin: number
    keywords?: PresentationCreatekeywordsInput | string[]
    status?: $Enums.PresentationStatus
    submissionType: $Enums.SubmissionType
    sortOrder: number
    startTime?: Date | string | null
    endTime?: Date | string | null
    sectionId: string
    viewCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    submittedAt?: Date | string | null
    metrics?: PresentationMetricsUncheckedCreateNestedOneWithoutPresentationInput
    authors?: PresentationAuthorUncheckedCreateNestedManyWithoutPresentationInput
    materials?: PresentationMaterialUncheckedCreateNestedManyWithoutPresentationInput
    favorites?: FavoriteUncheckedCreateNestedManyWithoutPresentationInput
  }

  export type PresentationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    abstract?: StringFieldUpdateOperationsInput | string
    durationMin?: IntFieldUpdateOperationsInput | number
    keywords?: PresentationUpdatekeywordsInput | string[]
    status?: EnumPresentationStatusFieldUpdateOperationsInput | $Enums.PresentationStatus
    submissionType?: EnumSubmissionTypeFieldUpdateOperationsInput | $Enums.SubmissionType
    sortOrder?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    viewCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    section?: SectionUpdateOneRequiredWithoutPresentationsNestedInput
    metrics?: PresentationMetricsUpdateOneWithoutPresentationNestedInput
    authors?: PresentationAuthorUpdateManyWithoutPresentationNestedInput
    materials?: PresentationMaterialUpdateManyWithoutPresentationNestedInput
    favorites?: FavoriteUpdateManyWithoutPresentationNestedInput
  }

  export type PresentationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    abstract?: StringFieldUpdateOperationsInput | string
    durationMin?: IntFieldUpdateOperationsInput | number
    keywords?: PresentationUpdatekeywordsInput | string[]
    status?: EnumPresentationStatusFieldUpdateOperationsInput | $Enums.PresentationStatus
    submissionType?: EnumSubmissionTypeFieldUpdateOperationsInput | $Enums.SubmissionType
    sortOrder?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sectionId?: StringFieldUpdateOperationsInput | string
    viewCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metrics?: PresentationMetricsUncheckedUpdateOneWithoutPresentationNestedInput
    authors?: PresentationAuthorUncheckedUpdateManyWithoutPresentationNestedInput
    materials?: PresentationMaterialUncheckedUpdateManyWithoutPresentationNestedInput
    favorites?: FavoriteUncheckedUpdateManyWithoutPresentationNestedInput
  }

  export type PresentationCreateManyInput = {
    id?: string
    title: string
    abstract: string
    durationMin: number
    keywords?: PresentationCreatekeywordsInput | string[]
    status?: $Enums.PresentationStatus
    submissionType: $Enums.SubmissionType
    sortOrder: number
    startTime?: Date | string | null
    endTime?: Date | string | null
    sectionId: string
    viewCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    submittedAt?: Date | string | null
  }

  export type PresentationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    abstract?: StringFieldUpdateOperationsInput | string
    durationMin?: IntFieldUpdateOperationsInput | number
    keywords?: PresentationUpdatekeywordsInput | string[]
    status?: EnumPresentationStatusFieldUpdateOperationsInput | $Enums.PresentationStatus
    submissionType?: EnumSubmissionTypeFieldUpdateOperationsInput | $Enums.SubmissionType
    sortOrder?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    viewCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PresentationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    abstract?: StringFieldUpdateOperationsInput | string
    durationMin?: IntFieldUpdateOperationsInput | number
    keywords?: PresentationUpdatekeywordsInput | string[]
    status?: EnumPresentationStatusFieldUpdateOperationsInput | $Enums.PresentationStatus
    submissionType?: EnumSubmissionTypeFieldUpdateOperationsInput | $Enums.SubmissionType
    sortOrder?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sectionId?: StringFieldUpdateOperationsInput | string
    viewCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PresentationAuthorCreateInput = {
    id?: string
    isCorrespondingAuthor?: boolean
    user: UserCreateNestedOneWithoutAuthoredPresentationsInput
    presentation: PresentationCreateNestedOneWithoutAuthorsInput
    affiliation?: AffiliationCreateNestedOneWithoutAuthorsInput
  }

  export type PresentationAuthorUncheckedCreateInput = {
    id?: string
    userId: string
    presentationId: string
    affiliationId?: string | null
    isCorrespondingAuthor?: boolean
  }

  export type PresentationAuthorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    isCorrespondingAuthor?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutAuthoredPresentationsNestedInput
    presentation?: PresentationUpdateOneRequiredWithoutAuthorsNestedInput
    affiliation?: AffiliationUpdateOneWithoutAuthorsNestedInput
  }

  export type PresentationAuthorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    presentationId?: StringFieldUpdateOperationsInput | string
    affiliationId?: NullableStringFieldUpdateOperationsInput | string | null
    isCorrespondingAuthor?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PresentationAuthorCreateManyInput = {
    id?: string
    userId: string
    presentationId: string
    affiliationId?: string | null
    isCorrespondingAuthor?: boolean
  }

  export type PresentationAuthorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    isCorrespondingAuthor?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PresentationAuthorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    presentationId?: StringFieldUpdateOperationsInput | string
    affiliationId?: NullableStringFieldUpdateOperationsInput | string | null
    isCorrespondingAuthor?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AffiliationCreateInput = {
    id?: string
    name: string
    country?: string | null
    authors?: PresentationAuthorCreateNestedManyWithoutAffiliationInput
  }

  export type AffiliationUncheckedCreateInput = {
    id?: string
    name: string
    country?: string | null
    authors?: PresentationAuthorUncheckedCreateNestedManyWithoutAffiliationInput
  }

  export type AffiliationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    country?: NullableStringFieldUpdateOperationsInput | string | null
    authors?: PresentationAuthorUpdateManyWithoutAffiliationNestedInput
  }

  export type AffiliationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    country?: NullableStringFieldUpdateOperationsInput | string | null
    authors?: PresentationAuthorUncheckedUpdateManyWithoutAffiliationNestedInput
  }

  export type AffiliationCreateManyInput = {
    id?: string
    name: string
    country?: string | null
  }

  export type AffiliationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    country?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AffiliationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    country?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PresentationMaterialCreateInput = {
    id?: string
    fileUrl: string
    fileType: $Enums.MaterialType
    label?: string | null
    uploadedAt?: Date | string
    presentation: PresentationCreateNestedOneWithoutMaterialsInput
  }

  export type PresentationMaterialUncheckedCreateInput = {
    id?: string
    fileUrl: string
    fileType: $Enums.MaterialType
    label?: string | null
    presentationId: string
    uploadedAt?: Date | string
  }

  export type PresentationMaterialUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileType?: EnumMaterialTypeFieldUpdateOperationsInput | $Enums.MaterialType
    label?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    presentation?: PresentationUpdateOneRequiredWithoutMaterialsNestedInput
  }

  export type PresentationMaterialUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileType?: EnumMaterialTypeFieldUpdateOperationsInput | $Enums.MaterialType
    label?: NullableStringFieldUpdateOperationsInput | string | null
    presentationId?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PresentationMaterialCreateManyInput = {
    id?: string
    fileUrl: string
    fileType: $Enums.MaterialType
    label?: string | null
    presentationId: string
    uploadedAt?: Date | string
  }

  export type PresentationMaterialUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileType?: EnumMaterialTypeFieldUpdateOperationsInput | $Enums.MaterialType
    label?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PresentationMaterialUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileType?: EnumMaterialTypeFieldUpdateOperationsInput | $Enums.MaterialType
    label?: NullableStringFieldUpdateOperationsInput | string | null
    presentationId?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BreakCreateInput = {
    id?: string
    title: string
    description?: string | null
    startTime: Date | string
    endTime: Date | string
    section: SectionCreateNestedOneWithoutBreaksInput
  }

  export type BreakUncheckedCreateInput = {
    id?: string
    title: string
    description?: string | null
    startTime: Date | string
    endTime: Date | string
    sectionId: string
  }

  export type BreakUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    section?: SectionUpdateOneRequiredWithoutBreaksNestedInput
  }

  export type BreakUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    sectionId?: StringFieldUpdateOperationsInput | string
  }

  export type BreakCreateManyInput = {
    id?: string
    title: string
    description?: string | null
    startTime: Date | string
    endTime: Date | string
    sectionId: string
  }

  export type BreakUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BreakUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    sectionId?: StringFieldUpdateOperationsInput | string
  }

  export type FavoriteCreateInput = {
    id?: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutFavoritesInput
    presentation: PresentationCreateNestedOneWithoutFavoritesInput
  }

  export type FavoriteUncheckedCreateInput = {
    id?: string
    userId: string
    presentationId: string
    createdAt?: Date | string
  }

  export type FavoriteUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFavoritesNestedInput
    presentation?: PresentationUpdateOneRequiredWithoutFavoritesNestedInput
  }

  export type FavoriteUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    presentationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteCreateManyInput = {
    id?: string
    userId: string
    presentationId: string
    createdAt?: Date | string
  }

  export type FavoriteUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    presentationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminActionLogCreateInput = {
    id?: string
    action: string
    targetModel: string
    targetId: string
    reason?: string | null
    timestamp?: Date | string
    admin: UserCreateNestedOneWithoutAdminActionsTakenInput
    organizer: UserCreateNestedOneWithoutAdminLogsAsOrganizerInput
  }

  export type AdminActionLogUncheckedCreateInput = {
    id?: string
    adminId: string
    organizerId: string
    action: string
    targetModel: string
    targetId: string
    reason?: string | null
    timestamp?: Date | string
  }

  export type AdminActionLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    targetModel?: StringFieldUpdateOperationsInput | string
    targetId?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    admin?: UserUpdateOneRequiredWithoutAdminActionsTakenNestedInput
    organizer?: UserUpdateOneRequiredWithoutAdminLogsAsOrganizerNestedInput
  }

  export type AdminActionLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    organizerId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    targetModel?: StringFieldUpdateOperationsInput | string
    targetId?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminActionLogCreateManyInput = {
    id?: string
    adminId: string
    organizerId: string
    action: string
    targetModel: string
    targetId: string
    reason?: string | null
    timestamp?: Date | string
  }

  export type AdminActionLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    targetModel?: StringFieldUpdateOperationsInput | string
    targetId?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminActionLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    organizerId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    targetModel?: StringFieldUpdateOperationsInput | string
    targetId?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProfileCreateInput = {
    id?: string
    fullName: string
    bio?: string | null
    institution?: string | null
    photoUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutProfileInput
  }

  export type UserProfileUncheckedCreateInput = {
    id?: string
    userId: string
    fullName: string
    bio?: string | null
    institution?: string | null
    photoUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserProfileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    institution?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutProfileNestedInput
  }

  export type UserProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    institution?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProfileCreateManyInput = {
    id?: string
    userId: string
    fullName: string
    bio?: string | null
    institution?: string | null
    photoUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserProfileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    institution?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    institution?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConferenceRegistrationCreateInput = {
    id?: string
    registeredAt?: Date | string
    user: UserCreateNestedOneWithoutConferenceRegistrationsInput
    event: EventCreateNestedOneWithoutRegistrationsInput
  }

  export type ConferenceRegistrationUncheckedCreateInput = {
    id?: string
    userId: string
    eventId: string
    registeredAt?: Date | string
  }

  export type ConferenceRegistrationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutConferenceRegistrationsNestedInput
    event?: EventUpdateOneRequiredWithoutRegistrationsNestedInput
  }

  export type ConferenceRegistrationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConferenceRegistrationCreateManyInput = {
    id?: string
    userId: string
    eventId: string
    registeredAt?: Date | string
  }

  export type ConferenceRegistrationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConferenceRegistrationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PresentationMetricsCreateInput = {
    id?: string
    viewCount?: number
    lastViewedAt?: Date | string | null
    updatedAt?: Date | string
    presentation: PresentationCreateNestedOneWithoutMetricsInput
  }

  export type PresentationMetricsUncheckedCreateInput = {
    id?: string
    presentationId: string
    viewCount?: number
    lastViewedAt?: Date | string | null
    updatedAt?: Date | string
  }

  export type PresentationMetricsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    viewCount?: IntFieldUpdateOperationsInput | number
    lastViewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    presentation?: PresentationUpdateOneRequiredWithoutMetricsNestedInput
  }

  export type PresentationMetricsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    presentationId?: StringFieldUpdateOperationsInput | string
    viewCount?: IntFieldUpdateOperationsInput | number
    lastViewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PresentationMetricsCreateManyInput = {
    id?: string
    presentationId: string
    viewCount?: number
    lastViewedAt?: Date | string | null
    updatedAt?: Date | string
  }

  export type PresentationMetricsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    viewCount?: IntFieldUpdateOperationsInput | number
    lastViewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PresentationMetricsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    presentationId?: StringFieldUpdateOperationsInput | string
    viewCount?: IntFieldUpdateOperationsInput | number
    lastViewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefreshTokenCreateInput = {
    id?: string
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutRefreshTokensInput
  }

  export type RefreshTokenUncheckedCreateInput = {
    id?: string
    token: string
    userId: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type RefreshTokenUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRefreshTokensNestedInput
  }

  export type RefreshTokenUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefreshTokenCreateManyInput = {
    id?: string
    token: string
    userId: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type RefreshTokenUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefreshTokenUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type UserProfileNullableScalarRelationFilter = {
    is?: UserProfileWhereInput | null
    isNot?: UserProfileWhereInput | null
  }

  export type EventListRelationFilter = {
    every?: EventWhereInput
    some?: EventWhereInput
    none?: EventWhereInput
  }

  export type EventAttendeeListRelationFilter = {
    every?: EventAttendeeWhereInput
    some?: EventAttendeeWhereInput
    none?: EventAttendeeWhereInput
  }

  export type FavoriteListRelationFilter = {
    every?: FavoriteWhereInput
    some?: FavoriteWhereInput
    none?: FavoriteWhereInput
  }

  export type PresentationAuthorListRelationFilter = {
    every?: PresentationAuthorWhereInput
    some?: PresentationAuthorWhereInput
    none?: PresentationAuthorWhereInput
  }

  export type AdminActionLogListRelationFilter = {
    every?: AdminActionLogWhereInput
    some?: AdminActionLogWhereInput
    none?: AdminActionLogWhereInput
  }

  export type ConferenceRegistrationListRelationFilter = {
    every?: ConferenceRegistrationWhereInput
    some?: ConferenceRegistrationWhereInput
    none?: ConferenceRegistrationWhereInput
  }

  export type RefreshTokenListRelationFilter = {
    every?: RefreshTokenWhereInput
    some?: RefreshTokenWhereInput
    none?: RefreshTokenWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type EventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventAttendeeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FavoriteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PresentationAuthorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AdminActionLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ConferenceRegistrationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RefreshTokenOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    logo?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    logo?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    logo?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    color?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    color?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    color?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumEventStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.EventStatus | EnumEventStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EventStatus[] | ListEnumEventStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EventStatus[] | ListEnumEventStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEventStatusFilter<$PrismaModel> | $Enums.EventStatus
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type LocationScalarRelationFilter = {
    is?: LocationWhereInput
    isNot?: LocationWhereInput
  }

  export type EventImageNullableScalarRelationFilter = {
    is?: EventImageWhereInput | null
    isNot?: EventImageWhereInput | null
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type CategoryScalarRelationFilter = {
    is?: CategoryWhereInput
    isNot?: CategoryWhereInput
  }

  export type ConferenceDayListRelationFilter = {
    every?: ConferenceDayWhereInput
    some?: ConferenceDayWhereInput
    none?: ConferenceDayWhereInput
  }

  export type ConferenceDayOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    slug?: SortOrder
    status?: SortOrder
    isFeatured?: SortOrder
    locationId?: SortOrder
    maxCapacity?: SortOrder
    isEducational?: SortOrder
    organizerId?: SortOrder
    categoryId?: SortOrder
    viewCount?: SortOrder
    attendeeCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EventAvgOrderByAggregateInput = {
    maxCapacity?: SortOrder
    viewCount?: SortOrder
    attendeeCount?: SortOrder
  }

  export type EventMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    slug?: SortOrder
    status?: SortOrder
    isFeatured?: SortOrder
    locationId?: SortOrder
    maxCapacity?: SortOrder
    isEducational?: SortOrder
    organizerId?: SortOrder
    categoryId?: SortOrder
    viewCount?: SortOrder
    attendeeCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EventMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    slug?: SortOrder
    status?: SortOrder
    isFeatured?: SortOrder
    locationId?: SortOrder
    maxCapacity?: SortOrder
    isEducational?: SortOrder
    organizerId?: SortOrder
    categoryId?: SortOrder
    viewCount?: SortOrder
    attendeeCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EventSumOrderByAggregateInput = {
    maxCapacity?: SortOrder
    viewCount?: SortOrder
    attendeeCount?: SortOrder
  }

  export type EnumEventStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EventStatus | EnumEventStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EventStatus[] | ListEnumEventStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EventStatus[] | ListEnumEventStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEventStatusWithAggregatesFilter<$PrismaModel> | $Enums.EventStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEventStatusFilter<$PrismaModel>
    _max?: NestedEnumEventStatusFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type LocationCountOrderByAggregateInput = {
    id?: SortOrder
    city?: SortOrder
    country?: SortOrder
    venue?: SortOrder
  }

  export type LocationMaxOrderByAggregateInput = {
    id?: SortOrder
    city?: SortOrder
    country?: SortOrder
    venue?: SortOrder
  }

  export type LocationMinOrderByAggregateInput = {
    id?: SortOrder
    city?: SortOrder
    country?: SortOrder
    venue?: SortOrder
  }

  export type EventScalarRelationFilter = {
    is?: EventWhereInput
    isNot?: EventWhereInput
  }

  export type EventImageCountOrderByAggregateInput = {
    id?: SortOrder
    banner?: SortOrder
    thumbnail?: SortOrder
    eventId?: SortOrder
  }

  export type EventImageMaxOrderByAggregateInput = {
    id?: SortOrder
    banner?: SortOrder
    thumbnail?: SortOrder
    eventId?: SortOrder
  }

  export type EventImageMinOrderByAggregateInput = {
    id?: SortOrder
    banner?: SortOrder
    thumbnail?: SortOrder
    eventId?: SortOrder
  }

  export type EnumAttendeeStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AttendeeStatus | EnumAttendeeStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AttendeeStatus[] | ListEnumAttendeeStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AttendeeStatus[] | ListEnumAttendeeStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAttendeeStatusFilter<$PrismaModel> | $Enums.AttendeeStatus
  }

  export type EventAttendeeUserIdEventIdCompoundUniqueInput = {
    userId: string
    eventId: string
  }

  export type EventAttendeeCountOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    registeredAt?: SortOrder
    userId?: SortOrder
    eventId?: SortOrder
  }

  export type EventAttendeeMaxOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    registeredAt?: SortOrder
    userId?: SortOrder
    eventId?: SortOrder
  }

  export type EventAttendeeMinOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    registeredAt?: SortOrder
    userId?: SortOrder
    eventId?: SortOrder
  }

  export type EnumAttendeeStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AttendeeStatus | EnumAttendeeStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AttendeeStatus[] | ListEnumAttendeeStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AttendeeStatus[] | ListEnumAttendeeStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAttendeeStatusWithAggregatesFilter<$PrismaModel> | $Enums.AttendeeStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAttendeeStatusFilter<$PrismaModel>
    _max?: NestedEnumAttendeeStatusFilter<$PrismaModel>
  }

  export type SectionListRelationFilter = {
    every?: SectionWhereInput
    some?: SectionWhereInput
    none?: SectionWhereInput
  }

  export type SectionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ConferenceDayEventIdDateCompoundUniqueInput = {
    eventId: string
    date: Date | string
  }

  export type ConferenceDayCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    sortOrder?: SortOrder
    eventId?: SortOrder
  }

  export type ConferenceDayAvgOrderByAggregateInput = {
    sortOrder?: SortOrder
  }

  export type ConferenceDayMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    sortOrder?: SortOrder
    eventId?: SortOrder
  }

  export type ConferenceDayMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    sortOrder?: SortOrder
    eventId?: SortOrder
  }

  export type ConferenceDaySumOrderByAggregateInput = {
    sortOrder?: SortOrder
  }

  export type ConferenceDayScalarRelationFilter = {
    is?: ConferenceDayWhereInput
    isNot?: ConferenceDayWhereInput
  }

  export type PresentationListRelationFilter = {
    every?: PresentationWhereInput
    some?: PresentationWhereInput
    none?: PresentationWhereInput
  }

  export type BreakListRelationFilter = {
    every?: BreakWhereInput
    some?: BreakWhereInput
    none?: BreakWhereInput
  }

  export type PresentationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BreakOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SectionCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    sortOrder?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    dayId?: SortOrder
  }

  export type SectionAvgOrderByAggregateInput = {
    sortOrder?: SortOrder
  }

  export type SectionMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    sortOrder?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    dayId?: SortOrder
  }

  export type SectionMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    sortOrder?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    dayId?: SortOrder
  }

  export type SectionSumOrderByAggregateInput = {
    sortOrder?: SortOrder
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type EnumPresentationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PresentationStatus | EnumPresentationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PresentationStatus[] | ListEnumPresentationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PresentationStatus[] | ListEnumPresentationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPresentationStatusFilter<$PrismaModel> | $Enums.PresentationStatus
  }

  export type EnumSubmissionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.SubmissionType | EnumSubmissionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SubmissionType[] | ListEnumSubmissionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubmissionType[] | ListEnumSubmissionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSubmissionTypeFilter<$PrismaModel> | $Enums.SubmissionType
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type SectionScalarRelationFilter = {
    is?: SectionWhereInput
    isNot?: SectionWhereInput
  }

  export type PresentationMetricsNullableScalarRelationFilter = {
    is?: PresentationMetricsWhereInput | null
    isNot?: PresentationMetricsWhereInput | null
  }

  export type PresentationMaterialListRelationFilter = {
    every?: PresentationMaterialWhereInput
    some?: PresentationMaterialWhereInput
    none?: PresentationMaterialWhereInput
  }

  export type PresentationMaterialOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PresentationCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    abstract?: SortOrder
    durationMin?: SortOrder
    keywords?: SortOrder
    status?: SortOrder
    submissionType?: SortOrder
    sortOrder?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    sectionId?: SortOrder
    viewCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    submittedAt?: SortOrder
  }

  export type PresentationAvgOrderByAggregateInput = {
    durationMin?: SortOrder
    sortOrder?: SortOrder
    viewCount?: SortOrder
  }

  export type PresentationMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    abstract?: SortOrder
    durationMin?: SortOrder
    status?: SortOrder
    submissionType?: SortOrder
    sortOrder?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    sectionId?: SortOrder
    viewCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    submittedAt?: SortOrder
  }

  export type PresentationMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    abstract?: SortOrder
    durationMin?: SortOrder
    status?: SortOrder
    submissionType?: SortOrder
    sortOrder?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    sectionId?: SortOrder
    viewCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    submittedAt?: SortOrder
  }

  export type PresentationSumOrderByAggregateInput = {
    durationMin?: SortOrder
    sortOrder?: SortOrder
    viewCount?: SortOrder
  }

  export type EnumPresentationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PresentationStatus | EnumPresentationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PresentationStatus[] | ListEnumPresentationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PresentationStatus[] | ListEnumPresentationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPresentationStatusWithAggregatesFilter<$PrismaModel> | $Enums.PresentationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPresentationStatusFilter<$PrismaModel>
    _max?: NestedEnumPresentationStatusFilter<$PrismaModel>
  }

  export type EnumSubmissionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SubmissionType | EnumSubmissionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SubmissionType[] | ListEnumSubmissionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubmissionType[] | ListEnumSubmissionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSubmissionTypeWithAggregatesFilter<$PrismaModel> | $Enums.SubmissionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSubmissionTypeFilter<$PrismaModel>
    _max?: NestedEnumSubmissionTypeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type PresentationScalarRelationFilter = {
    is?: PresentationWhereInput
    isNot?: PresentationWhereInput
  }

  export type AffiliationNullableScalarRelationFilter = {
    is?: AffiliationWhereInput | null
    isNot?: AffiliationWhereInput | null
  }

  export type PresentationAuthorUserIdPresentationIdCompoundUniqueInput = {
    userId: string
    presentationId: string
  }

  export type PresentationAuthorCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    presentationId?: SortOrder
    affiliationId?: SortOrder
    isCorrespondingAuthor?: SortOrder
  }

  export type PresentationAuthorMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    presentationId?: SortOrder
    affiliationId?: SortOrder
    isCorrespondingAuthor?: SortOrder
  }

  export type PresentationAuthorMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    presentationId?: SortOrder
    affiliationId?: SortOrder
    isCorrespondingAuthor?: SortOrder
  }

  export type AffiliationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    country?: SortOrder
  }

  export type AffiliationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    country?: SortOrder
  }

  export type AffiliationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    country?: SortOrder
  }

  export type EnumMaterialTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.MaterialType | EnumMaterialTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MaterialType[] | ListEnumMaterialTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MaterialType[] | ListEnumMaterialTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMaterialTypeFilter<$PrismaModel> | $Enums.MaterialType
  }

  export type PresentationMaterialCountOrderByAggregateInput = {
    id?: SortOrder
    fileUrl?: SortOrder
    fileType?: SortOrder
    label?: SortOrder
    presentationId?: SortOrder
    uploadedAt?: SortOrder
  }

  export type PresentationMaterialMaxOrderByAggregateInput = {
    id?: SortOrder
    fileUrl?: SortOrder
    fileType?: SortOrder
    label?: SortOrder
    presentationId?: SortOrder
    uploadedAt?: SortOrder
  }

  export type PresentationMaterialMinOrderByAggregateInput = {
    id?: SortOrder
    fileUrl?: SortOrder
    fileType?: SortOrder
    label?: SortOrder
    presentationId?: SortOrder
    uploadedAt?: SortOrder
  }

  export type EnumMaterialTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MaterialType | EnumMaterialTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MaterialType[] | ListEnumMaterialTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MaterialType[] | ListEnumMaterialTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMaterialTypeWithAggregatesFilter<$PrismaModel> | $Enums.MaterialType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMaterialTypeFilter<$PrismaModel>
    _max?: NestedEnumMaterialTypeFilter<$PrismaModel>
  }

  export type BreakCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    sectionId?: SortOrder
  }

  export type BreakMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    sectionId?: SortOrder
  }

  export type BreakMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    sectionId?: SortOrder
  }

  export type FavoriteUserIdPresentationIdCompoundUniqueInput = {
    userId: string
    presentationId: string
  }

  export type FavoriteCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    presentationId?: SortOrder
    createdAt?: SortOrder
  }

  export type FavoriteMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    presentationId?: SortOrder
    createdAt?: SortOrder
  }

  export type FavoriteMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    presentationId?: SortOrder
    createdAt?: SortOrder
  }

  export type AdminActionLogCountOrderByAggregateInput = {
    id?: SortOrder
    adminId?: SortOrder
    organizerId?: SortOrder
    action?: SortOrder
    targetModel?: SortOrder
    targetId?: SortOrder
    reason?: SortOrder
    timestamp?: SortOrder
  }

  export type AdminActionLogMaxOrderByAggregateInput = {
    id?: SortOrder
    adminId?: SortOrder
    organizerId?: SortOrder
    action?: SortOrder
    targetModel?: SortOrder
    targetId?: SortOrder
    reason?: SortOrder
    timestamp?: SortOrder
  }

  export type AdminActionLogMinOrderByAggregateInput = {
    id?: SortOrder
    adminId?: SortOrder
    organizerId?: SortOrder
    action?: SortOrder
    targetModel?: SortOrder
    targetId?: SortOrder
    reason?: SortOrder
    timestamp?: SortOrder
  }

  export type UserProfileCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    fullName?: SortOrder
    bio?: SortOrder
    institution?: SortOrder
    photoUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    fullName?: SortOrder
    bio?: SortOrder
    institution?: SortOrder
    photoUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserProfileMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    fullName?: SortOrder
    bio?: SortOrder
    institution?: SortOrder
    photoUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ConferenceRegistrationUserIdEventIdCompoundUniqueInput = {
    userId: string
    eventId: string
  }

  export type ConferenceRegistrationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    eventId?: SortOrder
    registeredAt?: SortOrder
  }

  export type ConferenceRegistrationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    eventId?: SortOrder
    registeredAt?: SortOrder
  }

  export type ConferenceRegistrationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    eventId?: SortOrder
    registeredAt?: SortOrder
  }

  export type PresentationMetricsCountOrderByAggregateInput = {
    id?: SortOrder
    presentationId?: SortOrder
    viewCount?: SortOrder
    lastViewedAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PresentationMetricsAvgOrderByAggregateInput = {
    viewCount?: SortOrder
  }

  export type PresentationMetricsMaxOrderByAggregateInput = {
    id?: SortOrder
    presentationId?: SortOrder
    viewCount?: SortOrder
    lastViewedAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PresentationMetricsMinOrderByAggregateInput = {
    id?: SortOrder
    presentationId?: SortOrder
    viewCount?: SortOrder
    lastViewedAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PresentationMetricsSumOrderByAggregateInput = {
    viewCount?: SortOrder
  }

  export type RefreshTokenCountOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type RefreshTokenMaxOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type RefreshTokenMinOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type UserProfileCreateNestedOneWithoutUserInput = {
    create?: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutUserInput
    connect?: UserProfileWhereUniqueInput
  }

  export type EventCreateNestedManyWithoutOrganizerInput = {
    create?: XOR<EventCreateWithoutOrganizerInput, EventUncheckedCreateWithoutOrganizerInput> | EventCreateWithoutOrganizerInput[] | EventUncheckedCreateWithoutOrganizerInput[]
    connectOrCreate?: EventCreateOrConnectWithoutOrganizerInput | EventCreateOrConnectWithoutOrganizerInput[]
    createMany?: EventCreateManyOrganizerInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type EventAttendeeCreateNestedManyWithoutUserInput = {
    create?: XOR<EventAttendeeCreateWithoutUserInput, EventAttendeeUncheckedCreateWithoutUserInput> | EventAttendeeCreateWithoutUserInput[] | EventAttendeeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventAttendeeCreateOrConnectWithoutUserInput | EventAttendeeCreateOrConnectWithoutUserInput[]
    createMany?: EventAttendeeCreateManyUserInputEnvelope
    connect?: EventAttendeeWhereUniqueInput | EventAttendeeWhereUniqueInput[]
  }

  export type FavoriteCreateNestedManyWithoutUserInput = {
    create?: XOR<FavoriteCreateWithoutUserInput, FavoriteUncheckedCreateWithoutUserInput> | FavoriteCreateWithoutUserInput[] | FavoriteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteCreateOrConnectWithoutUserInput | FavoriteCreateOrConnectWithoutUserInput[]
    createMany?: FavoriteCreateManyUserInputEnvelope
    connect?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
  }

  export type PresentationAuthorCreateNestedManyWithoutUserInput = {
    create?: XOR<PresentationAuthorCreateWithoutUserInput, PresentationAuthorUncheckedCreateWithoutUserInput> | PresentationAuthorCreateWithoutUserInput[] | PresentationAuthorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PresentationAuthorCreateOrConnectWithoutUserInput | PresentationAuthorCreateOrConnectWithoutUserInput[]
    createMany?: PresentationAuthorCreateManyUserInputEnvelope
    connect?: PresentationAuthorWhereUniqueInput | PresentationAuthorWhereUniqueInput[]
  }

  export type AdminActionLogCreateNestedManyWithoutAdminInput = {
    create?: XOR<AdminActionLogCreateWithoutAdminInput, AdminActionLogUncheckedCreateWithoutAdminInput> | AdminActionLogCreateWithoutAdminInput[] | AdminActionLogUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: AdminActionLogCreateOrConnectWithoutAdminInput | AdminActionLogCreateOrConnectWithoutAdminInput[]
    createMany?: AdminActionLogCreateManyAdminInputEnvelope
    connect?: AdminActionLogWhereUniqueInput | AdminActionLogWhereUniqueInput[]
  }

  export type AdminActionLogCreateNestedManyWithoutOrganizerInput = {
    create?: XOR<AdminActionLogCreateWithoutOrganizerInput, AdminActionLogUncheckedCreateWithoutOrganizerInput> | AdminActionLogCreateWithoutOrganizerInput[] | AdminActionLogUncheckedCreateWithoutOrganizerInput[]
    connectOrCreate?: AdminActionLogCreateOrConnectWithoutOrganizerInput | AdminActionLogCreateOrConnectWithoutOrganizerInput[]
    createMany?: AdminActionLogCreateManyOrganizerInputEnvelope
    connect?: AdminActionLogWhereUniqueInput | AdminActionLogWhereUniqueInput[]
  }

  export type ConferenceRegistrationCreateNestedManyWithoutUserInput = {
    create?: XOR<ConferenceRegistrationCreateWithoutUserInput, ConferenceRegistrationUncheckedCreateWithoutUserInput> | ConferenceRegistrationCreateWithoutUserInput[] | ConferenceRegistrationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ConferenceRegistrationCreateOrConnectWithoutUserInput | ConferenceRegistrationCreateOrConnectWithoutUserInput[]
    createMany?: ConferenceRegistrationCreateManyUserInputEnvelope
    connect?: ConferenceRegistrationWhereUniqueInput | ConferenceRegistrationWhereUniqueInput[]
  }

  export type RefreshTokenCreateNestedManyWithoutUserInput = {
    create?: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput> | RefreshTokenCreateWithoutUserInput[] | RefreshTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RefreshTokenCreateOrConnectWithoutUserInput | RefreshTokenCreateOrConnectWithoutUserInput[]
    createMany?: RefreshTokenCreateManyUserInputEnvelope
    connect?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
  }

  export type UserProfileUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutUserInput
    connect?: UserProfileWhereUniqueInput
  }

  export type EventUncheckedCreateNestedManyWithoutOrganizerInput = {
    create?: XOR<EventCreateWithoutOrganizerInput, EventUncheckedCreateWithoutOrganizerInput> | EventCreateWithoutOrganizerInput[] | EventUncheckedCreateWithoutOrganizerInput[]
    connectOrCreate?: EventCreateOrConnectWithoutOrganizerInput | EventCreateOrConnectWithoutOrganizerInput[]
    createMany?: EventCreateManyOrganizerInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type EventAttendeeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<EventAttendeeCreateWithoutUserInput, EventAttendeeUncheckedCreateWithoutUserInput> | EventAttendeeCreateWithoutUserInput[] | EventAttendeeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventAttendeeCreateOrConnectWithoutUserInput | EventAttendeeCreateOrConnectWithoutUserInput[]
    createMany?: EventAttendeeCreateManyUserInputEnvelope
    connect?: EventAttendeeWhereUniqueInput | EventAttendeeWhereUniqueInput[]
  }

  export type FavoriteUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FavoriteCreateWithoutUserInput, FavoriteUncheckedCreateWithoutUserInput> | FavoriteCreateWithoutUserInput[] | FavoriteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteCreateOrConnectWithoutUserInput | FavoriteCreateOrConnectWithoutUserInput[]
    createMany?: FavoriteCreateManyUserInputEnvelope
    connect?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
  }

  export type PresentationAuthorUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PresentationAuthorCreateWithoutUserInput, PresentationAuthorUncheckedCreateWithoutUserInput> | PresentationAuthorCreateWithoutUserInput[] | PresentationAuthorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PresentationAuthorCreateOrConnectWithoutUserInput | PresentationAuthorCreateOrConnectWithoutUserInput[]
    createMany?: PresentationAuthorCreateManyUserInputEnvelope
    connect?: PresentationAuthorWhereUniqueInput | PresentationAuthorWhereUniqueInput[]
  }

  export type AdminActionLogUncheckedCreateNestedManyWithoutAdminInput = {
    create?: XOR<AdminActionLogCreateWithoutAdminInput, AdminActionLogUncheckedCreateWithoutAdminInput> | AdminActionLogCreateWithoutAdminInput[] | AdminActionLogUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: AdminActionLogCreateOrConnectWithoutAdminInput | AdminActionLogCreateOrConnectWithoutAdminInput[]
    createMany?: AdminActionLogCreateManyAdminInputEnvelope
    connect?: AdminActionLogWhereUniqueInput | AdminActionLogWhereUniqueInput[]
  }

  export type AdminActionLogUncheckedCreateNestedManyWithoutOrganizerInput = {
    create?: XOR<AdminActionLogCreateWithoutOrganizerInput, AdminActionLogUncheckedCreateWithoutOrganizerInput> | AdminActionLogCreateWithoutOrganizerInput[] | AdminActionLogUncheckedCreateWithoutOrganizerInput[]
    connectOrCreate?: AdminActionLogCreateOrConnectWithoutOrganizerInput | AdminActionLogCreateOrConnectWithoutOrganizerInput[]
    createMany?: AdminActionLogCreateManyOrganizerInputEnvelope
    connect?: AdminActionLogWhereUniqueInput | AdminActionLogWhereUniqueInput[]
  }

  export type ConferenceRegistrationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ConferenceRegistrationCreateWithoutUserInput, ConferenceRegistrationUncheckedCreateWithoutUserInput> | ConferenceRegistrationCreateWithoutUserInput[] | ConferenceRegistrationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ConferenceRegistrationCreateOrConnectWithoutUserInput | ConferenceRegistrationCreateOrConnectWithoutUserInput[]
    createMany?: ConferenceRegistrationCreateManyUserInputEnvelope
    connect?: ConferenceRegistrationWhereUniqueInput | ConferenceRegistrationWhereUniqueInput[]
  }

  export type RefreshTokenUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput> | RefreshTokenCreateWithoutUserInput[] | RefreshTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RefreshTokenCreateOrConnectWithoutUserInput | RefreshTokenCreateOrConnectWithoutUserInput[]
    createMany?: RefreshTokenCreateManyUserInputEnvelope
    connect?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UserProfileUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutUserInput
    upsert?: UserProfileUpsertWithoutUserInput
    disconnect?: UserProfileWhereInput | boolean
    delete?: UserProfileWhereInput | boolean
    connect?: UserProfileWhereUniqueInput
    update?: XOR<XOR<UserProfileUpdateToOneWithWhereWithoutUserInput, UserProfileUpdateWithoutUserInput>, UserProfileUncheckedUpdateWithoutUserInput>
  }

  export type EventUpdateManyWithoutOrganizerNestedInput = {
    create?: XOR<EventCreateWithoutOrganizerInput, EventUncheckedCreateWithoutOrganizerInput> | EventCreateWithoutOrganizerInput[] | EventUncheckedCreateWithoutOrganizerInput[]
    connectOrCreate?: EventCreateOrConnectWithoutOrganizerInput | EventCreateOrConnectWithoutOrganizerInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutOrganizerInput | EventUpsertWithWhereUniqueWithoutOrganizerInput[]
    createMany?: EventCreateManyOrganizerInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutOrganizerInput | EventUpdateWithWhereUniqueWithoutOrganizerInput[]
    updateMany?: EventUpdateManyWithWhereWithoutOrganizerInput | EventUpdateManyWithWhereWithoutOrganizerInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type EventAttendeeUpdateManyWithoutUserNestedInput = {
    create?: XOR<EventAttendeeCreateWithoutUserInput, EventAttendeeUncheckedCreateWithoutUserInput> | EventAttendeeCreateWithoutUserInput[] | EventAttendeeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventAttendeeCreateOrConnectWithoutUserInput | EventAttendeeCreateOrConnectWithoutUserInput[]
    upsert?: EventAttendeeUpsertWithWhereUniqueWithoutUserInput | EventAttendeeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EventAttendeeCreateManyUserInputEnvelope
    set?: EventAttendeeWhereUniqueInput | EventAttendeeWhereUniqueInput[]
    disconnect?: EventAttendeeWhereUniqueInput | EventAttendeeWhereUniqueInput[]
    delete?: EventAttendeeWhereUniqueInput | EventAttendeeWhereUniqueInput[]
    connect?: EventAttendeeWhereUniqueInput | EventAttendeeWhereUniqueInput[]
    update?: EventAttendeeUpdateWithWhereUniqueWithoutUserInput | EventAttendeeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EventAttendeeUpdateManyWithWhereWithoutUserInput | EventAttendeeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EventAttendeeScalarWhereInput | EventAttendeeScalarWhereInput[]
  }

  export type FavoriteUpdateManyWithoutUserNestedInput = {
    create?: XOR<FavoriteCreateWithoutUserInput, FavoriteUncheckedCreateWithoutUserInput> | FavoriteCreateWithoutUserInput[] | FavoriteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteCreateOrConnectWithoutUserInput | FavoriteCreateOrConnectWithoutUserInput[]
    upsert?: FavoriteUpsertWithWhereUniqueWithoutUserInput | FavoriteUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FavoriteCreateManyUserInputEnvelope
    set?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    disconnect?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    delete?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    connect?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    update?: FavoriteUpdateWithWhereUniqueWithoutUserInput | FavoriteUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FavoriteUpdateManyWithWhereWithoutUserInput | FavoriteUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FavoriteScalarWhereInput | FavoriteScalarWhereInput[]
  }

  export type PresentationAuthorUpdateManyWithoutUserNestedInput = {
    create?: XOR<PresentationAuthorCreateWithoutUserInput, PresentationAuthorUncheckedCreateWithoutUserInput> | PresentationAuthorCreateWithoutUserInput[] | PresentationAuthorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PresentationAuthorCreateOrConnectWithoutUserInput | PresentationAuthorCreateOrConnectWithoutUserInput[]
    upsert?: PresentationAuthorUpsertWithWhereUniqueWithoutUserInput | PresentationAuthorUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PresentationAuthorCreateManyUserInputEnvelope
    set?: PresentationAuthorWhereUniqueInput | PresentationAuthorWhereUniqueInput[]
    disconnect?: PresentationAuthorWhereUniqueInput | PresentationAuthorWhereUniqueInput[]
    delete?: PresentationAuthorWhereUniqueInput | PresentationAuthorWhereUniqueInput[]
    connect?: PresentationAuthorWhereUniqueInput | PresentationAuthorWhereUniqueInput[]
    update?: PresentationAuthorUpdateWithWhereUniqueWithoutUserInput | PresentationAuthorUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PresentationAuthorUpdateManyWithWhereWithoutUserInput | PresentationAuthorUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PresentationAuthorScalarWhereInput | PresentationAuthorScalarWhereInput[]
  }

  export type AdminActionLogUpdateManyWithoutAdminNestedInput = {
    create?: XOR<AdminActionLogCreateWithoutAdminInput, AdminActionLogUncheckedCreateWithoutAdminInput> | AdminActionLogCreateWithoutAdminInput[] | AdminActionLogUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: AdminActionLogCreateOrConnectWithoutAdminInput | AdminActionLogCreateOrConnectWithoutAdminInput[]
    upsert?: AdminActionLogUpsertWithWhereUniqueWithoutAdminInput | AdminActionLogUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: AdminActionLogCreateManyAdminInputEnvelope
    set?: AdminActionLogWhereUniqueInput | AdminActionLogWhereUniqueInput[]
    disconnect?: AdminActionLogWhereUniqueInput | AdminActionLogWhereUniqueInput[]
    delete?: AdminActionLogWhereUniqueInput | AdminActionLogWhereUniqueInput[]
    connect?: AdminActionLogWhereUniqueInput | AdminActionLogWhereUniqueInput[]
    update?: AdminActionLogUpdateWithWhereUniqueWithoutAdminInput | AdminActionLogUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: AdminActionLogUpdateManyWithWhereWithoutAdminInput | AdminActionLogUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: AdminActionLogScalarWhereInput | AdminActionLogScalarWhereInput[]
  }

  export type AdminActionLogUpdateManyWithoutOrganizerNestedInput = {
    create?: XOR<AdminActionLogCreateWithoutOrganizerInput, AdminActionLogUncheckedCreateWithoutOrganizerInput> | AdminActionLogCreateWithoutOrganizerInput[] | AdminActionLogUncheckedCreateWithoutOrganizerInput[]
    connectOrCreate?: AdminActionLogCreateOrConnectWithoutOrganizerInput | AdminActionLogCreateOrConnectWithoutOrganizerInput[]
    upsert?: AdminActionLogUpsertWithWhereUniqueWithoutOrganizerInput | AdminActionLogUpsertWithWhereUniqueWithoutOrganizerInput[]
    createMany?: AdminActionLogCreateManyOrganizerInputEnvelope
    set?: AdminActionLogWhereUniqueInput | AdminActionLogWhereUniqueInput[]
    disconnect?: AdminActionLogWhereUniqueInput | AdminActionLogWhereUniqueInput[]
    delete?: AdminActionLogWhereUniqueInput | AdminActionLogWhereUniqueInput[]
    connect?: AdminActionLogWhereUniqueInput | AdminActionLogWhereUniqueInput[]
    update?: AdminActionLogUpdateWithWhereUniqueWithoutOrganizerInput | AdminActionLogUpdateWithWhereUniqueWithoutOrganizerInput[]
    updateMany?: AdminActionLogUpdateManyWithWhereWithoutOrganizerInput | AdminActionLogUpdateManyWithWhereWithoutOrganizerInput[]
    deleteMany?: AdminActionLogScalarWhereInput | AdminActionLogScalarWhereInput[]
  }

  export type ConferenceRegistrationUpdateManyWithoutUserNestedInput = {
    create?: XOR<ConferenceRegistrationCreateWithoutUserInput, ConferenceRegistrationUncheckedCreateWithoutUserInput> | ConferenceRegistrationCreateWithoutUserInput[] | ConferenceRegistrationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ConferenceRegistrationCreateOrConnectWithoutUserInput | ConferenceRegistrationCreateOrConnectWithoutUserInput[]
    upsert?: ConferenceRegistrationUpsertWithWhereUniqueWithoutUserInput | ConferenceRegistrationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ConferenceRegistrationCreateManyUserInputEnvelope
    set?: ConferenceRegistrationWhereUniqueInput | ConferenceRegistrationWhereUniqueInput[]
    disconnect?: ConferenceRegistrationWhereUniqueInput | ConferenceRegistrationWhereUniqueInput[]
    delete?: ConferenceRegistrationWhereUniqueInput | ConferenceRegistrationWhereUniqueInput[]
    connect?: ConferenceRegistrationWhereUniqueInput | ConferenceRegistrationWhereUniqueInput[]
    update?: ConferenceRegistrationUpdateWithWhereUniqueWithoutUserInput | ConferenceRegistrationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ConferenceRegistrationUpdateManyWithWhereWithoutUserInput | ConferenceRegistrationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ConferenceRegistrationScalarWhereInput | ConferenceRegistrationScalarWhereInput[]
  }

  export type RefreshTokenUpdateManyWithoutUserNestedInput = {
    create?: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput> | RefreshTokenCreateWithoutUserInput[] | RefreshTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RefreshTokenCreateOrConnectWithoutUserInput | RefreshTokenCreateOrConnectWithoutUserInput[]
    upsert?: RefreshTokenUpsertWithWhereUniqueWithoutUserInput | RefreshTokenUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RefreshTokenCreateManyUserInputEnvelope
    set?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    disconnect?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    delete?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    connect?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    update?: RefreshTokenUpdateWithWhereUniqueWithoutUserInput | RefreshTokenUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RefreshTokenUpdateManyWithWhereWithoutUserInput | RefreshTokenUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RefreshTokenScalarWhereInput | RefreshTokenScalarWhereInput[]
  }

  export type UserProfileUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutUserInput
    upsert?: UserProfileUpsertWithoutUserInput
    disconnect?: UserProfileWhereInput | boolean
    delete?: UserProfileWhereInput | boolean
    connect?: UserProfileWhereUniqueInput
    update?: XOR<XOR<UserProfileUpdateToOneWithWhereWithoutUserInput, UserProfileUpdateWithoutUserInput>, UserProfileUncheckedUpdateWithoutUserInput>
  }

  export type EventUncheckedUpdateManyWithoutOrganizerNestedInput = {
    create?: XOR<EventCreateWithoutOrganizerInput, EventUncheckedCreateWithoutOrganizerInput> | EventCreateWithoutOrganizerInput[] | EventUncheckedCreateWithoutOrganizerInput[]
    connectOrCreate?: EventCreateOrConnectWithoutOrganizerInput | EventCreateOrConnectWithoutOrganizerInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutOrganizerInput | EventUpsertWithWhereUniqueWithoutOrganizerInput[]
    createMany?: EventCreateManyOrganizerInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutOrganizerInput | EventUpdateWithWhereUniqueWithoutOrganizerInput[]
    updateMany?: EventUpdateManyWithWhereWithoutOrganizerInput | EventUpdateManyWithWhereWithoutOrganizerInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type EventAttendeeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<EventAttendeeCreateWithoutUserInput, EventAttendeeUncheckedCreateWithoutUserInput> | EventAttendeeCreateWithoutUserInput[] | EventAttendeeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventAttendeeCreateOrConnectWithoutUserInput | EventAttendeeCreateOrConnectWithoutUserInput[]
    upsert?: EventAttendeeUpsertWithWhereUniqueWithoutUserInput | EventAttendeeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EventAttendeeCreateManyUserInputEnvelope
    set?: EventAttendeeWhereUniqueInput | EventAttendeeWhereUniqueInput[]
    disconnect?: EventAttendeeWhereUniqueInput | EventAttendeeWhereUniqueInput[]
    delete?: EventAttendeeWhereUniqueInput | EventAttendeeWhereUniqueInput[]
    connect?: EventAttendeeWhereUniqueInput | EventAttendeeWhereUniqueInput[]
    update?: EventAttendeeUpdateWithWhereUniqueWithoutUserInput | EventAttendeeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EventAttendeeUpdateManyWithWhereWithoutUserInput | EventAttendeeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EventAttendeeScalarWhereInput | EventAttendeeScalarWhereInput[]
  }

  export type FavoriteUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FavoriteCreateWithoutUserInput, FavoriteUncheckedCreateWithoutUserInput> | FavoriteCreateWithoutUserInput[] | FavoriteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteCreateOrConnectWithoutUserInput | FavoriteCreateOrConnectWithoutUserInput[]
    upsert?: FavoriteUpsertWithWhereUniqueWithoutUserInput | FavoriteUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FavoriteCreateManyUserInputEnvelope
    set?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    disconnect?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    delete?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    connect?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    update?: FavoriteUpdateWithWhereUniqueWithoutUserInput | FavoriteUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FavoriteUpdateManyWithWhereWithoutUserInput | FavoriteUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FavoriteScalarWhereInput | FavoriteScalarWhereInput[]
  }

  export type PresentationAuthorUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PresentationAuthorCreateWithoutUserInput, PresentationAuthorUncheckedCreateWithoutUserInput> | PresentationAuthorCreateWithoutUserInput[] | PresentationAuthorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PresentationAuthorCreateOrConnectWithoutUserInput | PresentationAuthorCreateOrConnectWithoutUserInput[]
    upsert?: PresentationAuthorUpsertWithWhereUniqueWithoutUserInput | PresentationAuthorUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PresentationAuthorCreateManyUserInputEnvelope
    set?: PresentationAuthorWhereUniqueInput | PresentationAuthorWhereUniqueInput[]
    disconnect?: PresentationAuthorWhereUniqueInput | PresentationAuthorWhereUniqueInput[]
    delete?: PresentationAuthorWhereUniqueInput | PresentationAuthorWhereUniqueInput[]
    connect?: PresentationAuthorWhereUniqueInput | PresentationAuthorWhereUniqueInput[]
    update?: PresentationAuthorUpdateWithWhereUniqueWithoutUserInput | PresentationAuthorUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PresentationAuthorUpdateManyWithWhereWithoutUserInput | PresentationAuthorUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PresentationAuthorScalarWhereInput | PresentationAuthorScalarWhereInput[]
  }

  export type AdminActionLogUncheckedUpdateManyWithoutAdminNestedInput = {
    create?: XOR<AdminActionLogCreateWithoutAdminInput, AdminActionLogUncheckedCreateWithoutAdminInput> | AdminActionLogCreateWithoutAdminInput[] | AdminActionLogUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: AdminActionLogCreateOrConnectWithoutAdminInput | AdminActionLogCreateOrConnectWithoutAdminInput[]
    upsert?: AdminActionLogUpsertWithWhereUniqueWithoutAdminInput | AdminActionLogUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: AdminActionLogCreateManyAdminInputEnvelope
    set?: AdminActionLogWhereUniqueInput | AdminActionLogWhereUniqueInput[]
    disconnect?: AdminActionLogWhereUniqueInput | AdminActionLogWhereUniqueInput[]
    delete?: AdminActionLogWhereUniqueInput | AdminActionLogWhereUniqueInput[]
    connect?: AdminActionLogWhereUniqueInput | AdminActionLogWhereUniqueInput[]
    update?: AdminActionLogUpdateWithWhereUniqueWithoutAdminInput | AdminActionLogUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: AdminActionLogUpdateManyWithWhereWithoutAdminInput | AdminActionLogUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: AdminActionLogScalarWhereInput | AdminActionLogScalarWhereInput[]
  }

  export type AdminActionLogUncheckedUpdateManyWithoutOrganizerNestedInput = {
    create?: XOR<AdminActionLogCreateWithoutOrganizerInput, AdminActionLogUncheckedCreateWithoutOrganizerInput> | AdminActionLogCreateWithoutOrganizerInput[] | AdminActionLogUncheckedCreateWithoutOrganizerInput[]
    connectOrCreate?: AdminActionLogCreateOrConnectWithoutOrganizerInput | AdminActionLogCreateOrConnectWithoutOrganizerInput[]
    upsert?: AdminActionLogUpsertWithWhereUniqueWithoutOrganizerInput | AdminActionLogUpsertWithWhereUniqueWithoutOrganizerInput[]
    createMany?: AdminActionLogCreateManyOrganizerInputEnvelope
    set?: AdminActionLogWhereUniqueInput | AdminActionLogWhereUniqueInput[]
    disconnect?: AdminActionLogWhereUniqueInput | AdminActionLogWhereUniqueInput[]
    delete?: AdminActionLogWhereUniqueInput | AdminActionLogWhereUniqueInput[]
    connect?: AdminActionLogWhereUniqueInput | AdminActionLogWhereUniqueInput[]
    update?: AdminActionLogUpdateWithWhereUniqueWithoutOrganizerInput | AdminActionLogUpdateWithWhereUniqueWithoutOrganizerInput[]
    updateMany?: AdminActionLogUpdateManyWithWhereWithoutOrganizerInput | AdminActionLogUpdateManyWithWhereWithoutOrganizerInput[]
    deleteMany?: AdminActionLogScalarWhereInput | AdminActionLogScalarWhereInput[]
  }

  export type ConferenceRegistrationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ConferenceRegistrationCreateWithoutUserInput, ConferenceRegistrationUncheckedCreateWithoutUserInput> | ConferenceRegistrationCreateWithoutUserInput[] | ConferenceRegistrationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ConferenceRegistrationCreateOrConnectWithoutUserInput | ConferenceRegistrationCreateOrConnectWithoutUserInput[]
    upsert?: ConferenceRegistrationUpsertWithWhereUniqueWithoutUserInput | ConferenceRegistrationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ConferenceRegistrationCreateManyUserInputEnvelope
    set?: ConferenceRegistrationWhereUniqueInput | ConferenceRegistrationWhereUniqueInput[]
    disconnect?: ConferenceRegistrationWhereUniqueInput | ConferenceRegistrationWhereUniqueInput[]
    delete?: ConferenceRegistrationWhereUniqueInput | ConferenceRegistrationWhereUniqueInput[]
    connect?: ConferenceRegistrationWhereUniqueInput | ConferenceRegistrationWhereUniqueInput[]
    update?: ConferenceRegistrationUpdateWithWhereUniqueWithoutUserInput | ConferenceRegistrationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ConferenceRegistrationUpdateManyWithWhereWithoutUserInput | ConferenceRegistrationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ConferenceRegistrationScalarWhereInput | ConferenceRegistrationScalarWhereInput[]
  }

  export type RefreshTokenUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput> | RefreshTokenCreateWithoutUserInput[] | RefreshTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RefreshTokenCreateOrConnectWithoutUserInput | RefreshTokenCreateOrConnectWithoutUserInput[]
    upsert?: RefreshTokenUpsertWithWhereUniqueWithoutUserInput | RefreshTokenUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RefreshTokenCreateManyUserInputEnvelope
    set?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    disconnect?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    delete?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    connect?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    update?: RefreshTokenUpdateWithWhereUniqueWithoutUserInput | RefreshTokenUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RefreshTokenUpdateManyWithWhereWithoutUserInput | RefreshTokenUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RefreshTokenScalarWhereInput | RefreshTokenScalarWhereInput[]
  }

  export type EventCreateNestedManyWithoutCategoryInput = {
    create?: XOR<EventCreateWithoutCategoryInput, EventUncheckedCreateWithoutCategoryInput> | EventCreateWithoutCategoryInput[] | EventUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: EventCreateOrConnectWithoutCategoryInput | EventCreateOrConnectWithoutCategoryInput[]
    createMany?: EventCreateManyCategoryInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type EventUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<EventCreateWithoutCategoryInput, EventUncheckedCreateWithoutCategoryInput> | EventCreateWithoutCategoryInput[] | EventUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: EventCreateOrConnectWithoutCategoryInput | EventCreateOrConnectWithoutCategoryInput[]
    createMany?: EventCreateManyCategoryInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EventUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<EventCreateWithoutCategoryInput, EventUncheckedCreateWithoutCategoryInput> | EventCreateWithoutCategoryInput[] | EventUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: EventCreateOrConnectWithoutCategoryInput | EventCreateOrConnectWithoutCategoryInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutCategoryInput | EventUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: EventCreateManyCategoryInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutCategoryInput | EventUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: EventUpdateManyWithWhereWithoutCategoryInput | EventUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type EventUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<EventCreateWithoutCategoryInput, EventUncheckedCreateWithoutCategoryInput> | EventCreateWithoutCategoryInput[] | EventUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: EventCreateOrConnectWithoutCategoryInput | EventCreateOrConnectWithoutCategoryInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutCategoryInput | EventUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: EventCreateManyCategoryInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutCategoryInput | EventUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: EventUpdateManyWithWhereWithoutCategoryInput | EventUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type LocationCreateNestedOneWithoutEventsInput = {
    create?: XOR<LocationCreateWithoutEventsInput, LocationUncheckedCreateWithoutEventsInput>
    connectOrCreate?: LocationCreateOrConnectWithoutEventsInput
    connect?: LocationWhereUniqueInput
  }

  export type EventImageCreateNestedOneWithoutEventInput = {
    create?: XOR<EventImageCreateWithoutEventInput, EventImageUncheckedCreateWithoutEventInput>
    connectOrCreate?: EventImageCreateOrConnectWithoutEventInput
    connect?: EventImageWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutOrganizedEventsInput = {
    create?: XOR<UserCreateWithoutOrganizedEventsInput, UserUncheckedCreateWithoutOrganizedEventsInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrganizedEventsInput
    connect?: UserWhereUniqueInput
  }

  export type CategoryCreateNestedOneWithoutEventsInput = {
    create?: XOR<CategoryCreateWithoutEventsInput, CategoryUncheckedCreateWithoutEventsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutEventsInput
    connect?: CategoryWhereUniqueInput
  }

  export type EventAttendeeCreateNestedManyWithoutEventInput = {
    create?: XOR<EventAttendeeCreateWithoutEventInput, EventAttendeeUncheckedCreateWithoutEventInput> | EventAttendeeCreateWithoutEventInput[] | EventAttendeeUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventAttendeeCreateOrConnectWithoutEventInput | EventAttendeeCreateOrConnectWithoutEventInput[]
    createMany?: EventAttendeeCreateManyEventInputEnvelope
    connect?: EventAttendeeWhereUniqueInput | EventAttendeeWhereUniqueInput[]
  }

  export type ConferenceDayCreateNestedManyWithoutEventInput = {
    create?: XOR<ConferenceDayCreateWithoutEventInput, ConferenceDayUncheckedCreateWithoutEventInput> | ConferenceDayCreateWithoutEventInput[] | ConferenceDayUncheckedCreateWithoutEventInput[]
    connectOrCreate?: ConferenceDayCreateOrConnectWithoutEventInput | ConferenceDayCreateOrConnectWithoutEventInput[]
    createMany?: ConferenceDayCreateManyEventInputEnvelope
    connect?: ConferenceDayWhereUniqueInput | ConferenceDayWhereUniqueInput[]
  }

  export type ConferenceRegistrationCreateNestedManyWithoutEventInput = {
    create?: XOR<ConferenceRegistrationCreateWithoutEventInput, ConferenceRegistrationUncheckedCreateWithoutEventInput> | ConferenceRegistrationCreateWithoutEventInput[] | ConferenceRegistrationUncheckedCreateWithoutEventInput[]
    connectOrCreate?: ConferenceRegistrationCreateOrConnectWithoutEventInput | ConferenceRegistrationCreateOrConnectWithoutEventInput[]
    createMany?: ConferenceRegistrationCreateManyEventInputEnvelope
    connect?: ConferenceRegistrationWhereUniqueInput | ConferenceRegistrationWhereUniqueInput[]
  }

  export type EventImageUncheckedCreateNestedOneWithoutEventInput = {
    create?: XOR<EventImageCreateWithoutEventInput, EventImageUncheckedCreateWithoutEventInput>
    connectOrCreate?: EventImageCreateOrConnectWithoutEventInput
    connect?: EventImageWhereUniqueInput
  }

  export type EventAttendeeUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<EventAttendeeCreateWithoutEventInput, EventAttendeeUncheckedCreateWithoutEventInput> | EventAttendeeCreateWithoutEventInput[] | EventAttendeeUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventAttendeeCreateOrConnectWithoutEventInput | EventAttendeeCreateOrConnectWithoutEventInput[]
    createMany?: EventAttendeeCreateManyEventInputEnvelope
    connect?: EventAttendeeWhereUniqueInput | EventAttendeeWhereUniqueInput[]
  }

  export type ConferenceDayUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<ConferenceDayCreateWithoutEventInput, ConferenceDayUncheckedCreateWithoutEventInput> | ConferenceDayCreateWithoutEventInput[] | ConferenceDayUncheckedCreateWithoutEventInput[]
    connectOrCreate?: ConferenceDayCreateOrConnectWithoutEventInput | ConferenceDayCreateOrConnectWithoutEventInput[]
    createMany?: ConferenceDayCreateManyEventInputEnvelope
    connect?: ConferenceDayWhereUniqueInput | ConferenceDayWhereUniqueInput[]
  }

  export type ConferenceRegistrationUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<ConferenceRegistrationCreateWithoutEventInput, ConferenceRegistrationUncheckedCreateWithoutEventInput> | ConferenceRegistrationCreateWithoutEventInput[] | ConferenceRegistrationUncheckedCreateWithoutEventInput[]
    connectOrCreate?: ConferenceRegistrationCreateOrConnectWithoutEventInput | ConferenceRegistrationCreateOrConnectWithoutEventInput[]
    createMany?: ConferenceRegistrationCreateManyEventInputEnvelope
    connect?: ConferenceRegistrationWhereUniqueInput | ConferenceRegistrationWhereUniqueInput[]
  }

  export type EnumEventStatusFieldUpdateOperationsInput = {
    set?: $Enums.EventStatus
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type LocationUpdateOneRequiredWithoutEventsNestedInput = {
    create?: XOR<LocationCreateWithoutEventsInput, LocationUncheckedCreateWithoutEventsInput>
    connectOrCreate?: LocationCreateOrConnectWithoutEventsInput
    upsert?: LocationUpsertWithoutEventsInput
    connect?: LocationWhereUniqueInput
    update?: XOR<XOR<LocationUpdateToOneWithWhereWithoutEventsInput, LocationUpdateWithoutEventsInput>, LocationUncheckedUpdateWithoutEventsInput>
  }

  export type EventImageUpdateOneWithoutEventNestedInput = {
    create?: XOR<EventImageCreateWithoutEventInput, EventImageUncheckedCreateWithoutEventInput>
    connectOrCreate?: EventImageCreateOrConnectWithoutEventInput
    upsert?: EventImageUpsertWithoutEventInput
    disconnect?: EventImageWhereInput | boolean
    delete?: EventImageWhereInput | boolean
    connect?: EventImageWhereUniqueInput
    update?: XOR<XOR<EventImageUpdateToOneWithWhereWithoutEventInput, EventImageUpdateWithoutEventInput>, EventImageUncheckedUpdateWithoutEventInput>
  }

  export type UserUpdateOneRequiredWithoutOrganizedEventsNestedInput = {
    create?: XOR<UserCreateWithoutOrganizedEventsInput, UserUncheckedCreateWithoutOrganizedEventsInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrganizedEventsInput
    upsert?: UserUpsertWithoutOrganizedEventsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOrganizedEventsInput, UserUpdateWithoutOrganizedEventsInput>, UserUncheckedUpdateWithoutOrganizedEventsInput>
  }

  export type CategoryUpdateOneRequiredWithoutEventsNestedInput = {
    create?: XOR<CategoryCreateWithoutEventsInput, CategoryUncheckedCreateWithoutEventsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutEventsInput
    upsert?: CategoryUpsertWithoutEventsInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutEventsInput, CategoryUpdateWithoutEventsInput>, CategoryUncheckedUpdateWithoutEventsInput>
  }

  export type EventAttendeeUpdateManyWithoutEventNestedInput = {
    create?: XOR<EventAttendeeCreateWithoutEventInput, EventAttendeeUncheckedCreateWithoutEventInput> | EventAttendeeCreateWithoutEventInput[] | EventAttendeeUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventAttendeeCreateOrConnectWithoutEventInput | EventAttendeeCreateOrConnectWithoutEventInput[]
    upsert?: EventAttendeeUpsertWithWhereUniqueWithoutEventInput | EventAttendeeUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: EventAttendeeCreateManyEventInputEnvelope
    set?: EventAttendeeWhereUniqueInput | EventAttendeeWhereUniqueInput[]
    disconnect?: EventAttendeeWhereUniqueInput | EventAttendeeWhereUniqueInput[]
    delete?: EventAttendeeWhereUniqueInput | EventAttendeeWhereUniqueInput[]
    connect?: EventAttendeeWhereUniqueInput | EventAttendeeWhereUniqueInput[]
    update?: EventAttendeeUpdateWithWhereUniqueWithoutEventInput | EventAttendeeUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: EventAttendeeUpdateManyWithWhereWithoutEventInput | EventAttendeeUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: EventAttendeeScalarWhereInput | EventAttendeeScalarWhereInput[]
  }

  export type ConferenceDayUpdateManyWithoutEventNestedInput = {
    create?: XOR<ConferenceDayCreateWithoutEventInput, ConferenceDayUncheckedCreateWithoutEventInput> | ConferenceDayCreateWithoutEventInput[] | ConferenceDayUncheckedCreateWithoutEventInput[]
    connectOrCreate?: ConferenceDayCreateOrConnectWithoutEventInput | ConferenceDayCreateOrConnectWithoutEventInput[]
    upsert?: ConferenceDayUpsertWithWhereUniqueWithoutEventInput | ConferenceDayUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: ConferenceDayCreateManyEventInputEnvelope
    set?: ConferenceDayWhereUniqueInput | ConferenceDayWhereUniqueInput[]
    disconnect?: ConferenceDayWhereUniqueInput | ConferenceDayWhereUniqueInput[]
    delete?: ConferenceDayWhereUniqueInput | ConferenceDayWhereUniqueInput[]
    connect?: ConferenceDayWhereUniqueInput | ConferenceDayWhereUniqueInput[]
    update?: ConferenceDayUpdateWithWhereUniqueWithoutEventInput | ConferenceDayUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: ConferenceDayUpdateManyWithWhereWithoutEventInput | ConferenceDayUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: ConferenceDayScalarWhereInput | ConferenceDayScalarWhereInput[]
  }

  export type ConferenceRegistrationUpdateManyWithoutEventNestedInput = {
    create?: XOR<ConferenceRegistrationCreateWithoutEventInput, ConferenceRegistrationUncheckedCreateWithoutEventInput> | ConferenceRegistrationCreateWithoutEventInput[] | ConferenceRegistrationUncheckedCreateWithoutEventInput[]
    connectOrCreate?: ConferenceRegistrationCreateOrConnectWithoutEventInput | ConferenceRegistrationCreateOrConnectWithoutEventInput[]
    upsert?: ConferenceRegistrationUpsertWithWhereUniqueWithoutEventInput | ConferenceRegistrationUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: ConferenceRegistrationCreateManyEventInputEnvelope
    set?: ConferenceRegistrationWhereUniqueInput | ConferenceRegistrationWhereUniqueInput[]
    disconnect?: ConferenceRegistrationWhereUniqueInput | ConferenceRegistrationWhereUniqueInput[]
    delete?: ConferenceRegistrationWhereUniqueInput | ConferenceRegistrationWhereUniqueInput[]
    connect?: ConferenceRegistrationWhereUniqueInput | ConferenceRegistrationWhereUniqueInput[]
    update?: ConferenceRegistrationUpdateWithWhereUniqueWithoutEventInput | ConferenceRegistrationUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: ConferenceRegistrationUpdateManyWithWhereWithoutEventInput | ConferenceRegistrationUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: ConferenceRegistrationScalarWhereInput | ConferenceRegistrationScalarWhereInput[]
  }

  export type EventImageUncheckedUpdateOneWithoutEventNestedInput = {
    create?: XOR<EventImageCreateWithoutEventInput, EventImageUncheckedCreateWithoutEventInput>
    connectOrCreate?: EventImageCreateOrConnectWithoutEventInput
    upsert?: EventImageUpsertWithoutEventInput
    disconnect?: EventImageWhereInput | boolean
    delete?: EventImageWhereInput | boolean
    connect?: EventImageWhereUniqueInput
    update?: XOR<XOR<EventImageUpdateToOneWithWhereWithoutEventInput, EventImageUpdateWithoutEventInput>, EventImageUncheckedUpdateWithoutEventInput>
  }

  export type EventAttendeeUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<EventAttendeeCreateWithoutEventInput, EventAttendeeUncheckedCreateWithoutEventInput> | EventAttendeeCreateWithoutEventInput[] | EventAttendeeUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventAttendeeCreateOrConnectWithoutEventInput | EventAttendeeCreateOrConnectWithoutEventInput[]
    upsert?: EventAttendeeUpsertWithWhereUniqueWithoutEventInput | EventAttendeeUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: EventAttendeeCreateManyEventInputEnvelope
    set?: EventAttendeeWhereUniqueInput | EventAttendeeWhereUniqueInput[]
    disconnect?: EventAttendeeWhereUniqueInput | EventAttendeeWhereUniqueInput[]
    delete?: EventAttendeeWhereUniqueInput | EventAttendeeWhereUniqueInput[]
    connect?: EventAttendeeWhereUniqueInput | EventAttendeeWhereUniqueInput[]
    update?: EventAttendeeUpdateWithWhereUniqueWithoutEventInput | EventAttendeeUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: EventAttendeeUpdateManyWithWhereWithoutEventInput | EventAttendeeUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: EventAttendeeScalarWhereInput | EventAttendeeScalarWhereInput[]
  }

  export type ConferenceDayUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<ConferenceDayCreateWithoutEventInput, ConferenceDayUncheckedCreateWithoutEventInput> | ConferenceDayCreateWithoutEventInput[] | ConferenceDayUncheckedCreateWithoutEventInput[]
    connectOrCreate?: ConferenceDayCreateOrConnectWithoutEventInput | ConferenceDayCreateOrConnectWithoutEventInput[]
    upsert?: ConferenceDayUpsertWithWhereUniqueWithoutEventInput | ConferenceDayUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: ConferenceDayCreateManyEventInputEnvelope
    set?: ConferenceDayWhereUniqueInput | ConferenceDayWhereUniqueInput[]
    disconnect?: ConferenceDayWhereUniqueInput | ConferenceDayWhereUniqueInput[]
    delete?: ConferenceDayWhereUniqueInput | ConferenceDayWhereUniqueInput[]
    connect?: ConferenceDayWhereUniqueInput | ConferenceDayWhereUniqueInput[]
    update?: ConferenceDayUpdateWithWhereUniqueWithoutEventInput | ConferenceDayUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: ConferenceDayUpdateManyWithWhereWithoutEventInput | ConferenceDayUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: ConferenceDayScalarWhereInput | ConferenceDayScalarWhereInput[]
  }

  export type ConferenceRegistrationUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<ConferenceRegistrationCreateWithoutEventInput, ConferenceRegistrationUncheckedCreateWithoutEventInput> | ConferenceRegistrationCreateWithoutEventInput[] | ConferenceRegistrationUncheckedCreateWithoutEventInput[]
    connectOrCreate?: ConferenceRegistrationCreateOrConnectWithoutEventInput | ConferenceRegistrationCreateOrConnectWithoutEventInput[]
    upsert?: ConferenceRegistrationUpsertWithWhereUniqueWithoutEventInput | ConferenceRegistrationUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: ConferenceRegistrationCreateManyEventInputEnvelope
    set?: ConferenceRegistrationWhereUniqueInput | ConferenceRegistrationWhereUniqueInput[]
    disconnect?: ConferenceRegistrationWhereUniqueInput | ConferenceRegistrationWhereUniqueInput[]
    delete?: ConferenceRegistrationWhereUniqueInput | ConferenceRegistrationWhereUniqueInput[]
    connect?: ConferenceRegistrationWhereUniqueInput | ConferenceRegistrationWhereUniqueInput[]
    update?: ConferenceRegistrationUpdateWithWhereUniqueWithoutEventInput | ConferenceRegistrationUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: ConferenceRegistrationUpdateManyWithWhereWithoutEventInput | ConferenceRegistrationUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: ConferenceRegistrationScalarWhereInput | ConferenceRegistrationScalarWhereInput[]
  }

  export type EventCreateNestedManyWithoutLocationInput = {
    create?: XOR<EventCreateWithoutLocationInput, EventUncheckedCreateWithoutLocationInput> | EventCreateWithoutLocationInput[] | EventUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: EventCreateOrConnectWithoutLocationInput | EventCreateOrConnectWithoutLocationInput[]
    createMany?: EventCreateManyLocationInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type EventUncheckedCreateNestedManyWithoutLocationInput = {
    create?: XOR<EventCreateWithoutLocationInput, EventUncheckedCreateWithoutLocationInput> | EventCreateWithoutLocationInput[] | EventUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: EventCreateOrConnectWithoutLocationInput | EventCreateOrConnectWithoutLocationInput[]
    createMany?: EventCreateManyLocationInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type EventUpdateManyWithoutLocationNestedInput = {
    create?: XOR<EventCreateWithoutLocationInput, EventUncheckedCreateWithoutLocationInput> | EventCreateWithoutLocationInput[] | EventUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: EventCreateOrConnectWithoutLocationInput | EventCreateOrConnectWithoutLocationInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutLocationInput | EventUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: EventCreateManyLocationInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutLocationInput | EventUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: EventUpdateManyWithWhereWithoutLocationInput | EventUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type EventUncheckedUpdateManyWithoutLocationNestedInput = {
    create?: XOR<EventCreateWithoutLocationInput, EventUncheckedCreateWithoutLocationInput> | EventCreateWithoutLocationInput[] | EventUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: EventCreateOrConnectWithoutLocationInput | EventCreateOrConnectWithoutLocationInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutLocationInput | EventUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: EventCreateManyLocationInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutLocationInput | EventUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: EventUpdateManyWithWhereWithoutLocationInput | EventUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type EventCreateNestedOneWithoutImagesInput = {
    create?: XOR<EventCreateWithoutImagesInput, EventUncheckedCreateWithoutImagesInput>
    connectOrCreate?: EventCreateOrConnectWithoutImagesInput
    connect?: EventWhereUniqueInput
  }

  export type EventUpdateOneRequiredWithoutImagesNestedInput = {
    create?: XOR<EventCreateWithoutImagesInput, EventUncheckedCreateWithoutImagesInput>
    connectOrCreate?: EventCreateOrConnectWithoutImagesInput
    upsert?: EventUpsertWithoutImagesInput
    connect?: EventWhereUniqueInput
    update?: XOR<XOR<EventUpdateToOneWithWhereWithoutImagesInput, EventUpdateWithoutImagesInput>, EventUncheckedUpdateWithoutImagesInput>
  }

  export type UserCreateNestedOneWithoutAttendedEventsInput = {
    create?: XOR<UserCreateWithoutAttendedEventsInput, UserUncheckedCreateWithoutAttendedEventsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAttendedEventsInput
    connect?: UserWhereUniqueInput
  }

  export type EventCreateNestedOneWithoutAttendeesInput = {
    create?: XOR<EventCreateWithoutAttendeesInput, EventUncheckedCreateWithoutAttendeesInput>
    connectOrCreate?: EventCreateOrConnectWithoutAttendeesInput
    connect?: EventWhereUniqueInput
  }

  export type EnumAttendeeStatusFieldUpdateOperationsInput = {
    set?: $Enums.AttendeeStatus
  }

  export type UserUpdateOneRequiredWithoutAttendedEventsNestedInput = {
    create?: XOR<UserCreateWithoutAttendedEventsInput, UserUncheckedCreateWithoutAttendedEventsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAttendedEventsInput
    upsert?: UserUpsertWithoutAttendedEventsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAttendedEventsInput, UserUpdateWithoutAttendedEventsInput>, UserUncheckedUpdateWithoutAttendedEventsInput>
  }

  export type EventUpdateOneRequiredWithoutAttendeesNestedInput = {
    create?: XOR<EventCreateWithoutAttendeesInput, EventUncheckedCreateWithoutAttendeesInput>
    connectOrCreate?: EventCreateOrConnectWithoutAttendeesInput
    upsert?: EventUpsertWithoutAttendeesInput
    connect?: EventWhereUniqueInput
    update?: XOR<XOR<EventUpdateToOneWithWhereWithoutAttendeesInput, EventUpdateWithoutAttendeesInput>, EventUncheckedUpdateWithoutAttendeesInput>
  }

  export type EventCreateNestedOneWithoutDaysInput = {
    create?: XOR<EventCreateWithoutDaysInput, EventUncheckedCreateWithoutDaysInput>
    connectOrCreate?: EventCreateOrConnectWithoutDaysInput
    connect?: EventWhereUniqueInput
  }

  export type SectionCreateNestedManyWithoutDayInput = {
    create?: XOR<SectionCreateWithoutDayInput, SectionUncheckedCreateWithoutDayInput> | SectionCreateWithoutDayInput[] | SectionUncheckedCreateWithoutDayInput[]
    connectOrCreate?: SectionCreateOrConnectWithoutDayInput | SectionCreateOrConnectWithoutDayInput[]
    createMany?: SectionCreateManyDayInputEnvelope
    connect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
  }

  export type SectionUncheckedCreateNestedManyWithoutDayInput = {
    create?: XOR<SectionCreateWithoutDayInput, SectionUncheckedCreateWithoutDayInput> | SectionCreateWithoutDayInput[] | SectionUncheckedCreateWithoutDayInput[]
    connectOrCreate?: SectionCreateOrConnectWithoutDayInput | SectionCreateOrConnectWithoutDayInput[]
    createMany?: SectionCreateManyDayInputEnvelope
    connect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
  }

  export type EventUpdateOneRequiredWithoutDaysNestedInput = {
    create?: XOR<EventCreateWithoutDaysInput, EventUncheckedCreateWithoutDaysInput>
    connectOrCreate?: EventCreateOrConnectWithoutDaysInput
    upsert?: EventUpsertWithoutDaysInput
    connect?: EventWhereUniqueInput
    update?: XOR<XOR<EventUpdateToOneWithWhereWithoutDaysInput, EventUpdateWithoutDaysInput>, EventUncheckedUpdateWithoutDaysInput>
  }

  export type SectionUpdateManyWithoutDayNestedInput = {
    create?: XOR<SectionCreateWithoutDayInput, SectionUncheckedCreateWithoutDayInput> | SectionCreateWithoutDayInput[] | SectionUncheckedCreateWithoutDayInput[]
    connectOrCreate?: SectionCreateOrConnectWithoutDayInput | SectionCreateOrConnectWithoutDayInput[]
    upsert?: SectionUpsertWithWhereUniqueWithoutDayInput | SectionUpsertWithWhereUniqueWithoutDayInput[]
    createMany?: SectionCreateManyDayInputEnvelope
    set?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    disconnect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    delete?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    connect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    update?: SectionUpdateWithWhereUniqueWithoutDayInput | SectionUpdateWithWhereUniqueWithoutDayInput[]
    updateMany?: SectionUpdateManyWithWhereWithoutDayInput | SectionUpdateManyWithWhereWithoutDayInput[]
    deleteMany?: SectionScalarWhereInput | SectionScalarWhereInput[]
  }

  export type SectionUncheckedUpdateManyWithoutDayNestedInput = {
    create?: XOR<SectionCreateWithoutDayInput, SectionUncheckedCreateWithoutDayInput> | SectionCreateWithoutDayInput[] | SectionUncheckedCreateWithoutDayInput[]
    connectOrCreate?: SectionCreateOrConnectWithoutDayInput | SectionCreateOrConnectWithoutDayInput[]
    upsert?: SectionUpsertWithWhereUniqueWithoutDayInput | SectionUpsertWithWhereUniqueWithoutDayInput[]
    createMany?: SectionCreateManyDayInputEnvelope
    set?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    disconnect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    delete?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    connect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    update?: SectionUpdateWithWhereUniqueWithoutDayInput | SectionUpdateWithWhereUniqueWithoutDayInput[]
    updateMany?: SectionUpdateManyWithWhereWithoutDayInput | SectionUpdateManyWithWhereWithoutDayInput[]
    deleteMany?: SectionScalarWhereInput | SectionScalarWhereInput[]
  }

  export type ConferenceDayCreateNestedOneWithoutSectionsInput = {
    create?: XOR<ConferenceDayCreateWithoutSectionsInput, ConferenceDayUncheckedCreateWithoutSectionsInput>
    connectOrCreate?: ConferenceDayCreateOrConnectWithoutSectionsInput
    connect?: ConferenceDayWhereUniqueInput
  }

  export type PresentationCreateNestedManyWithoutSectionInput = {
    create?: XOR<PresentationCreateWithoutSectionInput, PresentationUncheckedCreateWithoutSectionInput> | PresentationCreateWithoutSectionInput[] | PresentationUncheckedCreateWithoutSectionInput[]
    connectOrCreate?: PresentationCreateOrConnectWithoutSectionInput | PresentationCreateOrConnectWithoutSectionInput[]
    createMany?: PresentationCreateManySectionInputEnvelope
    connect?: PresentationWhereUniqueInput | PresentationWhereUniqueInput[]
  }

  export type BreakCreateNestedManyWithoutSectionInput = {
    create?: XOR<BreakCreateWithoutSectionInput, BreakUncheckedCreateWithoutSectionInput> | BreakCreateWithoutSectionInput[] | BreakUncheckedCreateWithoutSectionInput[]
    connectOrCreate?: BreakCreateOrConnectWithoutSectionInput | BreakCreateOrConnectWithoutSectionInput[]
    createMany?: BreakCreateManySectionInputEnvelope
    connect?: BreakWhereUniqueInput | BreakWhereUniqueInput[]
  }

  export type PresentationUncheckedCreateNestedManyWithoutSectionInput = {
    create?: XOR<PresentationCreateWithoutSectionInput, PresentationUncheckedCreateWithoutSectionInput> | PresentationCreateWithoutSectionInput[] | PresentationUncheckedCreateWithoutSectionInput[]
    connectOrCreate?: PresentationCreateOrConnectWithoutSectionInput | PresentationCreateOrConnectWithoutSectionInput[]
    createMany?: PresentationCreateManySectionInputEnvelope
    connect?: PresentationWhereUniqueInput | PresentationWhereUniqueInput[]
  }

  export type BreakUncheckedCreateNestedManyWithoutSectionInput = {
    create?: XOR<BreakCreateWithoutSectionInput, BreakUncheckedCreateWithoutSectionInput> | BreakCreateWithoutSectionInput[] | BreakUncheckedCreateWithoutSectionInput[]
    connectOrCreate?: BreakCreateOrConnectWithoutSectionInput | BreakCreateOrConnectWithoutSectionInput[]
    createMany?: BreakCreateManySectionInputEnvelope
    connect?: BreakWhereUniqueInput | BreakWhereUniqueInput[]
  }

  export type ConferenceDayUpdateOneRequiredWithoutSectionsNestedInput = {
    create?: XOR<ConferenceDayCreateWithoutSectionsInput, ConferenceDayUncheckedCreateWithoutSectionsInput>
    connectOrCreate?: ConferenceDayCreateOrConnectWithoutSectionsInput
    upsert?: ConferenceDayUpsertWithoutSectionsInput
    connect?: ConferenceDayWhereUniqueInput
    update?: XOR<XOR<ConferenceDayUpdateToOneWithWhereWithoutSectionsInput, ConferenceDayUpdateWithoutSectionsInput>, ConferenceDayUncheckedUpdateWithoutSectionsInput>
  }

  export type PresentationUpdateManyWithoutSectionNestedInput = {
    create?: XOR<PresentationCreateWithoutSectionInput, PresentationUncheckedCreateWithoutSectionInput> | PresentationCreateWithoutSectionInput[] | PresentationUncheckedCreateWithoutSectionInput[]
    connectOrCreate?: PresentationCreateOrConnectWithoutSectionInput | PresentationCreateOrConnectWithoutSectionInput[]
    upsert?: PresentationUpsertWithWhereUniqueWithoutSectionInput | PresentationUpsertWithWhereUniqueWithoutSectionInput[]
    createMany?: PresentationCreateManySectionInputEnvelope
    set?: PresentationWhereUniqueInput | PresentationWhereUniqueInput[]
    disconnect?: PresentationWhereUniqueInput | PresentationWhereUniqueInput[]
    delete?: PresentationWhereUniqueInput | PresentationWhereUniqueInput[]
    connect?: PresentationWhereUniqueInput | PresentationWhereUniqueInput[]
    update?: PresentationUpdateWithWhereUniqueWithoutSectionInput | PresentationUpdateWithWhereUniqueWithoutSectionInput[]
    updateMany?: PresentationUpdateManyWithWhereWithoutSectionInput | PresentationUpdateManyWithWhereWithoutSectionInput[]
    deleteMany?: PresentationScalarWhereInput | PresentationScalarWhereInput[]
  }

  export type BreakUpdateManyWithoutSectionNestedInput = {
    create?: XOR<BreakCreateWithoutSectionInput, BreakUncheckedCreateWithoutSectionInput> | BreakCreateWithoutSectionInput[] | BreakUncheckedCreateWithoutSectionInput[]
    connectOrCreate?: BreakCreateOrConnectWithoutSectionInput | BreakCreateOrConnectWithoutSectionInput[]
    upsert?: BreakUpsertWithWhereUniqueWithoutSectionInput | BreakUpsertWithWhereUniqueWithoutSectionInput[]
    createMany?: BreakCreateManySectionInputEnvelope
    set?: BreakWhereUniqueInput | BreakWhereUniqueInput[]
    disconnect?: BreakWhereUniqueInput | BreakWhereUniqueInput[]
    delete?: BreakWhereUniqueInput | BreakWhereUniqueInput[]
    connect?: BreakWhereUniqueInput | BreakWhereUniqueInput[]
    update?: BreakUpdateWithWhereUniqueWithoutSectionInput | BreakUpdateWithWhereUniqueWithoutSectionInput[]
    updateMany?: BreakUpdateManyWithWhereWithoutSectionInput | BreakUpdateManyWithWhereWithoutSectionInput[]
    deleteMany?: BreakScalarWhereInput | BreakScalarWhereInput[]
  }

  export type PresentationUncheckedUpdateManyWithoutSectionNestedInput = {
    create?: XOR<PresentationCreateWithoutSectionInput, PresentationUncheckedCreateWithoutSectionInput> | PresentationCreateWithoutSectionInput[] | PresentationUncheckedCreateWithoutSectionInput[]
    connectOrCreate?: PresentationCreateOrConnectWithoutSectionInput | PresentationCreateOrConnectWithoutSectionInput[]
    upsert?: PresentationUpsertWithWhereUniqueWithoutSectionInput | PresentationUpsertWithWhereUniqueWithoutSectionInput[]
    createMany?: PresentationCreateManySectionInputEnvelope
    set?: PresentationWhereUniqueInput | PresentationWhereUniqueInput[]
    disconnect?: PresentationWhereUniqueInput | PresentationWhereUniqueInput[]
    delete?: PresentationWhereUniqueInput | PresentationWhereUniqueInput[]
    connect?: PresentationWhereUniqueInput | PresentationWhereUniqueInput[]
    update?: PresentationUpdateWithWhereUniqueWithoutSectionInput | PresentationUpdateWithWhereUniqueWithoutSectionInput[]
    updateMany?: PresentationUpdateManyWithWhereWithoutSectionInput | PresentationUpdateManyWithWhereWithoutSectionInput[]
    deleteMany?: PresentationScalarWhereInput | PresentationScalarWhereInput[]
  }

  export type BreakUncheckedUpdateManyWithoutSectionNestedInput = {
    create?: XOR<BreakCreateWithoutSectionInput, BreakUncheckedCreateWithoutSectionInput> | BreakCreateWithoutSectionInput[] | BreakUncheckedCreateWithoutSectionInput[]
    connectOrCreate?: BreakCreateOrConnectWithoutSectionInput | BreakCreateOrConnectWithoutSectionInput[]
    upsert?: BreakUpsertWithWhereUniqueWithoutSectionInput | BreakUpsertWithWhereUniqueWithoutSectionInput[]
    createMany?: BreakCreateManySectionInputEnvelope
    set?: BreakWhereUniqueInput | BreakWhereUniqueInput[]
    disconnect?: BreakWhereUniqueInput | BreakWhereUniqueInput[]
    delete?: BreakWhereUniqueInput | BreakWhereUniqueInput[]
    connect?: BreakWhereUniqueInput | BreakWhereUniqueInput[]
    update?: BreakUpdateWithWhereUniqueWithoutSectionInput | BreakUpdateWithWhereUniqueWithoutSectionInput[]
    updateMany?: BreakUpdateManyWithWhereWithoutSectionInput | BreakUpdateManyWithWhereWithoutSectionInput[]
    deleteMany?: BreakScalarWhereInput | BreakScalarWhereInput[]
  }

  export type PresentationCreatekeywordsInput = {
    set: string[]
  }

  export type SectionCreateNestedOneWithoutPresentationsInput = {
    create?: XOR<SectionCreateWithoutPresentationsInput, SectionUncheckedCreateWithoutPresentationsInput>
    connectOrCreate?: SectionCreateOrConnectWithoutPresentationsInput
    connect?: SectionWhereUniqueInput
  }

  export type PresentationMetricsCreateNestedOneWithoutPresentationInput = {
    create?: XOR<PresentationMetricsCreateWithoutPresentationInput, PresentationMetricsUncheckedCreateWithoutPresentationInput>
    connectOrCreate?: PresentationMetricsCreateOrConnectWithoutPresentationInput
    connect?: PresentationMetricsWhereUniqueInput
  }

  export type PresentationAuthorCreateNestedManyWithoutPresentationInput = {
    create?: XOR<PresentationAuthorCreateWithoutPresentationInput, PresentationAuthorUncheckedCreateWithoutPresentationInput> | PresentationAuthorCreateWithoutPresentationInput[] | PresentationAuthorUncheckedCreateWithoutPresentationInput[]
    connectOrCreate?: PresentationAuthorCreateOrConnectWithoutPresentationInput | PresentationAuthorCreateOrConnectWithoutPresentationInput[]
    createMany?: PresentationAuthorCreateManyPresentationInputEnvelope
    connect?: PresentationAuthorWhereUniqueInput | PresentationAuthorWhereUniqueInput[]
  }

  export type PresentationMaterialCreateNestedManyWithoutPresentationInput = {
    create?: XOR<PresentationMaterialCreateWithoutPresentationInput, PresentationMaterialUncheckedCreateWithoutPresentationInput> | PresentationMaterialCreateWithoutPresentationInput[] | PresentationMaterialUncheckedCreateWithoutPresentationInput[]
    connectOrCreate?: PresentationMaterialCreateOrConnectWithoutPresentationInput | PresentationMaterialCreateOrConnectWithoutPresentationInput[]
    createMany?: PresentationMaterialCreateManyPresentationInputEnvelope
    connect?: PresentationMaterialWhereUniqueInput | PresentationMaterialWhereUniqueInput[]
  }

  export type FavoriteCreateNestedManyWithoutPresentationInput = {
    create?: XOR<FavoriteCreateWithoutPresentationInput, FavoriteUncheckedCreateWithoutPresentationInput> | FavoriteCreateWithoutPresentationInput[] | FavoriteUncheckedCreateWithoutPresentationInput[]
    connectOrCreate?: FavoriteCreateOrConnectWithoutPresentationInput | FavoriteCreateOrConnectWithoutPresentationInput[]
    createMany?: FavoriteCreateManyPresentationInputEnvelope
    connect?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
  }

  export type PresentationMetricsUncheckedCreateNestedOneWithoutPresentationInput = {
    create?: XOR<PresentationMetricsCreateWithoutPresentationInput, PresentationMetricsUncheckedCreateWithoutPresentationInput>
    connectOrCreate?: PresentationMetricsCreateOrConnectWithoutPresentationInput
    connect?: PresentationMetricsWhereUniqueInput
  }

  export type PresentationAuthorUncheckedCreateNestedManyWithoutPresentationInput = {
    create?: XOR<PresentationAuthorCreateWithoutPresentationInput, PresentationAuthorUncheckedCreateWithoutPresentationInput> | PresentationAuthorCreateWithoutPresentationInput[] | PresentationAuthorUncheckedCreateWithoutPresentationInput[]
    connectOrCreate?: PresentationAuthorCreateOrConnectWithoutPresentationInput | PresentationAuthorCreateOrConnectWithoutPresentationInput[]
    createMany?: PresentationAuthorCreateManyPresentationInputEnvelope
    connect?: PresentationAuthorWhereUniqueInput | PresentationAuthorWhereUniqueInput[]
  }

  export type PresentationMaterialUncheckedCreateNestedManyWithoutPresentationInput = {
    create?: XOR<PresentationMaterialCreateWithoutPresentationInput, PresentationMaterialUncheckedCreateWithoutPresentationInput> | PresentationMaterialCreateWithoutPresentationInput[] | PresentationMaterialUncheckedCreateWithoutPresentationInput[]
    connectOrCreate?: PresentationMaterialCreateOrConnectWithoutPresentationInput | PresentationMaterialCreateOrConnectWithoutPresentationInput[]
    createMany?: PresentationMaterialCreateManyPresentationInputEnvelope
    connect?: PresentationMaterialWhereUniqueInput | PresentationMaterialWhereUniqueInput[]
  }

  export type FavoriteUncheckedCreateNestedManyWithoutPresentationInput = {
    create?: XOR<FavoriteCreateWithoutPresentationInput, FavoriteUncheckedCreateWithoutPresentationInput> | FavoriteCreateWithoutPresentationInput[] | FavoriteUncheckedCreateWithoutPresentationInput[]
    connectOrCreate?: FavoriteCreateOrConnectWithoutPresentationInput | FavoriteCreateOrConnectWithoutPresentationInput[]
    createMany?: FavoriteCreateManyPresentationInputEnvelope
    connect?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
  }

  export type PresentationUpdatekeywordsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type EnumPresentationStatusFieldUpdateOperationsInput = {
    set?: $Enums.PresentationStatus
  }

  export type EnumSubmissionTypeFieldUpdateOperationsInput = {
    set?: $Enums.SubmissionType
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type SectionUpdateOneRequiredWithoutPresentationsNestedInput = {
    create?: XOR<SectionCreateWithoutPresentationsInput, SectionUncheckedCreateWithoutPresentationsInput>
    connectOrCreate?: SectionCreateOrConnectWithoutPresentationsInput
    upsert?: SectionUpsertWithoutPresentationsInput
    connect?: SectionWhereUniqueInput
    update?: XOR<XOR<SectionUpdateToOneWithWhereWithoutPresentationsInput, SectionUpdateWithoutPresentationsInput>, SectionUncheckedUpdateWithoutPresentationsInput>
  }

  export type PresentationMetricsUpdateOneWithoutPresentationNestedInput = {
    create?: XOR<PresentationMetricsCreateWithoutPresentationInput, PresentationMetricsUncheckedCreateWithoutPresentationInput>
    connectOrCreate?: PresentationMetricsCreateOrConnectWithoutPresentationInput
    upsert?: PresentationMetricsUpsertWithoutPresentationInput
    disconnect?: PresentationMetricsWhereInput | boolean
    delete?: PresentationMetricsWhereInput | boolean
    connect?: PresentationMetricsWhereUniqueInput
    update?: XOR<XOR<PresentationMetricsUpdateToOneWithWhereWithoutPresentationInput, PresentationMetricsUpdateWithoutPresentationInput>, PresentationMetricsUncheckedUpdateWithoutPresentationInput>
  }

  export type PresentationAuthorUpdateManyWithoutPresentationNestedInput = {
    create?: XOR<PresentationAuthorCreateWithoutPresentationInput, PresentationAuthorUncheckedCreateWithoutPresentationInput> | PresentationAuthorCreateWithoutPresentationInput[] | PresentationAuthorUncheckedCreateWithoutPresentationInput[]
    connectOrCreate?: PresentationAuthorCreateOrConnectWithoutPresentationInput | PresentationAuthorCreateOrConnectWithoutPresentationInput[]
    upsert?: PresentationAuthorUpsertWithWhereUniqueWithoutPresentationInput | PresentationAuthorUpsertWithWhereUniqueWithoutPresentationInput[]
    createMany?: PresentationAuthorCreateManyPresentationInputEnvelope
    set?: PresentationAuthorWhereUniqueInput | PresentationAuthorWhereUniqueInput[]
    disconnect?: PresentationAuthorWhereUniqueInput | PresentationAuthorWhereUniqueInput[]
    delete?: PresentationAuthorWhereUniqueInput | PresentationAuthorWhereUniqueInput[]
    connect?: PresentationAuthorWhereUniqueInput | PresentationAuthorWhereUniqueInput[]
    update?: PresentationAuthorUpdateWithWhereUniqueWithoutPresentationInput | PresentationAuthorUpdateWithWhereUniqueWithoutPresentationInput[]
    updateMany?: PresentationAuthorUpdateManyWithWhereWithoutPresentationInput | PresentationAuthorUpdateManyWithWhereWithoutPresentationInput[]
    deleteMany?: PresentationAuthorScalarWhereInput | PresentationAuthorScalarWhereInput[]
  }

  export type PresentationMaterialUpdateManyWithoutPresentationNestedInput = {
    create?: XOR<PresentationMaterialCreateWithoutPresentationInput, PresentationMaterialUncheckedCreateWithoutPresentationInput> | PresentationMaterialCreateWithoutPresentationInput[] | PresentationMaterialUncheckedCreateWithoutPresentationInput[]
    connectOrCreate?: PresentationMaterialCreateOrConnectWithoutPresentationInput | PresentationMaterialCreateOrConnectWithoutPresentationInput[]
    upsert?: PresentationMaterialUpsertWithWhereUniqueWithoutPresentationInput | PresentationMaterialUpsertWithWhereUniqueWithoutPresentationInput[]
    createMany?: PresentationMaterialCreateManyPresentationInputEnvelope
    set?: PresentationMaterialWhereUniqueInput | PresentationMaterialWhereUniqueInput[]
    disconnect?: PresentationMaterialWhereUniqueInput | PresentationMaterialWhereUniqueInput[]
    delete?: PresentationMaterialWhereUniqueInput | PresentationMaterialWhereUniqueInput[]
    connect?: PresentationMaterialWhereUniqueInput | PresentationMaterialWhereUniqueInput[]
    update?: PresentationMaterialUpdateWithWhereUniqueWithoutPresentationInput | PresentationMaterialUpdateWithWhereUniqueWithoutPresentationInput[]
    updateMany?: PresentationMaterialUpdateManyWithWhereWithoutPresentationInput | PresentationMaterialUpdateManyWithWhereWithoutPresentationInput[]
    deleteMany?: PresentationMaterialScalarWhereInput | PresentationMaterialScalarWhereInput[]
  }

  export type FavoriteUpdateManyWithoutPresentationNestedInput = {
    create?: XOR<FavoriteCreateWithoutPresentationInput, FavoriteUncheckedCreateWithoutPresentationInput> | FavoriteCreateWithoutPresentationInput[] | FavoriteUncheckedCreateWithoutPresentationInput[]
    connectOrCreate?: FavoriteCreateOrConnectWithoutPresentationInput | FavoriteCreateOrConnectWithoutPresentationInput[]
    upsert?: FavoriteUpsertWithWhereUniqueWithoutPresentationInput | FavoriteUpsertWithWhereUniqueWithoutPresentationInput[]
    createMany?: FavoriteCreateManyPresentationInputEnvelope
    set?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    disconnect?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    delete?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    connect?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    update?: FavoriteUpdateWithWhereUniqueWithoutPresentationInput | FavoriteUpdateWithWhereUniqueWithoutPresentationInput[]
    updateMany?: FavoriteUpdateManyWithWhereWithoutPresentationInput | FavoriteUpdateManyWithWhereWithoutPresentationInput[]
    deleteMany?: FavoriteScalarWhereInput | FavoriteScalarWhereInput[]
  }

  export type PresentationMetricsUncheckedUpdateOneWithoutPresentationNestedInput = {
    create?: XOR<PresentationMetricsCreateWithoutPresentationInput, PresentationMetricsUncheckedCreateWithoutPresentationInput>
    connectOrCreate?: PresentationMetricsCreateOrConnectWithoutPresentationInput
    upsert?: PresentationMetricsUpsertWithoutPresentationInput
    disconnect?: PresentationMetricsWhereInput | boolean
    delete?: PresentationMetricsWhereInput | boolean
    connect?: PresentationMetricsWhereUniqueInput
    update?: XOR<XOR<PresentationMetricsUpdateToOneWithWhereWithoutPresentationInput, PresentationMetricsUpdateWithoutPresentationInput>, PresentationMetricsUncheckedUpdateWithoutPresentationInput>
  }

  export type PresentationAuthorUncheckedUpdateManyWithoutPresentationNestedInput = {
    create?: XOR<PresentationAuthorCreateWithoutPresentationInput, PresentationAuthorUncheckedCreateWithoutPresentationInput> | PresentationAuthorCreateWithoutPresentationInput[] | PresentationAuthorUncheckedCreateWithoutPresentationInput[]
    connectOrCreate?: PresentationAuthorCreateOrConnectWithoutPresentationInput | PresentationAuthorCreateOrConnectWithoutPresentationInput[]
    upsert?: PresentationAuthorUpsertWithWhereUniqueWithoutPresentationInput | PresentationAuthorUpsertWithWhereUniqueWithoutPresentationInput[]
    createMany?: PresentationAuthorCreateManyPresentationInputEnvelope
    set?: PresentationAuthorWhereUniqueInput | PresentationAuthorWhereUniqueInput[]
    disconnect?: PresentationAuthorWhereUniqueInput | PresentationAuthorWhereUniqueInput[]
    delete?: PresentationAuthorWhereUniqueInput | PresentationAuthorWhereUniqueInput[]
    connect?: PresentationAuthorWhereUniqueInput | PresentationAuthorWhereUniqueInput[]
    update?: PresentationAuthorUpdateWithWhereUniqueWithoutPresentationInput | PresentationAuthorUpdateWithWhereUniqueWithoutPresentationInput[]
    updateMany?: PresentationAuthorUpdateManyWithWhereWithoutPresentationInput | PresentationAuthorUpdateManyWithWhereWithoutPresentationInput[]
    deleteMany?: PresentationAuthorScalarWhereInput | PresentationAuthorScalarWhereInput[]
  }

  export type PresentationMaterialUncheckedUpdateManyWithoutPresentationNestedInput = {
    create?: XOR<PresentationMaterialCreateWithoutPresentationInput, PresentationMaterialUncheckedCreateWithoutPresentationInput> | PresentationMaterialCreateWithoutPresentationInput[] | PresentationMaterialUncheckedCreateWithoutPresentationInput[]
    connectOrCreate?: PresentationMaterialCreateOrConnectWithoutPresentationInput | PresentationMaterialCreateOrConnectWithoutPresentationInput[]
    upsert?: PresentationMaterialUpsertWithWhereUniqueWithoutPresentationInput | PresentationMaterialUpsertWithWhereUniqueWithoutPresentationInput[]
    createMany?: PresentationMaterialCreateManyPresentationInputEnvelope
    set?: PresentationMaterialWhereUniqueInput | PresentationMaterialWhereUniqueInput[]
    disconnect?: PresentationMaterialWhereUniqueInput | PresentationMaterialWhereUniqueInput[]
    delete?: PresentationMaterialWhereUniqueInput | PresentationMaterialWhereUniqueInput[]
    connect?: PresentationMaterialWhereUniqueInput | PresentationMaterialWhereUniqueInput[]
    update?: PresentationMaterialUpdateWithWhereUniqueWithoutPresentationInput | PresentationMaterialUpdateWithWhereUniqueWithoutPresentationInput[]
    updateMany?: PresentationMaterialUpdateManyWithWhereWithoutPresentationInput | PresentationMaterialUpdateManyWithWhereWithoutPresentationInput[]
    deleteMany?: PresentationMaterialScalarWhereInput | PresentationMaterialScalarWhereInput[]
  }

  export type FavoriteUncheckedUpdateManyWithoutPresentationNestedInput = {
    create?: XOR<FavoriteCreateWithoutPresentationInput, FavoriteUncheckedCreateWithoutPresentationInput> | FavoriteCreateWithoutPresentationInput[] | FavoriteUncheckedCreateWithoutPresentationInput[]
    connectOrCreate?: FavoriteCreateOrConnectWithoutPresentationInput | FavoriteCreateOrConnectWithoutPresentationInput[]
    upsert?: FavoriteUpsertWithWhereUniqueWithoutPresentationInput | FavoriteUpsertWithWhereUniqueWithoutPresentationInput[]
    createMany?: FavoriteCreateManyPresentationInputEnvelope
    set?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    disconnect?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    delete?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    connect?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    update?: FavoriteUpdateWithWhereUniqueWithoutPresentationInput | FavoriteUpdateWithWhereUniqueWithoutPresentationInput[]
    updateMany?: FavoriteUpdateManyWithWhereWithoutPresentationInput | FavoriteUpdateManyWithWhereWithoutPresentationInput[]
    deleteMany?: FavoriteScalarWhereInput | FavoriteScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutAuthoredPresentationsInput = {
    create?: XOR<UserCreateWithoutAuthoredPresentationsInput, UserUncheckedCreateWithoutAuthoredPresentationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuthoredPresentationsInput
    connect?: UserWhereUniqueInput
  }

  export type PresentationCreateNestedOneWithoutAuthorsInput = {
    create?: XOR<PresentationCreateWithoutAuthorsInput, PresentationUncheckedCreateWithoutAuthorsInput>
    connectOrCreate?: PresentationCreateOrConnectWithoutAuthorsInput
    connect?: PresentationWhereUniqueInput
  }

  export type AffiliationCreateNestedOneWithoutAuthorsInput = {
    create?: XOR<AffiliationCreateWithoutAuthorsInput, AffiliationUncheckedCreateWithoutAuthorsInput>
    connectOrCreate?: AffiliationCreateOrConnectWithoutAuthorsInput
    connect?: AffiliationWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAuthoredPresentationsNestedInput = {
    create?: XOR<UserCreateWithoutAuthoredPresentationsInput, UserUncheckedCreateWithoutAuthoredPresentationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuthoredPresentationsInput
    upsert?: UserUpsertWithoutAuthoredPresentationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAuthoredPresentationsInput, UserUpdateWithoutAuthoredPresentationsInput>, UserUncheckedUpdateWithoutAuthoredPresentationsInput>
  }

  export type PresentationUpdateOneRequiredWithoutAuthorsNestedInput = {
    create?: XOR<PresentationCreateWithoutAuthorsInput, PresentationUncheckedCreateWithoutAuthorsInput>
    connectOrCreate?: PresentationCreateOrConnectWithoutAuthorsInput
    upsert?: PresentationUpsertWithoutAuthorsInput
    connect?: PresentationWhereUniqueInput
    update?: XOR<XOR<PresentationUpdateToOneWithWhereWithoutAuthorsInput, PresentationUpdateWithoutAuthorsInput>, PresentationUncheckedUpdateWithoutAuthorsInput>
  }

  export type AffiliationUpdateOneWithoutAuthorsNestedInput = {
    create?: XOR<AffiliationCreateWithoutAuthorsInput, AffiliationUncheckedCreateWithoutAuthorsInput>
    connectOrCreate?: AffiliationCreateOrConnectWithoutAuthorsInput
    upsert?: AffiliationUpsertWithoutAuthorsInput
    disconnect?: AffiliationWhereInput | boolean
    delete?: AffiliationWhereInput | boolean
    connect?: AffiliationWhereUniqueInput
    update?: XOR<XOR<AffiliationUpdateToOneWithWhereWithoutAuthorsInput, AffiliationUpdateWithoutAuthorsInput>, AffiliationUncheckedUpdateWithoutAuthorsInput>
  }

  export type PresentationAuthorCreateNestedManyWithoutAffiliationInput = {
    create?: XOR<PresentationAuthorCreateWithoutAffiliationInput, PresentationAuthorUncheckedCreateWithoutAffiliationInput> | PresentationAuthorCreateWithoutAffiliationInput[] | PresentationAuthorUncheckedCreateWithoutAffiliationInput[]
    connectOrCreate?: PresentationAuthorCreateOrConnectWithoutAffiliationInput | PresentationAuthorCreateOrConnectWithoutAffiliationInput[]
    createMany?: PresentationAuthorCreateManyAffiliationInputEnvelope
    connect?: PresentationAuthorWhereUniqueInput | PresentationAuthorWhereUniqueInput[]
  }

  export type PresentationAuthorUncheckedCreateNestedManyWithoutAffiliationInput = {
    create?: XOR<PresentationAuthorCreateWithoutAffiliationInput, PresentationAuthorUncheckedCreateWithoutAffiliationInput> | PresentationAuthorCreateWithoutAffiliationInput[] | PresentationAuthorUncheckedCreateWithoutAffiliationInput[]
    connectOrCreate?: PresentationAuthorCreateOrConnectWithoutAffiliationInput | PresentationAuthorCreateOrConnectWithoutAffiliationInput[]
    createMany?: PresentationAuthorCreateManyAffiliationInputEnvelope
    connect?: PresentationAuthorWhereUniqueInput | PresentationAuthorWhereUniqueInput[]
  }

  export type PresentationAuthorUpdateManyWithoutAffiliationNestedInput = {
    create?: XOR<PresentationAuthorCreateWithoutAffiliationInput, PresentationAuthorUncheckedCreateWithoutAffiliationInput> | PresentationAuthorCreateWithoutAffiliationInput[] | PresentationAuthorUncheckedCreateWithoutAffiliationInput[]
    connectOrCreate?: PresentationAuthorCreateOrConnectWithoutAffiliationInput | PresentationAuthorCreateOrConnectWithoutAffiliationInput[]
    upsert?: PresentationAuthorUpsertWithWhereUniqueWithoutAffiliationInput | PresentationAuthorUpsertWithWhereUniqueWithoutAffiliationInput[]
    createMany?: PresentationAuthorCreateManyAffiliationInputEnvelope
    set?: PresentationAuthorWhereUniqueInput | PresentationAuthorWhereUniqueInput[]
    disconnect?: PresentationAuthorWhereUniqueInput | PresentationAuthorWhereUniqueInput[]
    delete?: PresentationAuthorWhereUniqueInput | PresentationAuthorWhereUniqueInput[]
    connect?: PresentationAuthorWhereUniqueInput | PresentationAuthorWhereUniqueInput[]
    update?: PresentationAuthorUpdateWithWhereUniqueWithoutAffiliationInput | PresentationAuthorUpdateWithWhereUniqueWithoutAffiliationInput[]
    updateMany?: PresentationAuthorUpdateManyWithWhereWithoutAffiliationInput | PresentationAuthorUpdateManyWithWhereWithoutAffiliationInput[]
    deleteMany?: PresentationAuthorScalarWhereInput | PresentationAuthorScalarWhereInput[]
  }

  export type PresentationAuthorUncheckedUpdateManyWithoutAffiliationNestedInput = {
    create?: XOR<PresentationAuthorCreateWithoutAffiliationInput, PresentationAuthorUncheckedCreateWithoutAffiliationInput> | PresentationAuthorCreateWithoutAffiliationInput[] | PresentationAuthorUncheckedCreateWithoutAffiliationInput[]
    connectOrCreate?: PresentationAuthorCreateOrConnectWithoutAffiliationInput | PresentationAuthorCreateOrConnectWithoutAffiliationInput[]
    upsert?: PresentationAuthorUpsertWithWhereUniqueWithoutAffiliationInput | PresentationAuthorUpsertWithWhereUniqueWithoutAffiliationInput[]
    createMany?: PresentationAuthorCreateManyAffiliationInputEnvelope
    set?: PresentationAuthorWhereUniqueInput | PresentationAuthorWhereUniqueInput[]
    disconnect?: PresentationAuthorWhereUniqueInput | PresentationAuthorWhereUniqueInput[]
    delete?: PresentationAuthorWhereUniqueInput | PresentationAuthorWhereUniqueInput[]
    connect?: PresentationAuthorWhereUniqueInput | PresentationAuthorWhereUniqueInput[]
    update?: PresentationAuthorUpdateWithWhereUniqueWithoutAffiliationInput | PresentationAuthorUpdateWithWhereUniqueWithoutAffiliationInput[]
    updateMany?: PresentationAuthorUpdateManyWithWhereWithoutAffiliationInput | PresentationAuthorUpdateManyWithWhereWithoutAffiliationInput[]
    deleteMany?: PresentationAuthorScalarWhereInput | PresentationAuthorScalarWhereInput[]
  }

  export type PresentationCreateNestedOneWithoutMaterialsInput = {
    create?: XOR<PresentationCreateWithoutMaterialsInput, PresentationUncheckedCreateWithoutMaterialsInput>
    connectOrCreate?: PresentationCreateOrConnectWithoutMaterialsInput
    connect?: PresentationWhereUniqueInput
  }

  export type EnumMaterialTypeFieldUpdateOperationsInput = {
    set?: $Enums.MaterialType
  }

  export type PresentationUpdateOneRequiredWithoutMaterialsNestedInput = {
    create?: XOR<PresentationCreateWithoutMaterialsInput, PresentationUncheckedCreateWithoutMaterialsInput>
    connectOrCreate?: PresentationCreateOrConnectWithoutMaterialsInput
    upsert?: PresentationUpsertWithoutMaterialsInput
    connect?: PresentationWhereUniqueInput
    update?: XOR<XOR<PresentationUpdateToOneWithWhereWithoutMaterialsInput, PresentationUpdateWithoutMaterialsInput>, PresentationUncheckedUpdateWithoutMaterialsInput>
  }

  export type SectionCreateNestedOneWithoutBreaksInput = {
    create?: XOR<SectionCreateWithoutBreaksInput, SectionUncheckedCreateWithoutBreaksInput>
    connectOrCreate?: SectionCreateOrConnectWithoutBreaksInput
    connect?: SectionWhereUniqueInput
  }

  export type SectionUpdateOneRequiredWithoutBreaksNestedInput = {
    create?: XOR<SectionCreateWithoutBreaksInput, SectionUncheckedCreateWithoutBreaksInput>
    connectOrCreate?: SectionCreateOrConnectWithoutBreaksInput
    upsert?: SectionUpsertWithoutBreaksInput
    connect?: SectionWhereUniqueInput
    update?: XOR<XOR<SectionUpdateToOneWithWhereWithoutBreaksInput, SectionUpdateWithoutBreaksInput>, SectionUncheckedUpdateWithoutBreaksInput>
  }

  export type UserCreateNestedOneWithoutFavoritesInput = {
    create?: XOR<UserCreateWithoutFavoritesInput, UserUncheckedCreateWithoutFavoritesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFavoritesInput
    connect?: UserWhereUniqueInput
  }

  export type PresentationCreateNestedOneWithoutFavoritesInput = {
    create?: XOR<PresentationCreateWithoutFavoritesInput, PresentationUncheckedCreateWithoutFavoritesInput>
    connectOrCreate?: PresentationCreateOrConnectWithoutFavoritesInput
    connect?: PresentationWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutFavoritesNestedInput = {
    create?: XOR<UserCreateWithoutFavoritesInput, UserUncheckedCreateWithoutFavoritesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFavoritesInput
    upsert?: UserUpsertWithoutFavoritesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFavoritesInput, UserUpdateWithoutFavoritesInput>, UserUncheckedUpdateWithoutFavoritesInput>
  }

  export type PresentationUpdateOneRequiredWithoutFavoritesNestedInput = {
    create?: XOR<PresentationCreateWithoutFavoritesInput, PresentationUncheckedCreateWithoutFavoritesInput>
    connectOrCreate?: PresentationCreateOrConnectWithoutFavoritesInput
    upsert?: PresentationUpsertWithoutFavoritesInput
    connect?: PresentationWhereUniqueInput
    update?: XOR<XOR<PresentationUpdateToOneWithWhereWithoutFavoritesInput, PresentationUpdateWithoutFavoritesInput>, PresentationUncheckedUpdateWithoutFavoritesInput>
  }

  export type UserCreateNestedOneWithoutAdminActionsTakenInput = {
    create?: XOR<UserCreateWithoutAdminActionsTakenInput, UserUncheckedCreateWithoutAdminActionsTakenInput>
    connectOrCreate?: UserCreateOrConnectWithoutAdminActionsTakenInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAdminLogsAsOrganizerInput = {
    create?: XOR<UserCreateWithoutAdminLogsAsOrganizerInput, UserUncheckedCreateWithoutAdminLogsAsOrganizerInput>
    connectOrCreate?: UserCreateOrConnectWithoutAdminLogsAsOrganizerInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAdminActionsTakenNestedInput = {
    create?: XOR<UserCreateWithoutAdminActionsTakenInput, UserUncheckedCreateWithoutAdminActionsTakenInput>
    connectOrCreate?: UserCreateOrConnectWithoutAdminActionsTakenInput
    upsert?: UserUpsertWithoutAdminActionsTakenInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAdminActionsTakenInput, UserUpdateWithoutAdminActionsTakenInput>, UserUncheckedUpdateWithoutAdminActionsTakenInput>
  }

  export type UserUpdateOneRequiredWithoutAdminLogsAsOrganizerNestedInput = {
    create?: XOR<UserCreateWithoutAdminLogsAsOrganizerInput, UserUncheckedCreateWithoutAdminLogsAsOrganizerInput>
    connectOrCreate?: UserCreateOrConnectWithoutAdminLogsAsOrganizerInput
    upsert?: UserUpsertWithoutAdminLogsAsOrganizerInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAdminLogsAsOrganizerInput, UserUpdateWithoutAdminLogsAsOrganizerInput>, UserUncheckedUpdateWithoutAdminLogsAsOrganizerInput>
  }

  export type UserCreateNestedOneWithoutProfileInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutProfileNestedInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    upsert?: UserUpsertWithoutProfileInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProfileInput, UserUpdateWithoutProfileInput>, UserUncheckedUpdateWithoutProfileInput>
  }

  export type UserCreateNestedOneWithoutConferenceRegistrationsInput = {
    create?: XOR<UserCreateWithoutConferenceRegistrationsInput, UserUncheckedCreateWithoutConferenceRegistrationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutConferenceRegistrationsInput
    connect?: UserWhereUniqueInput
  }

  export type EventCreateNestedOneWithoutRegistrationsInput = {
    create?: XOR<EventCreateWithoutRegistrationsInput, EventUncheckedCreateWithoutRegistrationsInput>
    connectOrCreate?: EventCreateOrConnectWithoutRegistrationsInput
    connect?: EventWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutConferenceRegistrationsNestedInput = {
    create?: XOR<UserCreateWithoutConferenceRegistrationsInput, UserUncheckedCreateWithoutConferenceRegistrationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutConferenceRegistrationsInput
    upsert?: UserUpsertWithoutConferenceRegistrationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutConferenceRegistrationsInput, UserUpdateWithoutConferenceRegistrationsInput>, UserUncheckedUpdateWithoutConferenceRegistrationsInput>
  }

  export type EventUpdateOneRequiredWithoutRegistrationsNestedInput = {
    create?: XOR<EventCreateWithoutRegistrationsInput, EventUncheckedCreateWithoutRegistrationsInput>
    connectOrCreate?: EventCreateOrConnectWithoutRegistrationsInput
    upsert?: EventUpsertWithoutRegistrationsInput
    connect?: EventWhereUniqueInput
    update?: XOR<XOR<EventUpdateToOneWithWhereWithoutRegistrationsInput, EventUpdateWithoutRegistrationsInput>, EventUncheckedUpdateWithoutRegistrationsInput>
  }

  export type PresentationCreateNestedOneWithoutMetricsInput = {
    create?: XOR<PresentationCreateWithoutMetricsInput, PresentationUncheckedCreateWithoutMetricsInput>
    connectOrCreate?: PresentationCreateOrConnectWithoutMetricsInput
    connect?: PresentationWhereUniqueInput
  }

  export type PresentationUpdateOneRequiredWithoutMetricsNestedInput = {
    create?: XOR<PresentationCreateWithoutMetricsInput, PresentationUncheckedCreateWithoutMetricsInput>
    connectOrCreate?: PresentationCreateOrConnectWithoutMetricsInput
    upsert?: PresentationUpsertWithoutMetricsInput
    connect?: PresentationWhereUniqueInput
    update?: XOR<XOR<PresentationUpdateToOneWithWhereWithoutMetricsInput, PresentationUpdateWithoutMetricsInput>, PresentationUncheckedUpdateWithoutMetricsInput>
  }

  export type UserCreateNestedOneWithoutRefreshTokensInput = {
    create?: XOR<UserCreateWithoutRefreshTokensInput, UserUncheckedCreateWithoutRefreshTokensInput>
    connectOrCreate?: UserCreateOrConnectWithoutRefreshTokensInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutRefreshTokensNestedInput = {
    create?: XOR<UserCreateWithoutRefreshTokensInput, UserUncheckedCreateWithoutRefreshTokensInput>
    connectOrCreate?: UserCreateOrConnectWithoutRefreshTokensInput
    upsert?: UserUpsertWithoutRefreshTokensInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRefreshTokensInput, UserUpdateWithoutRefreshTokensInput>, UserUncheckedUpdateWithoutRefreshTokensInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumEventStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.EventStatus | EnumEventStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EventStatus[] | ListEnumEventStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EventStatus[] | ListEnumEventStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEventStatusFilter<$PrismaModel> | $Enums.EventStatus
  }

  export type NestedEnumEventStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EventStatus | EnumEventStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EventStatus[] | ListEnumEventStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EventStatus[] | ListEnumEventStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEventStatusWithAggregatesFilter<$PrismaModel> | $Enums.EventStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEventStatusFilter<$PrismaModel>
    _max?: NestedEnumEventStatusFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumAttendeeStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AttendeeStatus | EnumAttendeeStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AttendeeStatus[] | ListEnumAttendeeStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AttendeeStatus[] | ListEnumAttendeeStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAttendeeStatusFilter<$PrismaModel> | $Enums.AttendeeStatus
  }

  export type NestedEnumAttendeeStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AttendeeStatus | EnumAttendeeStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AttendeeStatus[] | ListEnumAttendeeStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AttendeeStatus[] | ListEnumAttendeeStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAttendeeStatusWithAggregatesFilter<$PrismaModel> | $Enums.AttendeeStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAttendeeStatusFilter<$PrismaModel>
    _max?: NestedEnumAttendeeStatusFilter<$PrismaModel>
  }

  export type NestedEnumPresentationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PresentationStatus | EnumPresentationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PresentationStatus[] | ListEnumPresentationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PresentationStatus[] | ListEnumPresentationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPresentationStatusFilter<$PrismaModel> | $Enums.PresentationStatus
  }

  export type NestedEnumSubmissionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.SubmissionType | EnumSubmissionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SubmissionType[] | ListEnumSubmissionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubmissionType[] | ListEnumSubmissionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSubmissionTypeFilter<$PrismaModel> | $Enums.SubmissionType
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumPresentationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PresentationStatus | EnumPresentationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PresentationStatus[] | ListEnumPresentationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PresentationStatus[] | ListEnumPresentationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPresentationStatusWithAggregatesFilter<$PrismaModel> | $Enums.PresentationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPresentationStatusFilter<$PrismaModel>
    _max?: NestedEnumPresentationStatusFilter<$PrismaModel>
  }

  export type NestedEnumSubmissionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SubmissionType | EnumSubmissionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SubmissionType[] | ListEnumSubmissionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubmissionType[] | ListEnumSubmissionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSubmissionTypeWithAggregatesFilter<$PrismaModel> | $Enums.SubmissionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSubmissionTypeFilter<$PrismaModel>
    _max?: NestedEnumSubmissionTypeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumMaterialTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.MaterialType | EnumMaterialTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MaterialType[] | ListEnumMaterialTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MaterialType[] | ListEnumMaterialTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMaterialTypeFilter<$PrismaModel> | $Enums.MaterialType
  }

  export type NestedEnumMaterialTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MaterialType | EnumMaterialTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MaterialType[] | ListEnumMaterialTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MaterialType[] | ListEnumMaterialTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMaterialTypeWithAggregatesFilter<$PrismaModel> | $Enums.MaterialType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMaterialTypeFilter<$PrismaModel>
    _max?: NestedEnumMaterialTypeFilter<$PrismaModel>
  }

  export type UserProfileCreateWithoutUserInput = {
    id?: string
    fullName: string
    bio?: string | null
    institution?: string | null
    photoUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserProfileUncheckedCreateWithoutUserInput = {
    id?: string
    fullName: string
    bio?: string | null
    institution?: string | null
    photoUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserProfileCreateOrConnectWithoutUserInput = {
    where: UserProfileWhereUniqueInput
    create: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
  }

  export type EventCreateWithoutOrganizerInput = {
    id?: string
    title: string
    description: string
    startDate: Date | string
    endDate: Date | string
    slug: string
    status?: $Enums.EventStatus
    isFeatured?: boolean
    maxCapacity?: number
    isEducational?: boolean
    viewCount?: number
    attendeeCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    location: LocationCreateNestedOneWithoutEventsInput
    images?: EventImageCreateNestedOneWithoutEventInput
    category: CategoryCreateNestedOneWithoutEventsInput
    attendees?: EventAttendeeCreateNestedManyWithoutEventInput
    days?: ConferenceDayCreateNestedManyWithoutEventInput
    registrations?: ConferenceRegistrationCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutOrganizerInput = {
    id?: string
    title: string
    description: string
    startDate: Date | string
    endDate: Date | string
    slug: string
    status?: $Enums.EventStatus
    isFeatured?: boolean
    locationId: string
    maxCapacity?: number
    isEducational?: boolean
    categoryId: string
    viewCount?: number
    attendeeCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: EventImageUncheckedCreateNestedOneWithoutEventInput
    attendees?: EventAttendeeUncheckedCreateNestedManyWithoutEventInput
    days?: ConferenceDayUncheckedCreateNestedManyWithoutEventInput
    registrations?: ConferenceRegistrationUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutOrganizerInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutOrganizerInput, EventUncheckedCreateWithoutOrganizerInput>
  }

  export type EventCreateManyOrganizerInputEnvelope = {
    data: EventCreateManyOrganizerInput | EventCreateManyOrganizerInput[]
    skipDuplicates?: boolean
  }

  export type EventAttendeeCreateWithoutUserInput = {
    id?: string
    status?: $Enums.AttendeeStatus
    registeredAt?: Date | string
    event: EventCreateNestedOneWithoutAttendeesInput
  }

  export type EventAttendeeUncheckedCreateWithoutUserInput = {
    id?: string
    status?: $Enums.AttendeeStatus
    registeredAt?: Date | string
    eventId: string
  }

  export type EventAttendeeCreateOrConnectWithoutUserInput = {
    where: EventAttendeeWhereUniqueInput
    create: XOR<EventAttendeeCreateWithoutUserInput, EventAttendeeUncheckedCreateWithoutUserInput>
  }

  export type EventAttendeeCreateManyUserInputEnvelope = {
    data: EventAttendeeCreateManyUserInput | EventAttendeeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FavoriteCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    presentation: PresentationCreateNestedOneWithoutFavoritesInput
  }

  export type FavoriteUncheckedCreateWithoutUserInput = {
    id?: string
    presentationId: string
    createdAt?: Date | string
  }

  export type FavoriteCreateOrConnectWithoutUserInput = {
    where: FavoriteWhereUniqueInput
    create: XOR<FavoriteCreateWithoutUserInput, FavoriteUncheckedCreateWithoutUserInput>
  }

  export type FavoriteCreateManyUserInputEnvelope = {
    data: FavoriteCreateManyUserInput | FavoriteCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PresentationAuthorCreateWithoutUserInput = {
    id?: string
    isCorrespondingAuthor?: boolean
    presentation: PresentationCreateNestedOneWithoutAuthorsInput
    affiliation?: AffiliationCreateNestedOneWithoutAuthorsInput
  }

  export type PresentationAuthorUncheckedCreateWithoutUserInput = {
    id?: string
    presentationId: string
    affiliationId?: string | null
    isCorrespondingAuthor?: boolean
  }

  export type PresentationAuthorCreateOrConnectWithoutUserInput = {
    where: PresentationAuthorWhereUniqueInput
    create: XOR<PresentationAuthorCreateWithoutUserInput, PresentationAuthorUncheckedCreateWithoutUserInput>
  }

  export type PresentationAuthorCreateManyUserInputEnvelope = {
    data: PresentationAuthorCreateManyUserInput | PresentationAuthorCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AdminActionLogCreateWithoutAdminInput = {
    id?: string
    action: string
    targetModel: string
    targetId: string
    reason?: string | null
    timestamp?: Date | string
    organizer: UserCreateNestedOneWithoutAdminLogsAsOrganizerInput
  }

  export type AdminActionLogUncheckedCreateWithoutAdminInput = {
    id?: string
    organizerId: string
    action: string
    targetModel: string
    targetId: string
    reason?: string | null
    timestamp?: Date | string
  }

  export type AdminActionLogCreateOrConnectWithoutAdminInput = {
    where: AdminActionLogWhereUniqueInput
    create: XOR<AdminActionLogCreateWithoutAdminInput, AdminActionLogUncheckedCreateWithoutAdminInput>
  }

  export type AdminActionLogCreateManyAdminInputEnvelope = {
    data: AdminActionLogCreateManyAdminInput | AdminActionLogCreateManyAdminInput[]
    skipDuplicates?: boolean
  }

  export type AdminActionLogCreateWithoutOrganizerInput = {
    id?: string
    action: string
    targetModel: string
    targetId: string
    reason?: string | null
    timestamp?: Date | string
    admin: UserCreateNestedOneWithoutAdminActionsTakenInput
  }

  export type AdminActionLogUncheckedCreateWithoutOrganizerInput = {
    id?: string
    adminId: string
    action: string
    targetModel: string
    targetId: string
    reason?: string | null
    timestamp?: Date | string
  }

  export type AdminActionLogCreateOrConnectWithoutOrganizerInput = {
    where: AdminActionLogWhereUniqueInput
    create: XOR<AdminActionLogCreateWithoutOrganizerInput, AdminActionLogUncheckedCreateWithoutOrganizerInput>
  }

  export type AdminActionLogCreateManyOrganizerInputEnvelope = {
    data: AdminActionLogCreateManyOrganizerInput | AdminActionLogCreateManyOrganizerInput[]
    skipDuplicates?: boolean
  }

  export type ConferenceRegistrationCreateWithoutUserInput = {
    id?: string
    registeredAt?: Date | string
    event: EventCreateNestedOneWithoutRegistrationsInput
  }

  export type ConferenceRegistrationUncheckedCreateWithoutUserInput = {
    id?: string
    eventId: string
    registeredAt?: Date | string
  }

  export type ConferenceRegistrationCreateOrConnectWithoutUserInput = {
    where: ConferenceRegistrationWhereUniqueInput
    create: XOR<ConferenceRegistrationCreateWithoutUserInput, ConferenceRegistrationUncheckedCreateWithoutUserInput>
  }

  export type ConferenceRegistrationCreateManyUserInputEnvelope = {
    data: ConferenceRegistrationCreateManyUserInput | ConferenceRegistrationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type RefreshTokenCreateWithoutUserInput = {
    id?: string
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type RefreshTokenUncheckedCreateWithoutUserInput = {
    id?: string
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type RefreshTokenCreateOrConnectWithoutUserInput = {
    where: RefreshTokenWhereUniqueInput
    create: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput>
  }

  export type RefreshTokenCreateManyUserInputEnvelope = {
    data: RefreshTokenCreateManyUserInput | RefreshTokenCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserProfileUpsertWithoutUserInput = {
    update: XOR<UserProfileUpdateWithoutUserInput, UserProfileUncheckedUpdateWithoutUserInput>
    create: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
    where?: UserProfileWhereInput
  }

  export type UserProfileUpdateToOneWithWhereWithoutUserInput = {
    where?: UserProfileWhereInput
    data: XOR<UserProfileUpdateWithoutUserInput, UserProfileUncheckedUpdateWithoutUserInput>
  }

  export type UserProfileUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    institution?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProfileUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    institution?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventUpsertWithWhereUniqueWithoutOrganizerInput = {
    where: EventWhereUniqueInput
    update: XOR<EventUpdateWithoutOrganizerInput, EventUncheckedUpdateWithoutOrganizerInput>
    create: XOR<EventCreateWithoutOrganizerInput, EventUncheckedCreateWithoutOrganizerInput>
  }

  export type EventUpdateWithWhereUniqueWithoutOrganizerInput = {
    where: EventWhereUniqueInput
    data: XOR<EventUpdateWithoutOrganizerInput, EventUncheckedUpdateWithoutOrganizerInput>
  }

  export type EventUpdateManyWithWhereWithoutOrganizerInput = {
    where: EventScalarWhereInput
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyWithoutOrganizerInput>
  }

  export type EventScalarWhereInput = {
    AND?: EventScalarWhereInput | EventScalarWhereInput[]
    OR?: EventScalarWhereInput[]
    NOT?: EventScalarWhereInput | EventScalarWhereInput[]
    id?: StringFilter<"Event"> | string
    title?: StringFilter<"Event"> | string
    description?: StringFilter<"Event"> | string
    startDate?: DateTimeFilter<"Event"> | Date | string
    endDate?: DateTimeFilter<"Event"> | Date | string
    slug?: StringFilter<"Event"> | string
    status?: EnumEventStatusFilter<"Event"> | $Enums.EventStatus
    isFeatured?: BoolFilter<"Event"> | boolean
    locationId?: StringFilter<"Event"> | string
    maxCapacity?: IntFilter<"Event"> | number
    isEducational?: BoolFilter<"Event"> | boolean
    organizerId?: StringFilter<"Event"> | string
    categoryId?: StringFilter<"Event"> | string
    viewCount?: IntFilter<"Event"> | number
    attendeeCount?: IntFilter<"Event"> | number
    createdAt?: DateTimeFilter<"Event"> | Date | string
    updatedAt?: DateTimeFilter<"Event"> | Date | string
  }

  export type EventAttendeeUpsertWithWhereUniqueWithoutUserInput = {
    where: EventAttendeeWhereUniqueInput
    update: XOR<EventAttendeeUpdateWithoutUserInput, EventAttendeeUncheckedUpdateWithoutUserInput>
    create: XOR<EventAttendeeCreateWithoutUserInput, EventAttendeeUncheckedCreateWithoutUserInput>
  }

  export type EventAttendeeUpdateWithWhereUniqueWithoutUserInput = {
    where: EventAttendeeWhereUniqueInput
    data: XOR<EventAttendeeUpdateWithoutUserInput, EventAttendeeUncheckedUpdateWithoutUserInput>
  }

  export type EventAttendeeUpdateManyWithWhereWithoutUserInput = {
    where: EventAttendeeScalarWhereInput
    data: XOR<EventAttendeeUpdateManyMutationInput, EventAttendeeUncheckedUpdateManyWithoutUserInput>
  }

  export type EventAttendeeScalarWhereInput = {
    AND?: EventAttendeeScalarWhereInput | EventAttendeeScalarWhereInput[]
    OR?: EventAttendeeScalarWhereInput[]
    NOT?: EventAttendeeScalarWhereInput | EventAttendeeScalarWhereInput[]
    id?: StringFilter<"EventAttendee"> | string
    status?: EnumAttendeeStatusFilter<"EventAttendee"> | $Enums.AttendeeStatus
    registeredAt?: DateTimeFilter<"EventAttendee"> | Date | string
    userId?: StringFilter<"EventAttendee"> | string
    eventId?: StringFilter<"EventAttendee"> | string
  }

  export type FavoriteUpsertWithWhereUniqueWithoutUserInput = {
    where: FavoriteWhereUniqueInput
    update: XOR<FavoriteUpdateWithoutUserInput, FavoriteUncheckedUpdateWithoutUserInput>
    create: XOR<FavoriteCreateWithoutUserInput, FavoriteUncheckedCreateWithoutUserInput>
  }

  export type FavoriteUpdateWithWhereUniqueWithoutUserInput = {
    where: FavoriteWhereUniqueInput
    data: XOR<FavoriteUpdateWithoutUserInput, FavoriteUncheckedUpdateWithoutUserInput>
  }

  export type FavoriteUpdateManyWithWhereWithoutUserInput = {
    where: FavoriteScalarWhereInput
    data: XOR<FavoriteUpdateManyMutationInput, FavoriteUncheckedUpdateManyWithoutUserInput>
  }

  export type FavoriteScalarWhereInput = {
    AND?: FavoriteScalarWhereInput | FavoriteScalarWhereInput[]
    OR?: FavoriteScalarWhereInput[]
    NOT?: FavoriteScalarWhereInput | FavoriteScalarWhereInput[]
    id?: StringFilter<"Favorite"> | string
    userId?: StringFilter<"Favorite"> | string
    presentationId?: StringFilter<"Favorite"> | string
    createdAt?: DateTimeFilter<"Favorite"> | Date | string
  }

  export type PresentationAuthorUpsertWithWhereUniqueWithoutUserInput = {
    where: PresentationAuthorWhereUniqueInput
    update: XOR<PresentationAuthorUpdateWithoutUserInput, PresentationAuthorUncheckedUpdateWithoutUserInput>
    create: XOR<PresentationAuthorCreateWithoutUserInput, PresentationAuthorUncheckedCreateWithoutUserInput>
  }

  export type PresentationAuthorUpdateWithWhereUniqueWithoutUserInput = {
    where: PresentationAuthorWhereUniqueInput
    data: XOR<PresentationAuthorUpdateWithoutUserInput, PresentationAuthorUncheckedUpdateWithoutUserInput>
  }

  export type PresentationAuthorUpdateManyWithWhereWithoutUserInput = {
    where: PresentationAuthorScalarWhereInput
    data: XOR<PresentationAuthorUpdateManyMutationInput, PresentationAuthorUncheckedUpdateManyWithoutUserInput>
  }

  export type PresentationAuthorScalarWhereInput = {
    AND?: PresentationAuthorScalarWhereInput | PresentationAuthorScalarWhereInput[]
    OR?: PresentationAuthorScalarWhereInput[]
    NOT?: PresentationAuthorScalarWhereInput | PresentationAuthorScalarWhereInput[]
    id?: StringFilter<"PresentationAuthor"> | string
    userId?: StringFilter<"PresentationAuthor"> | string
    presentationId?: StringFilter<"PresentationAuthor"> | string
    affiliationId?: StringNullableFilter<"PresentationAuthor"> | string | null
    isCorrespondingAuthor?: BoolFilter<"PresentationAuthor"> | boolean
  }

  export type AdminActionLogUpsertWithWhereUniqueWithoutAdminInput = {
    where: AdminActionLogWhereUniqueInput
    update: XOR<AdminActionLogUpdateWithoutAdminInput, AdminActionLogUncheckedUpdateWithoutAdminInput>
    create: XOR<AdminActionLogCreateWithoutAdminInput, AdminActionLogUncheckedCreateWithoutAdminInput>
  }

  export type AdminActionLogUpdateWithWhereUniqueWithoutAdminInput = {
    where: AdminActionLogWhereUniqueInput
    data: XOR<AdminActionLogUpdateWithoutAdminInput, AdminActionLogUncheckedUpdateWithoutAdminInput>
  }

  export type AdminActionLogUpdateManyWithWhereWithoutAdminInput = {
    where: AdminActionLogScalarWhereInput
    data: XOR<AdminActionLogUpdateManyMutationInput, AdminActionLogUncheckedUpdateManyWithoutAdminInput>
  }

  export type AdminActionLogScalarWhereInput = {
    AND?: AdminActionLogScalarWhereInput | AdminActionLogScalarWhereInput[]
    OR?: AdminActionLogScalarWhereInput[]
    NOT?: AdminActionLogScalarWhereInput | AdminActionLogScalarWhereInput[]
    id?: StringFilter<"AdminActionLog"> | string
    adminId?: StringFilter<"AdminActionLog"> | string
    organizerId?: StringFilter<"AdminActionLog"> | string
    action?: StringFilter<"AdminActionLog"> | string
    targetModel?: StringFilter<"AdminActionLog"> | string
    targetId?: StringFilter<"AdminActionLog"> | string
    reason?: StringNullableFilter<"AdminActionLog"> | string | null
    timestamp?: DateTimeFilter<"AdminActionLog"> | Date | string
  }

  export type AdminActionLogUpsertWithWhereUniqueWithoutOrganizerInput = {
    where: AdminActionLogWhereUniqueInput
    update: XOR<AdminActionLogUpdateWithoutOrganizerInput, AdminActionLogUncheckedUpdateWithoutOrganizerInput>
    create: XOR<AdminActionLogCreateWithoutOrganizerInput, AdminActionLogUncheckedCreateWithoutOrganizerInput>
  }

  export type AdminActionLogUpdateWithWhereUniqueWithoutOrganizerInput = {
    where: AdminActionLogWhereUniqueInput
    data: XOR<AdminActionLogUpdateWithoutOrganizerInput, AdminActionLogUncheckedUpdateWithoutOrganizerInput>
  }

  export type AdminActionLogUpdateManyWithWhereWithoutOrganizerInput = {
    where: AdminActionLogScalarWhereInput
    data: XOR<AdminActionLogUpdateManyMutationInput, AdminActionLogUncheckedUpdateManyWithoutOrganizerInput>
  }

  export type ConferenceRegistrationUpsertWithWhereUniqueWithoutUserInput = {
    where: ConferenceRegistrationWhereUniqueInput
    update: XOR<ConferenceRegistrationUpdateWithoutUserInput, ConferenceRegistrationUncheckedUpdateWithoutUserInput>
    create: XOR<ConferenceRegistrationCreateWithoutUserInput, ConferenceRegistrationUncheckedCreateWithoutUserInput>
  }

  export type ConferenceRegistrationUpdateWithWhereUniqueWithoutUserInput = {
    where: ConferenceRegistrationWhereUniqueInput
    data: XOR<ConferenceRegistrationUpdateWithoutUserInput, ConferenceRegistrationUncheckedUpdateWithoutUserInput>
  }

  export type ConferenceRegistrationUpdateManyWithWhereWithoutUserInput = {
    where: ConferenceRegistrationScalarWhereInput
    data: XOR<ConferenceRegistrationUpdateManyMutationInput, ConferenceRegistrationUncheckedUpdateManyWithoutUserInput>
  }

  export type ConferenceRegistrationScalarWhereInput = {
    AND?: ConferenceRegistrationScalarWhereInput | ConferenceRegistrationScalarWhereInput[]
    OR?: ConferenceRegistrationScalarWhereInput[]
    NOT?: ConferenceRegistrationScalarWhereInput | ConferenceRegistrationScalarWhereInput[]
    id?: StringFilter<"ConferenceRegistration"> | string
    userId?: StringFilter<"ConferenceRegistration"> | string
    eventId?: StringFilter<"ConferenceRegistration"> | string
    registeredAt?: DateTimeFilter<"ConferenceRegistration"> | Date | string
  }

  export type RefreshTokenUpsertWithWhereUniqueWithoutUserInput = {
    where: RefreshTokenWhereUniqueInput
    update: XOR<RefreshTokenUpdateWithoutUserInput, RefreshTokenUncheckedUpdateWithoutUserInput>
    create: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput>
  }

  export type RefreshTokenUpdateWithWhereUniqueWithoutUserInput = {
    where: RefreshTokenWhereUniqueInput
    data: XOR<RefreshTokenUpdateWithoutUserInput, RefreshTokenUncheckedUpdateWithoutUserInput>
  }

  export type RefreshTokenUpdateManyWithWhereWithoutUserInput = {
    where: RefreshTokenScalarWhereInput
    data: XOR<RefreshTokenUpdateManyMutationInput, RefreshTokenUncheckedUpdateManyWithoutUserInput>
  }

  export type RefreshTokenScalarWhereInput = {
    AND?: RefreshTokenScalarWhereInput | RefreshTokenScalarWhereInput[]
    OR?: RefreshTokenScalarWhereInput[]
    NOT?: RefreshTokenScalarWhereInput | RefreshTokenScalarWhereInput[]
    id?: StringFilter<"RefreshToken"> | string
    token?: StringFilter<"RefreshToken"> | string
    userId?: StringFilter<"RefreshToken"> | string
    expiresAt?: DateTimeFilter<"RefreshToken"> | Date | string
    createdAt?: DateTimeFilter<"RefreshToken"> | Date | string
  }

  export type EventCreateWithoutCategoryInput = {
    id?: string
    title: string
    description: string
    startDate: Date | string
    endDate: Date | string
    slug: string
    status?: $Enums.EventStatus
    isFeatured?: boolean
    maxCapacity?: number
    isEducational?: boolean
    viewCount?: number
    attendeeCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    location: LocationCreateNestedOneWithoutEventsInput
    images?: EventImageCreateNestedOneWithoutEventInput
    organizer: UserCreateNestedOneWithoutOrganizedEventsInput
    attendees?: EventAttendeeCreateNestedManyWithoutEventInput
    days?: ConferenceDayCreateNestedManyWithoutEventInput
    registrations?: ConferenceRegistrationCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutCategoryInput = {
    id?: string
    title: string
    description: string
    startDate: Date | string
    endDate: Date | string
    slug: string
    status?: $Enums.EventStatus
    isFeatured?: boolean
    locationId: string
    maxCapacity?: number
    isEducational?: boolean
    organizerId: string
    viewCount?: number
    attendeeCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: EventImageUncheckedCreateNestedOneWithoutEventInput
    attendees?: EventAttendeeUncheckedCreateNestedManyWithoutEventInput
    days?: ConferenceDayUncheckedCreateNestedManyWithoutEventInput
    registrations?: ConferenceRegistrationUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutCategoryInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutCategoryInput, EventUncheckedCreateWithoutCategoryInput>
  }

  export type EventCreateManyCategoryInputEnvelope = {
    data: EventCreateManyCategoryInput | EventCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type EventUpsertWithWhereUniqueWithoutCategoryInput = {
    where: EventWhereUniqueInput
    update: XOR<EventUpdateWithoutCategoryInput, EventUncheckedUpdateWithoutCategoryInput>
    create: XOR<EventCreateWithoutCategoryInput, EventUncheckedCreateWithoutCategoryInput>
  }

  export type EventUpdateWithWhereUniqueWithoutCategoryInput = {
    where: EventWhereUniqueInput
    data: XOR<EventUpdateWithoutCategoryInput, EventUncheckedUpdateWithoutCategoryInput>
  }

  export type EventUpdateManyWithWhereWithoutCategoryInput = {
    where: EventScalarWhereInput
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyWithoutCategoryInput>
  }

  export type LocationCreateWithoutEventsInput = {
    id?: string
    city: string
    country: string
    venue?: string | null
  }

  export type LocationUncheckedCreateWithoutEventsInput = {
    id?: string
    city: string
    country: string
    venue?: string | null
  }

  export type LocationCreateOrConnectWithoutEventsInput = {
    where: LocationWhereUniqueInput
    create: XOR<LocationCreateWithoutEventsInput, LocationUncheckedCreateWithoutEventsInput>
  }

  export type EventImageCreateWithoutEventInput = {
    id?: string
    banner?: string | null
    thumbnail?: string | null
  }

  export type EventImageUncheckedCreateWithoutEventInput = {
    id?: string
    banner?: string | null
    thumbnail?: string | null
  }

  export type EventImageCreateOrConnectWithoutEventInput = {
    where: EventImageWhereUniqueInput
    create: XOR<EventImageCreateWithoutEventInput, EventImageUncheckedCreateWithoutEventInput>
  }

  export type UserCreateWithoutOrganizedEventsInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    logo?: string | null
    profile?: UserProfileCreateNestedOneWithoutUserInput
    attendedEvents?: EventAttendeeCreateNestedManyWithoutUserInput
    favorites?: FavoriteCreateNestedManyWithoutUserInput
    authoredPresentations?: PresentationAuthorCreateNestedManyWithoutUserInput
    adminActionsTaken?: AdminActionLogCreateNestedManyWithoutAdminInput
    adminLogsAsOrganizer?: AdminActionLogCreateNestedManyWithoutOrganizerInput
    conferenceRegistrations?: ConferenceRegistrationCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOrganizedEventsInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    logo?: string | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    attendedEvents?: EventAttendeeUncheckedCreateNestedManyWithoutUserInput
    favorites?: FavoriteUncheckedCreateNestedManyWithoutUserInput
    authoredPresentations?: PresentationAuthorUncheckedCreateNestedManyWithoutUserInput
    adminActionsTaken?: AdminActionLogUncheckedCreateNestedManyWithoutAdminInput
    adminLogsAsOrganizer?: AdminActionLogUncheckedCreateNestedManyWithoutOrganizerInput
    conferenceRegistrations?: ConferenceRegistrationUncheckedCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOrganizedEventsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOrganizedEventsInput, UserUncheckedCreateWithoutOrganizedEventsInput>
  }

  export type CategoryCreateWithoutEventsInput = {
    id?: string
    name: string
    slug: string
    description?: string | null
    color?: string
    isActive?: boolean
    createdAt?: Date | string
  }

  export type CategoryUncheckedCreateWithoutEventsInput = {
    id?: string
    name: string
    slug: string
    description?: string | null
    color?: string
    isActive?: boolean
    createdAt?: Date | string
  }

  export type CategoryCreateOrConnectWithoutEventsInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutEventsInput, CategoryUncheckedCreateWithoutEventsInput>
  }

  export type EventAttendeeCreateWithoutEventInput = {
    id?: string
    status?: $Enums.AttendeeStatus
    registeredAt?: Date | string
    user: UserCreateNestedOneWithoutAttendedEventsInput
  }

  export type EventAttendeeUncheckedCreateWithoutEventInput = {
    id?: string
    status?: $Enums.AttendeeStatus
    registeredAt?: Date | string
    userId: string
  }

  export type EventAttendeeCreateOrConnectWithoutEventInput = {
    where: EventAttendeeWhereUniqueInput
    create: XOR<EventAttendeeCreateWithoutEventInput, EventAttendeeUncheckedCreateWithoutEventInput>
  }

  export type EventAttendeeCreateManyEventInputEnvelope = {
    data: EventAttendeeCreateManyEventInput | EventAttendeeCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type ConferenceDayCreateWithoutEventInput = {
    id?: string
    date: Date | string
    sortOrder: number
    sections?: SectionCreateNestedManyWithoutDayInput
  }

  export type ConferenceDayUncheckedCreateWithoutEventInput = {
    id?: string
    date: Date | string
    sortOrder: number
    sections?: SectionUncheckedCreateNestedManyWithoutDayInput
  }

  export type ConferenceDayCreateOrConnectWithoutEventInput = {
    where: ConferenceDayWhereUniqueInput
    create: XOR<ConferenceDayCreateWithoutEventInput, ConferenceDayUncheckedCreateWithoutEventInput>
  }

  export type ConferenceDayCreateManyEventInputEnvelope = {
    data: ConferenceDayCreateManyEventInput | ConferenceDayCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type ConferenceRegistrationCreateWithoutEventInput = {
    id?: string
    registeredAt?: Date | string
    user: UserCreateNestedOneWithoutConferenceRegistrationsInput
  }

  export type ConferenceRegistrationUncheckedCreateWithoutEventInput = {
    id?: string
    userId: string
    registeredAt?: Date | string
  }

  export type ConferenceRegistrationCreateOrConnectWithoutEventInput = {
    where: ConferenceRegistrationWhereUniqueInput
    create: XOR<ConferenceRegistrationCreateWithoutEventInput, ConferenceRegistrationUncheckedCreateWithoutEventInput>
  }

  export type ConferenceRegistrationCreateManyEventInputEnvelope = {
    data: ConferenceRegistrationCreateManyEventInput | ConferenceRegistrationCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type LocationUpsertWithoutEventsInput = {
    update: XOR<LocationUpdateWithoutEventsInput, LocationUncheckedUpdateWithoutEventsInput>
    create: XOR<LocationCreateWithoutEventsInput, LocationUncheckedCreateWithoutEventsInput>
    where?: LocationWhereInput
  }

  export type LocationUpdateToOneWithWhereWithoutEventsInput = {
    where?: LocationWhereInput
    data: XOR<LocationUpdateWithoutEventsInput, LocationUncheckedUpdateWithoutEventsInput>
  }

  export type LocationUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    venue?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LocationUncheckedUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    venue?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EventImageUpsertWithoutEventInput = {
    update: XOR<EventImageUpdateWithoutEventInput, EventImageUncheckedUpdateWithoutEventInput>
    create: XOR<EventImageCreateWithoutEventInput, EventImageUncheckedCreateWithoutEventInput>
    where?: EventImageWhereInput
  }

  export type EventImageUpdateToOneWithWhereWithoutEventInput = {
    where?: EventImageWhereInput
    data: XOR<EventImageUpdateWithoutEventInput, EventImageUncheckedUpdateWithoutEventInput>
  }

  export type EventImageUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EventImageUncheckedUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUpsertWithoutOrganizedEventsInput = {
    update: XOR<UserUpdateWithoutOrganizedEventsInput, UserUncheckedUpdateWithoutOrganizedEventsInput>
    create: XOR<UserCreateWithoutOrganizedEventsInput, UserUncheckedCreateWithoutOrganizedEventsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOrganizedEventsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOrganizedEventsInput, UserUncheckedUpdateWithoutOrganizedEventsInput>
  }

  export type UserUpdateWithoutOrganizedEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    attendedEvents?: EventAttendeeUpdateManyWithoutUserNestedInput
    favorites?: FavoriteUpdateManyWithoutUserNestedInput
    authoredPresentations?: PresentationAuthorUpdateManyWithoutUserNestedInput
    adminActionsTaken?: AdminActionLogUpdateManyWithoutAdminNestedInput
    adminLogsAsOrganizer?: AdminActionLogUpdateManyWithoutOrganizerNestedInput
    conferenceRegistrations?: ConferenceRegistrationUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOrganizedEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    attendedEvents?: EventAttendeeUncheckedUpdateManyWithoutUserNestedInput
    favorites?: FavoriteUncheckedUpdateManyWithoutUserNestedInput
    authoredPresentations?: PresentationAuthorUncheckedUpdateManyWithoutUserNestedInput
    adminActionsTaken?: AdminActionLogUncheckedUpdateManyWithoutAdminNestedInput
    adminLogsAsOrganizer?: AdminActionLogUncheckedUpdateManyWithoutOrganizerNestedInput
    conferenceRegistrations?: ConferenceRegistrationUncheckedUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CategoryUpsertWithoutEventsInput = {
    update: XOR<CategoryUpdateWithoutEventsInput, CategoryUncheckedUpdateWithoutEventsInput>
    create: XOR<CategoryCreateWithoutEventsInput, CategoryUncheckedCreateWithoutEventsInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutEventsInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutEventsInput, CategoryUncheckedUpdateWithoutEventsInput>
  }

  export type CategoryUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryUncheckedUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventAttendeeUpsertWithWhereUniqueWithoutEventInput = {
    where: EventAttendeeWhereUniqueInput
    update: XOR<EventAttendeeUpdateWithoutEventInput, EventAttendeeUncheckedUpdateWithoutEventInput>
    create: XOR<EventAttendeeCreateWithoutEventInput, EventAttendeeUncheckedCreateWithoutEventInput>
  }

  export type EventAttendeeUpdateWithWhereUniqueWithoutEventInput = {
    where: EventAttendeeWhereUniqueInput
    data: XOR<EventAttendeeUpdateWithoutEventInput, EventAttendeeUncheckedUpdateWithoutEventInput>
  }

  export type EventAttendeeUpdateManyWithWhereWithoutEventInput = {
    where: EventAttendeeScalarWhereInput
    data: XOR<EventAttendeeUpdateManyMutationInput, EventAttendeeUncheckedUpdateManyWithoutEventInput>
  }

  export type ConferenceDayUpsertWithWhereUniqueWithoutEventInput = {
    where: ConferenceDayWhereUniqueInput
    update: XOR<ConferenceDayUpdateWithoutEventInput, ConferenceDayUncheckedUpdateWithoutEventInput>
    create: XOR<ConferenceDayCreateWithoutEventInput, ConferenceDayUncheckedCreateWithoutEventInput>
  }

  export type ConferenceDayUpdateWithWhereUniqueWithoutEventInput = {
    where: ConferenceDayWhereUniqueInput
    data: XOR<ConferenceDayUpdateWithoutEventInput, ConferenceDayUncheckedUpdateWithoutEventInput>
  }

  export type ConferenceDayUpdateManyWithWhereWithoutEventInput = {
    where: ConferenceDayScalarWhereInput
    data: XOR<ConferenceDayUpdateManyMutationInput, ConferenceDayUncheckedUpdateManyWithoutEventInput>
  }

  export type ConferenceDayScalarWhereInput = {
    AND?: ConferenceDayScalarWhereInput | ConferenceDayScalarWhereInput[]
    OR?: ConferenceDayScalarWhereInput[]
    NOT?: ConferenceDayScalarWhereInput | ConferenceDayScalarWhereInput[]
    id?: StringFilter<"ConferenceDay"> | string
    date?: DateTimeFilter<"ConferenceDay"> | Date | string
    sortOrder?: IntFilter<"ConferenceDay"> | number
    eventId?: StringFilter<"ConferenceDay"> | string
  }

  export type ConferenceRegistrationUpsertWithWhereUniqueWithoutEventInput = {
    where: ConferenceRegistrationWhereUniqueInput
    update: XOR<ConferenceRegistrationUpdateWithoutEventInput, ConferenceRegistrationUncheckedUpdateWithoutEventInput>
    create: XOR<ConferenceRegistrationCreateWithoutEventInput, ConferenceRegistrationUncheckedCreateWithoutEventInput>
  }

  export type ConferenceRegistrationUpdateWithWhereUniqueWithoutEventInput = {
    where: ConferenceRegistrationWhereUniqueInput
    data: XOR<ConferenceRegistrationUpdateWithoutEventInput, ConferenceRegistrationUncheckedUpdateWithoutEventInput>
  }

  export type ConferenceRegistrationUpdateManyWithWhereWithoutEventInput = {
    where: ConferenceRegistrationScalarWhereInput
    data: XOR<ConferenceRegistrationUpdateManyMutationInput, ConferenceRegistrationUncheckedUpdateManyWithoutEventInput>
  }

  export type EventCreateWithoutLocationInput = {
    id?: string
    title: string
    description: string
    startDate: Date | string
    endDate: Date | string
    slug: string
    status?: $Enums.EventStatus
    isFeatured?: boolean
    maxCapacity?: number
    isEducational?: boolean
    viewCount?: number
    attendeeCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: EventImageCreateNestedOneWithoutEventInput
    organizer: UserCreateNestedOneWithoutOrganizedEventsInput
    category: CategoryCreateNestedOneWithoutEventsInput
    attendees?: EventAttendeeCreateNestedManyWithoutEventInput
    days?: ConferenceDayCreateNestedManyWithoutEventInput
    registrations?: ConferenceRegistrationCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutLocationInput = {
    id?: string
    title: string
    description: string
    startDate: Date | string
    endDate: Date | string
    slug: string
    status?: $Enums.EventStatus
    isFeatured?: boolean
    maxCapacity?: number
    isEducational?: boolean
    organizerId: string
    categoryId: string
    viewCount?: number
    attendeeCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: EventImageUncheckedCreateNestedOneWithoutEventInput
    attendees?: EventAttendeeUncheckedCreateNestedManyWithoutEventInput
    days?: ConferenceDayUncheckedCreateNestedManyWithoutEventInput
    registrations?: ConferenceRegistrationUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutLocationInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutLocationInput, EventUncheckedCreateWithoutLocationInput>
  }

  export type EventCreateManyLocationInputEnvelope = {
    data: EventCreateManyLocationInput | EventCreateManyLocationInput[]
    skipDuplicates?: boolean
  }

  export type EventUpsertWithWhereUniqueWithoutLocationInput = {
    where: EventWhereUniqueInput
    update: XOR<EventUpdateWithoutLocationInput, EventUncheckedUpdateWithoutLocationInput>
    create: XOR<EventCreateWithoutLocationInput, EventUncheckedCreateWithoutLocationInput>
  }

  export type EventUpdateWithWhereUniqueWithoutLocationInput = {
    where: EventWhereUniqueInput
    data: XOR<EventUpdateWithoutLocationInput, EventUncheckedUpdateWithoutLocationInput>
  }

  export type EventUpdateManyWithWhereWithoutLocationInput = {
    where: EventScalarWhereInput
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyWithoutLocationInput>
  }

  export type EventCreateWithoutImagesInput = {
    id?: string
    title: string
    description: string
    startDate: Date | string
    endDate: Date | string
    slug: string
    status?: $Enums.EventStatus
    isFeatured?: boolean
    maxCapacity?: number
    isEducational?: boolean
    viewCount?: number
    attendeeCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    location: LocationCreateNestedOneWithoutEventsInput
    organizer: UserCreateNestedOneWithoutOrganizedEventsInput
    category: CategoryCreateNestedOneWithoutEventsInput
    attendees?: EventAttendeeCreateNestedManyWithoutEventInput
    days?: ConferenceDayCreateNestedManyWithoutEventInput
    registrations?: ConferenceRegistrationCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutImagesInput = {
    id?: string
    title: string
    description: string
    startDate: Date | string
    endDate: Date | string
    slug: string
    status?: $Enums.EventStatus
    isFeatured?: boolean
    locationId: string
    maxCapacity?: number
    isEducational?: boolean
    organizerId: string
    categoryId: string
    viewCount?: number
    attendeeCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    attendees?: EventAttendeeUncheckedCreateNestedManyWithoutEventInput
    days?: ConferenceDayUncheckedCreateNestedManyWithoutEventInput
    registrations?: ConferenceRegistrationUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutImagesInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutImagesInput, EventUncheckedCreateWithoutImagesInput>
  }

  export type EventUpsertWithoutImagesInput = {
    update: XOR<EventUpdateWithoutImagesInput, EventUncheckedUpdateWithoutImagesInput>
    create: XOR<EventCreateWithoutImagesInput, EventUncheckedCreateWithoutImagesInput>
    where?: EventWhereInput
  }

  export type EventUpdateToOneWithWhereWithoutImagesInput = {
    where?: EventWhereInput
    data: XOR<EventUpdateWithoutImagesInput, EventUncheckedUpdateWithoutImagesInput>
  }

  export type EventUpdateWithoutImagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    isFeatured?: BoolFieldUpdateOperationsInput | boolean
    maxCapacity?: IntFieldUpdateOperationsInput | number
    isEducational?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    attendeeCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: LocationUpdateOneRequiredWithoutEventsNestedInput
    organizer?: UserUpdateOneRequiredWithoutOrganizedEventsNestedInput
    category?: CategoryUpdateOneRequiredWithoutEventsNestedInput
    attendees?: EventAttendeeUpdateManyWithoutEventNestedInput
    days?: ConferenceDayUpdateManyWithoutEventNestedInput
    registrations?: ConferenceRegistrationUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutImagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    isFeatured?: BoolFieldUpdateOperationsInput | boolean
    locationId?: StringFieldUpdateOperationsInput | string
    maxCapacity?: IntFieldUpdateOperationsInput | number
    isEducational?: BoolFieldUpdateOperationsInput | boolean
    organizerId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    viewCount?: IntFieldUpdateOperationsInput | number
    attendeeCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendees?: EventAttendeeUncheckedUpdateManyWithoutEventNestedInput
    days?: ConferenceDayUncheckedUpdateManyWithoutEventNestedInput
    registrations?: ConferenceRegistrationUncheckedUpdateManyWithoutEventNestedInput
  }

  export type UserCreateWithoutAttendedEventsInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    logo?: string | null
    profile?: UserProfileCreateNestedOneWithoutUserInput
    organizedEvents?: EventCreateNestedManyWithoutOrganizerInput
    favorites?: FavoriteCreateNestedManyWithoutUserInput
    authoredPresentations?: PresentationAuthorCreateNestedManyWithoutUserInput
    adminActionsTaken?: AdminActionLogCreateNestedManyWithoutAdminInput
    adminLogsAsOrganizer?: AdminActionLogCreateNestedManyWithoutOrganizerInput
    conferenceRegistrations?: ConferenceRegistrationCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAttendedEventsInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    logo?: string | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    organizedEvents?: EventUncheckedCreateNestedManyWithoutOrganizerInput
    favorites?: FavoriteUncheckedCreateNestedManyWithoutUserInput
    authoredPresentations?: PresentationAuthorUncheckedCreateNestedManyWithoutUserInput
    adminActionsTaken?: AdminActionLogUncheckedCreateNestedManyWithoutAdminInput
    adminLogsAsOrganizer?: AdminActionLogUncheckedCreateNestedManyWithoutOrganizerInput
    conferenceRegistrations?: ConferenceRegistrationUncheckedCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAttendedEventsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAttendedEventsInput, UserUncheckedCreateWithoutAttendedEventsInput>
  }

  export type EventCreateWithoutAttendeesInput = {
    id?: string
    title: string
    description: string
    startDate: Date | string
    endDate: Date | string
    slug: string
    status?: $Enums.EventStatus
    isFeatured?: boolean
    maxCapacity?: number
    isEducational?: boolean
    viewCount?: number
    attendeeCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    location: LocationCreateNestedOneWithoutEventsInput
    images?: EventImageCreateNestedOneWithoutEventInput
    organizer: UserCreateNestedOneWithoutOrganizedEventsInput
    category: CategoryCreateNestedOneWithoutEventsInput
    days?: ConferenceDayCreateNestedManyWithoutEventInput
    registrations?: ConferenceRegistrationCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutAttendeesInput = {
    id?: string
    title: string
    description: string
    startDate: Date | string
    endDate: Date | string
    slug: string
    status?: $Enums.EventStatus
    isFeatured?: boolean
    locationId: string
    maxCapacity?: number
    isEducational?: boolean
    organizerId: string
    categoryId: string
    viewCount?: number
    attendeeCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: EventImageUncheckedCreateNestedOneWithoutEventInput
    days?: ConferenceDayUncheckedCreateNestedManyWithoutEventInput
    registrations?: ConferenceRegistrationUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutAttendeesInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutAttendeesInput, EventUncheckedCreateWithoutAttendeesInput>
  }

  export type UserUpsertWithoutAttendedEventsInput = {
    update: XOR<UserUpdateWithoutAttendedEventsInput, UserUncheckedUpdateWithoutAttendedEventsInput>
    create: XOR<UserCreateWithoutAttendedEventsInput, UserUncheckedCreateWithoutAttendedEventsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAttendedEventsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAttendedEventsInput, UserUncheckedUpdateWithoutAttendedEventsInput>
  }

  export type UserUpdateWithoutAttendedEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    organizedEvents?: EventUpdateManyWithoutOrganizerNestedInput
    favorites?: FavoriteUpdateManyWithoutUserNestedInput
    authoredPresentations?: PresentationAuthorUpdateManyWithoutUserNestedInput
    adminActionsTaken?: AdminActionLogUpdateManyWithoutAdminNestedInput
    adminLogsAsOrganizer?: AdminActionLogUpdateManyWithoutOrganizerNestedInput
    conferenceRegistrations?: ConferenceRegistrationUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAttendedEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    organizedEvents?: EventUncheckedUpdateManyWithoutOrganizerNestedInput
    favorites?: FavoriteUncheckedUpdateManyWithoutUserNestedInput
    authoredPresentations?: PresentationAuthorUncheckedUpdateManyWithoutUserNestedInput
    adminActionsTaken?: AdminActionLogUncheckedUpdateManyWithoutAdminNestedInput
    adminLogsAsOrganizer?: AdminActionLogUncheckedUpdateManyWithoutOrganizerNestedInput
    conferenceRegistrations?: ConferenceRegistrationUncheckedUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
  }

  export type EventUpsertWithoutAttendeesInput = {
    update: XOR<EventUpdateWithoutAttendeesInput, EventUncheckedUpdateWithoutAttendeesInput>
    create: XOR<EventCreateWithoutAttendeesInput, EventUncheckedCreateWithoutAttendeesInput>
    where?: EventWhereInput
  }

  export type EventUpdateToOneWithWhereWithoutAttendeesInput = {
    where?: EventWhereInput
    data: XOR<EventUpdateWithoutAttendeesInput, EventUncheckedUpdateWithoutAttendeesInput>
  }

  export type EventUpdateWithoutAttendeesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    isFeatured?: BoolFieldUpdateOperationsInput | boolean
    maxCapacity?: IntFieldUpdateOperationsInput | number
    isEducational?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    attendeeCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: LocationUpdateOneRequiredWithoutEventsNestedInput
    images?: EventImageUpdateOneWithoutEventNestedInput
    organizer?: UserUpdateOneRequiredWithoutOrganizedEventsNestedInput
    category?: CategoryUpdateOneRequiredWithoutEventsNestedInput
    days?: ConferenceDayUpdateManyWithoutEventNestedInput
    registrations?: ConferenceRegistrationUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutAttendeesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    isFeatured?: BoolFieldUpdateOperationsInput | boolean
    locationId?: StringFieldUpdateOperationsInput | string
    maxCapacity?: IntFieldUpdateOperationsInput | number
    isEducational?: BoolFieldUpdateOperationsInput | boolean
    organizerId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    viewCount?: IntFieldUpdateOperationsInput | number
    attendeeCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: EventImageUncheckedUpdateOneWithoutEventNestedInput
    days?: ConferenceDayUncheckedUpdateManyWithoutEventNestedInput
    registrations?: ConferenceRegistrationUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EventCreateWithoutDaysInput = {
    id?: string
    title: string
    description: string
    startDate: Date | string
    endDate: Date | string
    slug: string
    status?: $Enums.EventStatus
    isFeatured?: boolean
    maxCapacity?: number
    isEducational?: boolean
    viewCount?: number
    attendeeCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    location: LocationCreateNestedOneWithoutEventsInput
    images?: EventImageCreateNestedOneWithoutEventInput
    organizer: UserCreateNestedOneWithoutOrganizedEventsInput
    category: CategoryCreateNestedOneWithoutEventsInput
    attendees?: EventAttendeeCreateNestedManyWithoutEventInput
    registrations?: ConferenceRegistrationCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutDaysInput = {
    id?: string
    title: string
    description: string
    startDate: Date | string
    endDate: Date | string
    slug: string
    status?: $Enums.EventStatus
    isFeatured?: boolean
    locationId: string
    maxCapacity?: number
    isEducational?: boolean
    organizerId: string
    categoryId: string
    viewCount?: number
    attendeeCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: EventImageUncheckedCreateNestedOneWithoutEventInput
    attendees?: EventAttendeeUncheckedCreateNestedManyWithoutEventInput
    registrations?: ConferenceRegistrationUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutDaysInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutDaysInput, EventUncheckedCreateWithoutDaysInput>
  }

  export type SectionCreateWithoutDayInput = {
    id?: string
    title: string
    description?: string | null
    sortOrder: number
    startTime: Date | string
    endTime: Date | string
    presentations?: PresentationCreateNestedManyWithoutSectionInput
    breaks?: BreakCreateNestedManyWithoutSectionInput
  }

  export type SectionUncheckedCreateWithoutDayInput = {
    id?: string
    title: string
    description?: string | null
    sortOrder: number
    startTime: Date | string
    endTime: Date | string
    presentations?: PresentationUncheckedCreateNestedManyWithoutSectionInput
    breaks?: BreakUncheckedCreateNestedManyWithoutSectionInput
  }

  export type SectionCreateOrConnectWithoutDayInput = {
    where: SectionWhereUniqueInput
    create: XOR<SectionCreateWithoutDayInput, SectionUncheckedCreateWithoutDayInput>
  }

  export type SectionCreateManyDayInputEnvelope = {
    data: SectionCreateManyDayInput | SectionCreateManyDayInput[]
    skipDuplicates?: boolean
  }

  export type EventUpsertWithoutDaysInput = {
    update: XOR<EventUpdateWithoutDaysInput, EventUncheckedUpdateWithoutDaysInput>
    create: XOR<EventCreateWithoutDaysInput, EventUncheckedCreateWithoutDaysInput>
    where?: EventWhereInput
  }

  export type EventUpdateToOneWithWhereWithoutDaysInput = {
    where?: EventWhereInput
    data: XOR<EventUpdateWithoutDaysInput, EventUncheckedUpdateWithoutDaysInput>
  }

  export type EventUpdateWithoutDaysInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    isFeatured?: BoolFieldUpdateOperationsInput | boolean
    maxCapacity?: IntFieldUpdateOperationsInput | number
    isEducational?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    attendeeCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: LocationUpdateOneRequiredWithoutEventsNestedInput
    images?: EventImageUpdateOneWithoutEventNestedInput
    organizer?: UserUpdateOneRequiredWithoutOrganizedEventsNestedInput
    category?: CategoryUpdateOneRequiredWithoutEventsNestedInput
    attendees?: EventAttendeeUpdateManyWithoutEventNestedInput
    registrations?: ConferenceRegistrationUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutDaysInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    isFeatured?: BoolFieldUpdateOperationsInput | boolean
    locationId?: StringFieldUpdateOperationsInput | string
    maxCapacity?: IntFieldUpdateOperationsInput | number
    isEducational?: BoolFieldUpdateOperationsInput | boolean
    organizerId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    viewCount?: IntFieldUpdateOperationsInput | number
    attendeeCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: EventImageUncheckedUpdateOneWithoutEventNestedInput
    attendees?: EventAttendeeUncheckedUpdateManyWithoutEventNestedInput
    registrations?: ConferenceRegistrationUncheckedUpdateManyWithoutEventNestedInput
  }

  export type SectionUpsertWithWhereUniqueWithoutDayInput = {
    where: SectionWhereUniqueInput
    update: XOR<SectionUpdateWithoutDayInput, SectionUncheckedUpdateWithoutDayInput>
    create: XOR<SectionCreateWithoutDayInput, SectionUncheckedCreateWithoutDayInput>
  }

  export type SectionUpdateWithWhereUniqueWithoutDayInput = {
    where: SectionWhereUniqueInput
    data: XOR<SectionUpdateWithoutDayInput, SectionUncheckedUpdateWithoutDayInput>
  }

  export type SectionUpdateManyWithWhereWithoutDayInput = {
    where: SectionScalarWhereInput
    data: XOR<SectionUpdateManyMutationInput, SectionUncheckedUpdateManyWithoutDayInput>
  }

  export type SectionScalarWhereInput = {
    AND?: SectionScalarWhereInput | SectionScalarWhereInput[]
    OR?: SectionScalarWhereInput[]
    NOT?: SectionScalarWhereInput | SectionScalarWhereInput[]
    id?: StringFilter<"Section"> | string
    title?: StringFilter<"Section"> | string
    description?: StringNullableFilter<"Section"> | string | null
    sortOrder?: IntFilter<"Section"> | number
    startTime?: DateTimeFilter<"Section"> | Date | string
    endTime?: DateTimeFilter<"Section"> | Date | string
    dayId?: StringFilter<"Section"> | string
  }

  export type ConferenceDayCreateWithoutSectionsInput = {
    id?: string
    date: Date | string
    sortOrder: number
    event: EventCreateNestedOneWithoutDaysInput
  }

  export type ConferenceDayUncheckedCreateWithoutSectionsInput = {
    id?: string
    date: Date | string
    sortOrder: number
    eventId: string
  }

  export type ConferenceDayCreateOrConnectWithoutSectionsInput = {
    where: ConferenceDayWhereUniqueInput
    create: XOR<ConferenceDayCreateWithoutSectionsInput, ConferenceDayUncheckedCreateWithoutSectionsInput>
  }

  export type PresentationCreateWithoutSectionInput = {
    id?: string
    title: string
    abstract: string
    durationMin: number
    keywords?: PresentationCreatekeywordsInput | string[]
    status?: $Enums.PresentationStatus
    submissionType: $Enums.SubmissionType
    sortOrder: number
    startTime?: Date | string | null
    endTime?: Date | string | null
    viewCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    submittedAt?: Date | string | null
    metrics?: PresentationMetricsCreateNestedOneWithoutPresentationInput
    authors?: PresentationAuthorCreateNestedManyWithoutPresentationInput
    materials?: PresentationMaterialCreateNestedManyWithoutPresentationInput
    favorites?: FavoriteCreateNestedManyWithoutPresentationInput
  }

  export type PresentationUncheckedCreateWithoutSectionInput = {
    id?: string
    title: string
    abstract: string
    durationMin: number
    keywords?: PresentationCreatekeywordsInput | string[]
    status?: $Enums.PresentationStatus
    submissionType: $Enums.SubmissionType
    sortOrder: number
    startTime?: Date | string | null
    endTime?: Date | string | null
    viewCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    submittedAt?: Date | string | null
    metrics?: PresentationMetricsUncheckedCreateNestedOneWithoutPresentationInput
    authors?: PresentationAuthorUncheckedCreateNestedManyWithoutPresentationInput
    materials?: PresentationMaterialUncheckedCreateNestedManyWithoutPresentationInput
    favorites?: FavoriteUncheckedCreateNestedManyWithoutPresentationInput
  }

  export type PresentationCreateOrConnectWithoutSectionInput = {
    where: PresentationWhereUniqueInput
    create: XOR<PresentationCreateWithoutSectionInput, PresentationUncheckedCreateWithoutSectionInput>
  }

  export type PresentationCreateManySectionInputEnvelope = {
    data: PresentationCreateManySectionInput | PresentationCreateManySectionInput[]
    skipDuplicates?: boolean
  }

  export type BreakCreateWithoutSectionInput = {
    id?: string
    title: string
    description?: string | null
    startTime: Date | string
    endTime: Date | string
  }

  export type BreakUncheckedCreateWithoutSectionInput = {
    id?: string
    title: string
    description?: string | null
    startTime: Date | string
    endTime: Date | string
  }

  export type BreakCreateOrConnectWithoutSectionInput = {
    where: BreakWhereUniqueInput
    create: XOR<BreakCreateWithoutSectionInput, BreakUncheckedCreateWithoutSectionInput>
  }

  export type BreakCreateManySectionInputEnvelope = {
    data: BreakCreateManySectionInput | BreakCreateManySectionInput[]
    skipDuplicates?: boolean
  }

  export type ConferenceDayUpsertWithoutSectionsInput = {
    update: XOR<ConferenceDayUpdateWithoutSectionsInput, ConferenceDayUncheckedUpdateWithoutSectionsInput>
    create: XOR<ConferenceDayCreateWithoutSectionsInput, ConferenceDayUncheckedCreateWithoutSectionsInput>
    where?: ConferenceDayWhereInput
  }

  export type ConferenceDayUpdateToOneWithWhereWithoutSectionsInput = {
    where?: ConferenceDayWhereInput
    data: XOR<ConferenceDayUpdateWithoutSectionsInput, ConferenceDayUncheckedUpdateWithoutSectionsInput>
  }

  export type ConferenceDayUpdateWithoutSectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    event?: EventUpdateOneRequiredWithoutDaysNestedInput
  }

  export type ConferenceDayUncheckedUpdateWithoutSectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    eventId?: StringFieldUpdateOperationsInput | string
  }

  export type PresentationUpsertWithWhereUniqueWithoutSectionInput = {
    where: PresentationWhereUniqueInput
    update: XOR<PresentationUpdateWithoutSectionInput, PresentationUncheckedUpdateWithoutSectionInput>
    create: XOR<PresentationCreateWithoutSectionInput, PresentationUncheckedCreateWithoutSectionInput>
  }

  export type PresentationUpdateWithWhereUniqueWithoutSectionInput = {
    where: PresentationWhereUniqueInput
    data: XOR<PresentationUpdateWithoutSectionInput, PresentationUncheckedUpdateWithoutSectionInput>
  }

  export type PresentationUpdateManyWithWhereWithoutSectionInput = {
    where: PresentationScalarWhereInput
    data: XOR<PresentationUpdateManyMutationInput, PresentationUncheckedUpdateManyWithoutSectionInput>
  }

  export type PresentationScalarWhereInput = {
    AND?: PresentationScalarWhereInput | PresentationScalarWhereInput[]
    OR?: PresentationScalarWhereInput[]
    NOT?: PresentationScalarWhereInput | PresentationScalarWhereInput[]
    id?: StringFilter<"Presentation"> | string
    title?: StringFilter<"Presentation"> | string
    abstract?: StringFilter<"Presentation"> | string
    durationMin?: IntFilter<"Presentation"> | number
    keywords?: StringNullableListFilter<"Presentation">
    status?: EnumPresentationStatusFilter<"Presentation"> | $Enums.PresentationStatus
    submissionType?: EnumSubmissionTypeFilter<"Presentation"> | $Enums.SubmissionType
    sortOrder?: IntFilter<"Presentation"> | number
    startTime?: DateTimeNullableFilter<"Presentation"> | Date | string | null
    endTime?: DateTimeNullableFilter<"Presentation"> | Date | string | null
    sectionId?: StringFilter<"Presentation"> | string
    viewCount?: IntFilter<"Presentation"> | number
    createdAt?: DateTimeFilter<"Presentation"> | Date | string
    updatedAt?: DateTimeFilter<"Presentation"> | Date | string
    submittedAt?: DateTimeNullableFilter<"Presentation"> | Date | string | null
  }

  export type BreakUpsertWithWhereUniqueWithoutSectionInput = {
    where: BreakWhereUniqueInput
    update: XOR<BreakUpdateWithoutSectionInput, BreakUncheckedUpdateWithoutSectionInput>
    create: XOR<BreakCreateWithoutSectionInput, BreakUncheckedCreateWithoutSectionInput>
  }

  export type BreakUpdateWithWhereUniqueWithoutSectionInput = {
    where: BreakWhereUniqueInput
    data: XOR<BreakUpdateWithoutSectionInput, BreakUncheckedUpdateWithoutSectionInput>
  }

  export type BreakUpdateManyWithWhereWithoutSectionInput = {
    where: BreakScalarWhereInput
    data: XOR<BreakUpdateManyMutationInput, BreakUncheckedUpdateManyWithoutSectionInput>
  }

  export type BreakScalarWhereInput = {
    AND?: BreakScalarWhereInput | BreakScalarWhereInput[]
    OR?: BreakScalarWhereInput[]
    NOT?: BreakScalarWhereInput | BreakScalarWhereInput[]
    id?: StringFilter<"Break"> | string
    title?: StringFilter<"Break"> | string
    description?: StringNullableFilter<"Break"> | string | null
    startTime?: DateTimeFilter<"Break"> | Date | string
    endTime?: DateTimeFilter<"Break"> | Date | string
    sectionId?: StringFilter<"Break"> | string
  }

  export type SectionCreateWithoutPresentationsInput = {
    id?: string
    title: string
    description?: string | null
    sortOrder: number
    startTime: Date | string
    endTime: Date | string
    day: ConferenceDayCreateNestedOneWithoutSectionsInput
    breaks?: BreakCreateNestedManyWithoutSectionInput
  }

  export type SectionUncheckedCreateWithoutPresentationsInput = {
    id?: string
    title: string
    description?: string | null
    sortOrder: number
    startTime: Date | string
    endTime: Date | string
    dayId: string
    breaks?: BreakUncheckedCreateNestedManyWithoutSectionInput
  }

  export type SectionCreateOrConnectWithoutPresentationsInput = {
    where: SectionWhereUniqueInput
    create: XOR<SectionCreateWithoutPresentationsInput, SectionUncheckedCreateWithoutPresentationsInput>
  }

  export type PresentationMetricsCreateWithoutPresentationInput = {
    id?: string
    viewCount?: number
    lastViewedAt?: Date | string | null
    updatedAt?: Date | string
  }

  export type PresentationMetricsUncheckedCreateWithoutPresentationInput = {
    id?: string
    viewCount?: number
    lastViewedAt?: Date | string | null
    updatedAt?: Date | string
  }

  export type PresentationMetricsCreateOrConnectWithoutPresentationInput = {
    where: PresentationMetricsWhereUniqueInput
    create: XOR<PresentationMetricsCreateWithoutPresentationInput, PresentationMetricsUncheckedCreateWithoutPresentationInput>
  }

  export type PresentationAuthorCreateWithoutPresentationInput = {
    id?: string
    isCorrespondingAuthor?: boolean
    user: UserCreateNestedOneWithoutAuthoredPresentationsInput
    affiliation?: AffiliationCreateNestedOneWithoutAuthorsInput
  }

  export type PresentationAuthorUncheckedCreateWithoutPresentationInput = {
    id?: string
    userId: string
    affiliationId?: string | null
    isCorrespondingAuthor?: boolean
  }

  export type PresentationAuthorCreateOrConnectWithoutPresentationInput = {
    where: PresentationAuthorWhereUniqueInput
    create: XOR<PresentationAuthorCreateWithoutPresentationInput, PresentationAuthorUncheckedCreateWithoutPresentationInput>
  }

  export type PresentationAuthorCreateManyPresentationInputEnvelope = {
    data: PresentationAuthorCreateManyPresentationInput | PresentationAuthorCreateManyPresentationInput[]
    skipDuplicates?: boolean
  }

  export type PresentationMaterialCreateWithoutPresentationInput = {
    id?: string
    fileUrl: string
    fileType: $Enums.MaterialType
    label?: string | null
    uploadedAt?: Date | string
  }

  export type PresentationMaterialUncheckedCreateWithoutPresentationInput = {
    id?: string
    fileUrl: string
    fileType: $Enums.MaterialType
    label?: string | null
    uploadedAt?: Date | string
  }

  export type PresentationMaterialCreateOrConnectWithoutPresentationInput = {
    where: PresentationMaterialWhereUniqueInput
    create: XOR<PresentationMaterialCreateWithoutPresentationInput, PresentationMaterialUncheckedCreateWithoutPresentationInput>
  }

  export type PresentationMaterialCreateManyPresentationInputEnvelope = {
    data: PresentationMaterialCreateManyPresentationInput | PresentationMaterialCreateManyPresentationInput[]
    skipDuplicates?: boolean
  }

  export type FavoriteCreateWithoutPresentationInput = {
    id?: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutFavoritesInput
  }

  export type FavoriteUncheckedCreateWithoutPresentationInput = {
    id?: string
    userId: string
    createdAt?: Date | string
  }

  export type FavoriteCreateOrConnectWithoutPresentationInput = {
    where: FavoriteWhereUniqueInput
    create: XOR<FavoriteCreateWithoutPresentationInput, FavoriteUncheckedCreateWithoutPresentationInput>
  }

  export type FavoriteCreateManyPresentationInputEnvelope = {
    data: FavoriteCreateManyPresentationInput | FavoriteCreateManyPresentationInput[]
    skipDuplicates?: boolean
  }

  export type SectionUpsertWithoutPresentationsInput = {
    update: XOR<SectionUpdateWithoutPresentationsInput, SectionUncheckedUpdateWithoutPresentationsInput>
    create: XOR<SectionCreateWithoutPresentationsInput, SectionUncheckedCreateWithoutPresentationsInput>
    where?: SectionWhereInput
  }

  export type SectionUpdateToOneWithWhereWithoutPresentationsInput = {
    where?: SectionWhereInput
    data: XOR<SectionUpdateWithoutPresentationsInput, SectionUncheckedUpdateWithoutPresentationsInput>
  }

  export type SectionUpdateWithoutPresentationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    day?: ConferenceDayUpdateOneRequiredWithoutSectionsNestedInput
    breaks?: BreakUpdateManyWithoutSectionNestedInput
  }

  export type SectionUncheckedUpdateWithoutPresentationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    dayId?: StringFieldUpdateOperationsInput | string
    breaks?: BreakUncheckedUpdateManyWithoutSectionNestedInput
  }

  export type PresentationMetricsUpsertWithoutPresentationInput = {
    update: XOR<PresentationMetricsUpdateWithoutPresentationInput, PresentationMetricsUncheckedUpdateWithoutPresentationInput>
    create: XOR<PresentationMetricsCreateWithoutPresentationInput, PresentationMetricsUncheckedCreateWithoutPresentationInput>
    where?: PresentationMetricsWhereInput
  }

  export type PresentationMetricsUpdateToOneWithWhereWithoutPresentationInput = {
    where?: PresentationMetricsWhereInput
    data: XOR<PresentationMetricsUpdateWithoutPresentationInput, PresentationMetricsUncheckedUpdateWithoutPresentationInput>
  }

  export type PresentationMetricsUpdateWithoutPresentationInput = {
    id?: StringFieldUpdateOperationsInput | string
    viewCount?: IntFieldUpdateOperationsInput | number
    lastViewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PresentationMetricsUncheckedUpdateWithoutPresentationInput = {
    id?: StringFieldUpdateOperationsInput | string
    viewCount?: IntFieldUpdateOperationsInput | number
    lastViewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PresentationAuthorUpsertWithWhereUniqueWithoutPresentationInput = {
    where: PresentationAuthorWhereUniqueInput
    update: XOR<PresentationAuthorUpdateWithoutPresentationInput, PresentationAuthorUncheckedUpdateWithoutPresentationInput>
    create: XOR<PresentationAuthorCreateWithoutPresentationInput, PresentationAuthorUncheckedCreateWithoutPresentationInput>
  }

  export type PresentationAuthorUpdateWithWhereUniqueWithoutPresentationInput = {
    where: PresentationAuthorWhereUniqueInput
    data: XOR<PresentationAuthorUpdateWithoutPresentationInput, PresentationAuthorUncheckedUpdateWithoutPresentationInput>
  }

  export type PresentationAuthorUpdateManyWithWhereWithoutPresentationInput = {
    where: PresentationAuthorScalarWhereInput
    data: XOR<PresentationAuthorUpdateManyMutationInput, PresentationAuthorUncheckedUpdateManyWithoutPresentationInput>
  }

  export type PresentationMaterialUpsertWithWhereUniqueWithoutPresentationInput = {
    where: PresentationMaterialWhereUniqueInput
    update: XOR<PresentationMaterialUpdateWithoutPresentationInput, PresentationMaterialUncheckedUpdateWithoutPresentationInput>
    create: XOR<PresentationMaterialCreateWithoutPresentationInput, PresentationMaterialUncheckedCreateWithoutPresentationInput>
  }

  export type PresentationMaterialUpdateWithWhereUniqueWithoutPresentationInput = {
    where: PresentationMaterialWhereUniqueInput
    data: XOR<PresentationMaterialUpdateWithoutPresentationInput, PresentationMaterialUncheckedUpdateWithoutPresentationInput>
  }

  export type PresentationMaterialUpdateManyWithWhereWithoutPresentationInput = {
    where: PresentationMaterialScalarWhereInput
    data: XOR<PresentationMaterialUpdateManyMutationInput, PresentationMaterialUncheckedUpdateManyWithoutPresentationInput>
  }

  export type PresentationMaterialScalarWhereInput = {
    AND?: PresentationMaterialScalarWhereInput | PresentationMaterialScalarWhereInput[]
    OR?: PresentationMaterialScalarWhereInput[]
    NOT?: PresentationMaterialScalarWhereInput | PresentationMaterialScalarWhereInput[]
    id?: StringFilter<"PresentationMaterial"> | string
    fileUrl?: StringFilter<"PresentationMaterial"> | string
    fileType?: EnumMaterialTypeFilter<"PresentationMaterial"> | $Enums.MaterialType
    label?: StringNullableFilter<"PresentationMaterial"> | string | null
    presentationId?: StringFilter<"PresentationMaterial"> | string
    uploadedAt?: DateTimeFilter<"PresentationMaterial"> | Date | string
  }

  export type FavoriteUpsertWithWhereUniqueWithoutPresentationInput = {
    where: FavoriteWhereUniqueInput
    update: XOR<FavoriteUpdateWithoutPresentationInput, FavoriteUncheckedUpdateWithoutPresentationInput>
    create: XOR<FavoriteCreateWithoutPresentationInput, FavoriteUncheckedCreateWithoutPresentationInput>
  }

  export type FavoriteUpdateWithWhereUniqueWithoutPresentationInput = {
    where: FavoriteWhereUniqueInput
    data: XOR<FavoriteUpdateWithoutPresentationInput, FavoriteUncheckedUpdateWithoutPresentationInput>
  }

  export type FavoriteUpdateManyWithWhereWithoutPresentationInput = {
    where: FavoriteScalarWhereInput
    data: XOR<FavoriteUpdateManyMutationInput, FavoriteUncheckedUpdateManyWithoutPresentationInput>
  }

  export type UserCreateWithoutAuthoredPresentationsInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    logo?: string | null
    profile?: UserProfileCreateNestedOneWithoutUserInput
    organizedEvents?: EventCreateNestedManyWithoutOrganizerInput
    attendedEvents?: EventAttendeeCreateNestedManyWithoutUserInput
    favorites?: FavoriteCreateNestedManyWithoutUserInput
    adminActionsTaken?: AdminActionLogCreateNestedManyWithoutAdminInput
    adminLogsAsOrganizer?: AdminActionLogCreateNestedManyWithoutOrganizerInput
    conferenceRegistrations?: ConferenceRegistrationCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAuthoredPresentationsInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    logo?: string | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    organizedEvents?: EventUncheckedCreateNestedManyWithoutOrganizerInput
    attendedEvents?: EventAttendeeUncheckedCreateNestedManyWithoutUserInput
    favorites?: FavoriteUncheckedCreateNestedManyWithoutUserInput
    adminActionsTaken?: AdminActionLogUncheckedCreateNestedManyWithoutAdminInput
    adminLogsAsOrganizer?: AdminActionLogUncheckedCreateNestedManyWithoutOrganizerInput
    conferenceRegistrations?: ConferenceRegistrationUncheckedCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAuthoredPresentationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAuthoredPresentationsInput, UserUncheckedCreateWithoutAuthoredPresentationsInput>
  }

  export type PresentationCreateWithoutAuthorsInput = {
    id?: string
    title: string
    abstract: string
    durationMin: number
    keywords?: PresentationCreatekeywordsInput | string[]
    status?: $Enums.PresentationStatus
    submissionType: $Enums.SubmissionType
    sortOrder: number
    startTime?: Date | string | null
    endTime?: Date | string | null
    viewCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    submittedAt?: Date | string | null
    section: SectionCreateNestedOneWithoutPresentationsInput
    metrics?: PresentationMetricsCreateNestedOneWithoutPresentationInput
    materials?: PresentationMaterialCreateNestedManyWithoutPresentationInput
    favorites?: FavoriteCreateNestedManyWithoutPresentationInput
  }

  export type PresentationUncheckedCreateWithoutAuthorsInput = {
    id?: string
    title: string
    abstract: string
    durationMin: number
    keywords?: PresentationCreatekeywordsInput | string[]
    status?: $Enums.PresentationStatus
    submissionType: $Enums.SubmissionType
    sortOrder: number
    startTime?: Date | string | null
    endTime?: Date | string | null
    sectionId: string
    viewCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    submittedAt?: Date | string | null
    metrics?: PresentationMetricsUncheckedCreateNestedOneWithoutPresentationInput
    materials?: PresentationMaterialUncheckedCreateNestedManyWithoutPresentationInput
    favorites?: FavoriteUncheckedCreateNestedManyWithoutPresentationInput
  }

  export type PresentationCreateOrConnectWithoutAuthorsInput = {
    where: PresentationWhereUniqueInput
    create: XOR<PresentationCreateWithoutAuthorsInput, PresentationUncheckedCreateWithoutAuthorsInput>
  }

  export type AffiliationCreateWithoutAuthorsInput = {
    id?: string
    name: string
    country?: string | null
  }

  export type AffiliationUncheckedCreateWithoutAuthorsInput = {
    id?: string
    name: string
    country?: string | null
  }

  export type AffiliationCreateOrConnectWithoutAuthorsInput = {
    where: AffiliationWhereUniqueInput
    create: XOR<AffiliationCreateWithoutAuthorsInput, AffiliationUncheckedCreateWithoutAuthorsInput>
  }

  export type UserUpsertWithoutAuthoredPresentationsInput = {
    update: XOR<UserUpdateWithoutAuthoredPresentationsInput, UserUncheckedUpdateWithoutAuthoredPresentationsInput>
    create: XOR<UserCreateWithoutAuthoredPresentationsInput, UserUncheckedCreateWithoutAuthoredPresentationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAuthoredPresentationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAuthoredPresentationsInput, UserUncheckedUpdateWithoutAuthoredPresentationsInput>
  }

  export type UserUpdateWithoutAuthoredPresentationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    organizedEvents?: EventUpdateManyWithoutOrganizerNestedInput
    attendedEvents?: EventAttendeeUpdateManyWithoutUserNestedInput
    favorites?: FavoriteUpdateManyWithoutUserNestedInput
    adminActionsTaken?: AdminActionLogUpdateManyWithoutAdminNestedInput
    adminLogsAsOrganizer?: AdminActionLogUpdateManyWithoutOrganizerNestedInput
    conferenceRegistrations?: ConferenceRegistrationUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAuthoredPresentationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    organizedEvents?: EventUncheckedUpdateManyWithoutOrganizerNestedInput
    attendedEvents?: EventAttendeeUncheckedUpdateManyWithoutUserNestedInput
    favorites?: FavoriteUncheckedUpdateManyWithoutUserNestedInput
    adminActionsTaken?: AdminActionLogUncheckedUpdateManyWithoutAdminNestedInput
    adminLogsAsOrganizer?: AdminActionLogUncheckedUpdateManyWithoutOrganizerNestedInput
    conferenceRegistrations?: ConferenceRegistrationUncheckedUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PresentationUpsertWithoutAuthorsInput = {
    update: XOR<PresentationUpdateWithoutAuthorsInput, PresentationUncheckedUpdateWithoutAuthorsInput>
    create: XOR<PresentationCreateWithoutAuthorsInput, PresentationUncheckedCreateWithoutAuthorsInput>
    where?: PresentationWhereInput
  }

  export type PresentationUpdateToOneWithWhereWithoutAuthorsInput = {
    where?: PresentationWhereInput
    data: XOR<PresentationUpdateWithoutAuthorsInput, PresentationUncheckedUpdateWithoutAuthorsInput>
  }

  export type PresentationUpdateWithoutAuthorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    abstract?: StringFieldUpdateOperationsInput | string
    durationMin?: IntFieldUpdateOperationsInput | number
    keywords?: PresentationUpdatekeywordsInput | string[]
    status?: EnumPresentationStatusFieldUpdateOperationsInput | $Enums.PresentationStatus
    submissionType?: EnumSubmissionTypeFieldUpdateOperationsInput | $Enums.SubmissionType
    sortOrder?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    viewCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    section?: SectionUpdateOneRequiredWithoutPresentationsNestedInput
    metrics?: PresentationMetricsUpdateOneWithoutPresentationNestedInput
    materials?: PresentationMaterialUpdateManyWithoutPresentationNestedInput
    favorites?: FavoriteUpdateManyWithoutPresentationNestedInput
  }

  export type PresentationUncheckedUpdateWithoutAuthorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    abstract?: StringFieldUpdateOperationsInput | string
    durationMin?: IntFieldUpdateOperationsInput | number
    keywords?: PresentationUpdatekeywordsInput | string[]
    status?: EnumPresentationStatusFieldUpdateOperationsInput | $Enums.PresentationStatus
    submissionType?: EnumSubmissionTypeFieldUpdateOperationsInput | $Enums.SubmissionType
    sortOrder?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sectionId?: StringFieldUpdateOperationsInput | string
    viewCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metrics?: PresentationMetricsUncheckedUpdateOneWithoutPresentationNestedInput
    materials?: PresentationMaterialUncheckedUpdateManyWithoutPresentationNestedInput
    favorites?: FavoriteUncheckedUpdateManyWithoutPresentationNestedInput
  }

  export type AffiliationUpsertWithoutAuthorsInput = {
    update: XOR<AffiliationUpdateWithoutAuthorsInput, AffiliationUncheckedUpdateWithoutAuthorsInput>
    create: XOR<AffiliationCreateWithoutAuthorsInput, AffiliationUncheckedCreateWithoutAuthorsInput>
    where?: AffiliationWhereInput
  }

  export type AffiliationUpdateToOneWithWhereWithoutAuthorsInput = {
    where?: AffiliationWhereInput
    data: XOR<AffiliationUpdateWithoutAuthorsInput, AffiliationUncheckedUpdateWithoutAuthorsInput>
  }

  export type AffiliationUpdateWithoutAuthorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    country?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AffiliationUncheckedUpdateWithoutAuthorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    country?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PresentationAuthorCreateWithoutAffiliationInput = {
    id?: string
    isCorrespondingAuthor?: boolean
    user: UserCreateNestedOneWithoutAuthoredPresentationsInput
    presentation: PresentationCreateNestedOneWithoutAuthorsInput
  }

  export type PresentationAuthorUncheckedCreateWithoutAffiliationInput = {
    id?: string
    userId: string
    presentationId: string
    isCorrespondingAuthor?: boolean
  }

  export type PresentationAuthorCreateOrConnectWithoutAffiliationInput = {
    where: PresentationAuthorWhereUniqueInput
    create: XOR<PresentationAuthorCreateWithoutAffiliationInput, PresentationAuthorUncheckedCreateWithoutAffiliationInput>
  }

  export type PresentationAuthorCreateManyAffiliationInputEnvelope = {
    data: PresentationAuthorCreateManyAffiliationInput | PresentationAuthorCreateManyAffiliationInput[]
    skipDuplicates?: boolean
  }

  export type PresentationAuthorUpsertWithWhereUniqueWithoutAffiliationInput = {
    where: PresentationAuthorWhereUniqueInput
    update: XOR<PresentationAuthorUpdateWithoutAffiliationInput, PresentationAuthorUncheckedUpdateWithoutAffiliationInput>
    create: XOR<PresentationAuthorCreateWithoutAffiliationInput, PresentationAuthorUncheckedCreateWithoutAffiliationInput>
  }

  export type PresentationAuthorUpdateWithWhereUniqueWithoutAffiliationInput = {
    where: PresentationAuthorWhereUniqueInput
    data: XOR<PresentationAuthorUpdateWithoutAffiliationInput, PresentationAuthorUncheckedUpdateWithoutAffiliationInput>
  }

  export type PresentationAuthorUpdateManyWithWhereWithoutAffiliationInput = {
    where: PresentationAuthorScalarWhereInput
    data: XOR<PresentationAuthorUpdateManyMutationInput, PresentationAuthorUncheckedUpdateManyWithoutAffiliationInput>
  }

  export type PresentationCreateWithoutMaterialsInput = {
    id?: string
    title: string
    abstract: string
    durationMin: number
    keywords?: PresentationCreatekeywordsInput | string[]
    status?: $Enums.PresentationStatus
    submissionType: $Enums.SubmissionType
    sortOrder: number
    startTime?: Date | string | null
    endTime?: Date | string | null
    viewCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    submittedAt?: Date | string | null
    section: SectionCreateNestedOneWithoutPresentationsInput
    metrics?: PresentationMetricsCreateNestedOneWithoutPresentationInput
    authors?: PresentationAuthorCreateNestedManyWithoutPresentationInput
    favorites?: FavoriteCreateNestedManyWithoutPresentationInput
  }

  export type PresentationUncheckedCreateWithoutMaterialsInput = {
    id?: string
    title: string
    abstract: string
    durationMin: number
    keywords?: PresentationCreatekeywordsInput | string[]
    status?: $Enums.PresentationStatus
    submissionType: $Enums.SubmissionType
    sortOrder: number
    startTime?: Date | string | null
    endTime?: Date | string | null
    sectionId: string
    viewCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    submittedAt?: Date | string | null
    metrics?: PresentationMetricsUncheckedCreateNestedOneWithoutPresentationInput
    authors?: PresentationAuthorUncheckedCreateNestedManyWithoutPresentationInput
    favorites?: FavoriteUncheckedCreateNestedManyWithoutPresentationInput
  }

  export type PresentationCreateOrConnectWithoutMaterialsInput = {
    where: PresentationWhereUniqueInput
    create: XOR<PresentationCreateWithoutMaterialsInput, PresentationUncheckedCreateWithoutMaterialsInput>
  }

  export type PresentationUpsertWithoutMaterialsInput = {
    update: XOR<PresentationUpdateWithoutMaterialsInput, PresentationUncheckedUpdateWithoutMaterialsInput>
    create: XOR<PresentationCreateWithoutMaterialsInput, PresentationUncheckedCreateWithoutMaterialsInput>
    where?: PresentationWhereInput
  }

  export type PresentationUpdateToOneWithWhereWithoutMaterialsInput = {
    where?: PresentationWhereInput
    data: XOR<PresentationUpdateWithoutMaterialsInput, PresentationUncheckedUpdateWithoutMaterialsInput>
  }

  export type PresentationUpdateWithoutMaterialsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    abstract?: StringFieldUpdateOperationsInput | string
    durationMin?: IntFieldUpdateOperationsInput | number
    keywords?: PresentationUpdatekeywordsInput | string[]
    status?: EnumPresentationStatusFieldUpdateOperationsInput | $Enums.PresentationStatus
    submissionType?: EnumSubmissionTypeFieldUpdateOperationsInput | $Enums.SubmissionType
    sortOrder?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    viewCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    section?: SectionUpdateOneRequiredWithoutPresentationsNestedInput
    metrics?: PresentationMetricsUpdateOneWithoutPresentationNestedInput
    authors?: PresentationAuthorUpdateManyWithoutPresentationNestedInput
    favorites?: FavoriteUpdateManyWithoutPresentationNestedInput
  }

  export type PresentationUncheckedUpdateWithoutMaterialsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    abstract?: StringFieldUpdateOperationsInput | string
    durationMin?: IntFieldUpdateOperationsInput | number
    keywords?: PresentationUpdatekeywordsInput | string[]
    status?: EnumPresentationStatusFieldUpdateOperationsInput | $Enums.PresentationStatus
    submissionType?: EnumSubmissionTypeFieldUpdateOperationsInput | $Enums.SubmissionType
    sortOrder?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sectionId?: StringFieldUpdateOperationsInput | string
    viewCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metrics?: PresentationMetricsUncheckedUpdateOneWithoutPresentationNestedInput
    authors?: PresentationAuthorUncheckedUpdateManyWithoutPresentationNestedInput
    favorites?: FavoriteUncheckedUpdateManyWithoutPresentationNestedInput
  }

  export type SectionCreateWithoutBreaksInput = {
    id?: string
    title: string
    description?: string | null
    sortOrder: number
    startTime: Date | string
    endTime: Date | string
    day: ConferenceDayCreateNestedOneWithoutSectionsInput
    presentations?: PresentationCreateNestedManyWithoutSectionInput
  }

  export type SectionUncheckedCreateWithoutBreaksInput = {
    id?: string
    title: string
    description?: string | null
    sortOrder: number
    startTime: Date | string
    endTime: Date | string
    dayId: string
    presentations?: PresentationUncheckedCreateNestedManyWithoutSectionInput
  }

  export type SectionCreateOrConnectWithoutBreaksInput = {
    where: SectionWhereUniqueInput
    create: XOR<SectionCreateWithoutBreaksInput, SectionUncheckedCreateWithoutBreaksInput>
  }

  export type SectionUpsertWithoutBreaksInput = {
    update: XOR<SectionUpdateWithoutBreaksInput, SectionUncheckedUpdateWithoutBreaksInput>
    create: XOR<SectionCreateWithoutBreaksInput, SectionUncheckedCreateWithoutBreaksInput>
    where?: SectionWhereInput
  }

  export type SectionUpdateToOneWithWhereWithoutBreaksInput = {
    where?: SectionWhereInput
    data: XOR<SectionUpdateWithoutBreaksInput, SectionUncheckedUpdateWithoutBreaksInput>
  }

  export type SectionUpdateWithoutBreaksInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    day?: ConferenceDayUpdateOneRequiredWithoutSectionsNestedInput
    presentations?: PresentationUpdateManyWithoutSectionNestedInput
  }

  export type SectionUncheckedUpdateWithoutBreaksInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    dayId?: StringFieldUpdateOperationsInput | string
    presentations?: PresentationUncheckedUpdateManyWithoutSectionNestedInput
  }

  export type UserCreateWithoutFavoritesInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    logo?: string | null
    profile?: UserProfileCreateNestedOneWithoutUserInput
    organizedEvents?: EventCreateNestedManyWithoutOrganizerInput
    attendedEvents?: EventAttendeeCreateNestedManyWithoutUserInput
    authoredPresentations?: PresentationAuthorCreateNestedManyWithoutUserInput
    adminActionsTaken?: AdminActionLogCreateNestedManyWithoutAdminInput
    adminLogsAsOrganizer?: AdminActionLogCreateNestedManyWithoutOrganizerInput
    conferenceRegistrations?: ConferenceRegistrationCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFavoritesInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    logo?: string | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    organizedEvents?: EventUncheckedCreateNestedManyWithoutOrganizerInput
    attendedEvents?: EventAttendeeUncheckedCreateNestedManyWithoutUserInput
    authoredPresentations?: PresentationAuthorUncheckedCreateNestedManyWithoutUserInput
    adminActionsTaken?: AdminActionLogUncheckedCreateNestedManyWithoutAdminInput
    adminLogsAsOrganizer?: AdminActionLogUncheckedCreateNestedManyWithoutOrganizerInput
    conferenceRegistrations?: ConferenceRegistrationUncheckedCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFavoritesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFavoritesInput, UserUncheckedCreateWithoutFavoritesInput>
  }

  export type PresentationCreateWithoutFavoritesInput = {
    id?: string
    title: string
    abstract: string
    durationMin: number
    keywords?: PresentationCreatekeywordsInput | string[]
    status?: $Enums.PresentationStatus
    submissionType: $Enums.SubmissionType
    sortOrder: number
    startTime?: Date | string | null
    endTime?: Date | string | null
    viewCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    submittedAt?: Date | string | null
    section: SectionCreateNestedOneWithoutPresentationsInput
    metrics?: PresentationMetricsCreateNestedOneWithoutPresentationInput
    authors?: PresentationAuthorCreateNestedManyWithoutPresentationInput
    materials?: PresentationMaterialCreateNestedManyWithoutPresentationInput
  }

  export type PresentationUncheckedCreateWithoutFavoritesInput = {
    id?: string
    title: string
    abstract: string
    durationMin: number
    keywords?: PresentationCreatekeywordsInput | string[]
    status?: $Enums.PresentationStatus
    submissionType: $Enums.SubmissionType
    sortOrder: number
    startTime?: Date | string | null
    endTime?: Date | string | null
    sectionId: string
    viewCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    submittedAt?: Date | string | null
    metrics?: PresentationMetricsUncheckedCreateNestedOneWithoutPresentationInput
    authors?: PresentationAuthorUncheckedCreateNestedManyWithoutPresentationInput
    materials?: PresentationMaterialUncheckedCreateNestedManyWithoutPresentationInput
  }

  export type PresentationCreateOrConnectWithoutFavoritesInput = {
    where: PresentationWhereUniqueInput
    create: XOR<PresentationCreateWithoutFavoritesInput, PresentationUncheckedCreateWithoutFavoritesInput>
  }

  export type UserUpsertWithoutFavoritesInput = {
    update: XOR<UserUpdateWithoutFavoritesInput, UserUncheckedUpdateWithoutFavoritesInput>
    create: XOR<UserCreateWithoutFavoritesInput, UserUncheckedCreateWithoutFavoritesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFavoritesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFavoritesInput, UserUncheckedUpdateWithoutFavoritesInput>
  }

  export type UserUpdateWithoutFavoritesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    organizedEvents?: EventUpdateManyWithoutOrganizerNestedInput
    attendedEvents?: EventAttendeeUpdateManyWithoutUserNestedInput
    authoredPresentations?: PresentationAuthorUpdateManyWithoutUserNestedInput
    adminActionsTaken?: AdminActionLogUpdateManyWithoutAdminNestedInput
    adminLogsAsOrganizer?: AdminActionLogUpdateManyWithoutOrganizerNestedInput
    conferenceRegistrations?: ConferenceRegistrationUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFavoritesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    organizedEvents?: EventUncheckedUpdateManyWithoutOrganizerNestedInput
    attendedEvents?: EventAttendeeUncheckedUpdateManyWithoutUserNestedInput
    authoredPresentations?: PresentationAuthorUncheckedUpdateManyWithoutUserNestedInput
    adminActionsTaken?: AdminActionLogUncheckedUpdateManyWithoutAdminNestedInput
    adminLogsAsOrganizer?: AdminActionLogUncheckedUpdateManyWithoutOrganizerNestedInput
    conferenceRegistrations?: ConferenceRegistrationUncheckedUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PresentationUpsertWithoutFavoritesInput = {
    update: XOR<PresentationUpdateWithoutFavoritesInput, PresentationUncheckedUpdateWithoutFavoritesInput>
    create: XOR<PresentationCreateWithoutFavoritesInput, PresentationUncheckedCreateWithoutFavoritesInput>
    where?: PresentationWhereInput
  }

  export type PresentationUpdateToOneWithWhereWithoutFavoritesInput = {
    where?: PresentationWhereInput
    data: XOR<PresentationUpdateWithoutFavoritesInput, PresentationUncheckedUpdateWithoutFavoritesInput>
  }

  export type PresentationUpdateWithoutFavoritesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    abstract?: StringFieldUpdateOperationsInput | string
    durationMin?: IntFieldUpdateOperationsInput | number
    keywords?: PresentationUpdatekeywordsInput | string[]
    status?: EnumPresentationStatusFieldUpdateOperationsInput | $Enums.PresentationStatus
    submissionType?: EnumSubmissionTypeFieldUpdateOperationsInput | $Enums.SubmissionType
    sortOrder?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    viewCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    section?: SectionUpdateOneRequiredWithoutPresentationsNestedInput
    metrics?: PresentationMetricsUpdateOneWithoutPresentationNestedInput
    authors?: PresentationAuthorUpdateManyWithoutPresentationNestedInput
    materials?: PresentationMaterialUpdateManyWithoutPresentationNestedInput
  }

  export type PresentationUncheckedUpdateWithoutFavoritesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    abstract?: StringFieldUpdateOperationsInput | string
    durationMin?: IntFieldUpdateOperationsInput | number
    keywords?: PresentationUpdatekeywordsInput | string[]
    status?: EnumPresentationStatusFieldUpdateOperationsInput | $Enums.PresentationStatus
    submissionType?: EnumSubmissionTypeFieldUpdateOperationsInput | $Enums.SubmissionType
    sortOrder?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sectionId?: StringFieldUpdateOperationsInput | string
    viewCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metrics?: PresentationMetricsUncheckedUpdateOneWithoutPresentationNestedInput
    authors?: PresentationAuthorUncheckedUpdateManyWithoutPresentationNestedInput
    materials?: PresentationMaterialUncheckedUpdateManyWithoutPresentationNestedInput
  }

  export type UserCreateWithoutAdminActionsTakenInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    logo?: string | null
    profile?: UserProfileCreateNestedOneWithoutUserInput
    organizedEvents?: EventCreateNestedManyWithoutOrganizerInput
    attendedEvents?: EventAttendeeCreateNestedManyWithoutUserInput
    favorites?: FavoriteCreateNestedManyWithoutUserInput
    authoredPresentations?: PresentationAuthorCreateNestedManyWithoutUserInput
    adminLogsAsOrganizer?: AdminActionLogCreateNestedManyWithoutOrganizerInput
    conferenceRegistrations?: ConferenceRegistrationCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAdminActionsTakenInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    logo?: string | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    organizedEvents?: EventUncheckedCreateNestedManyWithoutOrganizerInput
    attendedEvents?: EventAttendeeUncheckedCreateNestedManyWithoutUserInput
    favorites?: FavoriteUncheckedCreateNestedManyWithoutUserInput
    authoredPresentations?: PresentationAuthorUncheckedCreateNestedManyWithoutUserInput
    adminLogsAsOrganizer?: AdminActionLogUncheckedCreateNestedManyWithoutOrganizerInput
    conferenceRegistrations?: ConferenceRegistrationUncheckedCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAdminActionsTakenInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAdminActionsTakenInput, UserUncheckedCreateWithoutAdminActionsTakenInput>
  }

  export type UserCreateWithoutAdminLogsAsOrganizerInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    logo?: string | null
    profile?: UserProfileCreateNestedOneWithoutUserInput
    organizedEvents?: EventCreateNestedManyWithoutOrganizerInput
    attendedEvents?: EventAttendeeCreateNestedManyWithoutUserInput
    favorites?: FavoriteCreateNestedManyWithoutUserInput
    authoredPresentations?: PresentationAuthorCreateNestedManyWithoutUserInput
    adminActionsTaken?: AdminActionLogCreateNestedManyWithoutAdminInput
    conferenceRegistrations?: ConferenceRegistrationCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAdminLogsAsOrganizerInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    logo?: string | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    organizedEvents?: EventUncheckedCreateNestedManyWithoutOrganizerInput
    attendedEvents?: EventAttendeeUncheckedCreateNestedManyWithoutUserInput
    favorites?: FavoriteUncheckedCreateNestedManyWithoutUserInput
    authoredPresentations?: PresentationAuthorUncheckedCreateNestedManyWithoutUserInput
    adminActionsTaken?: AdminActionLogUncheckedCreateNestedManyWithoutAdminInput
    conferenceRegistrations?: ConferenceRegistrationUncheckedCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAdminLogsAsOrganizerInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAdminLogsAsOrganizerInput, UserUncheckedCreateWithoutAdminLogsAsOrganizerInput>
  }

  export type UserUpsertWithoutAdminActionsTakenInput = {
    update: XOR<UserUpdateWithoutAdminActionsTakenInput, UserUncheckedUpdateWithoutAdminActionsTakenInput>
    create: XOR<UserCreateWithoutAdminActionsTakenInput, UserUncheckedCreateWithoutAdminActionsTakenInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAdminActionsTakenInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAdminActionsTakenInput, UserUncheckedUpdateWithoutAdminActionsTakenInput>
  }

  export type UserUpdateWithoutAdminActionsTakenInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    organizedEvents?: EventUpdateManyWithoutOrganizerNestedInput
    attendedEvents?: EventAttendeeUpdateManyWithoutUserNestedInput
    favorites?: FavoriteUpdateManyWithoutUserNestedInput
    authoredPresentations?: PresentationAuthorUpdateManyWithoutUserNestedInput
    adminLogsAsOrganizer?: AdminActionLogUpdateManyWithoutOrganizerNestedInput
    conferenceRegistrations?: ConferenceRegistrationUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAdminActionsTakenInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    organizedEvents?: EventUncheckedUpdateManyWithoutOrganizerNestedInput
    attendedEvents?: EventAttendeeUncheckedUpdateManyWithoutUserNestedInput
    favorites?: FavoriteUncheckedUpdateManyWithoutUserNestedInput
    authoredPresentations?: PresentationAuthorUncheckedUpdateManyWithoutUserNestedInput
    adminLogsAsOrganizer?: AdminActionLogUncheckedUpdateManyWithoutOrganizerNestedInput
    conferenceRegistrations?: ConferenceRegistrationUncheckedUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutAdminLogsAsOrganizerInput = {
    update: XOR<UserUpdateWithoutAdminLogsAsOrganizerInput, UserUncheckedUpdateWithoutAdminLogsAsOrganizerInput>
    create: XOR<UserCreateWithoutAdminLogsAsOrganizerInput, UserUncheckedCreateWithoutAdminLogsAsOrganizerInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAdminLogsAsOrganizerInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAdminLogsAsOrganizerInput, UserUncheckedUpdateWithoutAdminLogsAsOrganizerInput>
  }

  export type UserUpdateWithoutAdminLogsAsOrganizerInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    organizedEvents?: EventUpdateManyWithoutOrganizerNestedInput
    attendedEvents?: EventAttendeeUpdateManyWithoutUserNestedInput
    favorites?: FavoriteUpdateManyWithoutUserNestedInput
    authoredPresentations?: PresentationAuthorUpdateManyWithoutUserNestedInput
    adminActionsTaken?: AdminActionLogUpdateManyWithoutAdminNestedInput
    conferenceRegistrations?: ConferenceRegistrationUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAdminLogsAsOrganizerInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    organizedEvents?: EventUncheckedUpdateManyWithoutOrganizerNestedInput
    attendedEvents?: EventAttendeeUncheckedUpdateManyWithoutUserNestedInput
    favorites?: FavoriteUncheckedUpdateManyWithoutUserNestedInput
    authoredPresentations?: PresentationAuthorUncheckedUpdateManyWithoutUserNestedInput
    adminActionsTaken?: AdminActionLogUncheckedUpdateManyWithoutAdminNestedInput
    conferenceRegistrations?: ConferenceRegistrationUncheckedUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutProfileInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    logo?: string | null
    organizedEvents?: EventCreateNestedManyWithoutOrganizerInput
    attendedEvents?: EventAttendeeCreateNestedManyWithoutUserInput
    favorites?: FavoriteCreateNestedManyWithoutUserInput
    authoredPresentations?: PresentationAuthorCreateNestedManyWithoutUserInput
    adminActionsTaken?: AdminActionLogCreateNestedManyWithoutAdminInput
    adminLogsAsOrganizer?: AdminActionLogCreateNestedManyWithoutOrganizerInput
    conferenceRegistrations?: ConferenceRegistrationCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProfileInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    logo?: string | null
    organizedEvents?: EventUncheckedCreateNestedManyWithoutOrganizerInput
    attendedEvents?: EventAttendeeUncheckedCreateNestedManyWithoutUserInput
    favorites?: FavoriteUncheckedCreateNestedManyWithoutUserInput
    authoredPresentations?: PresentationAuthorUncheckedCreateNestedManyWithoutUserInput
    adminActionsTaken?: AdminActionLogUncheckedCreateNestedManyWithoutAdminInput
    adminLogsAsOrganizer?: AdminActionLogUncheckedCreateNestedManyWithoutOrganizerInput
    conferenceRegistrations?: ConferenceRegistrationUncheckedCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
  }

  export type UserUpsertWithoutProfileInput = {
    update: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProfileInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
  }

  export type UserUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    organizedEvents?: EventUpdateManyWithoutOrganizerNestedInput
    attendedEvents?: EventAttendeeUpdateManyWithoutUserNestedInput
    favorites?: FavoriteUpdateManyWithoutUserNestedInput
    authoredPresentations?: PresentationAuthorUpdateManyWithoutUserNestedInput
    adminActionsTaken?: AdminActionLogUpdateManyWithoutAdminNestedInput
    adminLogsAsOrganizer?: AdminActionLogUpdateManyWithoutOrganizerNestedInput
    conferenceRegistrations?: ConferenceRegistrationUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    organizedEvents?: EventUncheckedUpdateManyWithoutOrganizerNestedInput
    attendedEvents?: EventAttendeeUncheckedUpdateManyWithoutUserNestedInput
    favorites?: FavoriteUncheckedUpdateManyWithoutUserNestedInput
    authoredPresentations?: PresentationAuthorUncheckedUpdateManyWithoutUserNestedInput
    adminActionsTaken?: AdminActionLogUncheckedUpdateManyWithoutAdminNestedInput
    adminLogsAsOrganizer?: AdminActionLogUncheckedUpdateManyWithoutOrganizerNestedInput
    conferenceRegistrations?: ConferenceRegistrationUncheckedUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutConferenceRegistrationsInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    logo?: string | null
    profile?: UserProfileCreateNestedOneWithoutUserInput
    organizedEvents?: EventCreateNestedManyWithoutOrganizerInput
    attendedEvents?: EventAttendeeCreateNestedManyWithoutUserInput
    favorites?: FavoriteCreateNestedManyWithoutUserInput
    authoredPresentations?: PresentationAuthorCreateNestedManyWithoutUserInput
    adminActionsTaken?: AdminActionLogCreateNestedManyWithoutAdminInput
    adminLogsAsOrganizer?: AdminActionLogCreateNestedManyWithoutOrganizerInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutConferenceRegistrationsInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    logo?: string | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    organizedEvents?: EventUncheckedCreateNestedManyWithoutOrganizerInput
    attendedEvents?: EventAttendeeUncheckedCreateNestedManyWithoutUserInput
    favorites?: FavoriteUncheckedCreateNestedManyWithoutUserInput
    authoredPresentations?: PresentationAuthorUncheckedCreateNestedManyWithoutUserInput
    adminActionsTaken?: AdminActionLogUncheckedCreateNestedManyWithoutAdminInput
    adminLogsAsOrganizer?: AdminActionLogUncheckedCreateNestedManyWithoutOrganizerInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutConferenceRegistrationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutConferenceRegistrationsInput, UserUncheckedCreateWithoutConferenceRegistrationsInput>
  }

  export type EventCreateWithoutRegistrationsInput = {
    id?: string
    title: string
    description: string
    startDate: Date | string
    endDate: Date | string
    slug: string
    status?: $Enums.EventStatus
    isFeatured?: boolean
    maxCapacity?: number
    isEducational?: boolean
    viewCount?: number
    attendeeCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    location: LocationCreateNestedOneWithoutEventsInput
    images?: EventImageCreateNestedOneWithoutEventInput
    organizer: UserCreateNestedOneWithoutOrganizedEventsInput
    category: CategoryCreateNestedOneWithoutEventsInput
    attendees?: EventAttendeeCreateNestedManyWithoutEventInput
    days?: ConferenceDayCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutRegistrationsInput = {
    id?: string
    title: string
    description: string
    startDate: Date | string
    endDate: Date | string
    slug: string
    status?: $Enums.EventStatus
    isFeatured?: boolean
    locationId: string
    maxCapacity?: number
    isEducational?: boolean
    organizerId: string
    categoryId: string
    viewCount?: number
    attendeeCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: EventImageUncheckedCreateNestedOneWithoutEventInput
    attendees?: EventAttendeeUncheckedCreateNestedManyWithoutEventInput
    days?: ConferenceDayUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutRegistrationsInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutRegistrationsInput, EventUncheckedCreateWithoutRegistrationsInput>
  }

  export type UserUpsertWithoutConferenceRegistrationsInput = {
    update: XOR<UserUpdateWithoutConferenceRegistrationsInput, UserUncheckedUpdateWithoutConferenceRegistrationsInput>
    create: XOR<UserCreateWithoutConferenceRegistrationsInput, UserUncheckedCreateWithoutConferenceRegistrationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutConferenceRegistrationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutConferenceRegistrationsInput, UserUncheckedUpdateWithoutConferenceRegistrationsInput>
  }

  export type UserUpdateWithoutConferenceRegistrationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    organizedEvents?: EventUpdateManyWithoutOrganizerNestedInput
    attendedEvents?: EventAttendeeUpdateManyWithoutUserNestedInput
    favorites?: FavoriteUpdateManyWithoutUserNestedInput
    authoredPresentations?: PresentationAuthorUpdateManyWithoutUserNestedInput
    adminActionsTaken?: AdminActionLogUpdateManyWithoutAdminNestedInput
    adminLogsAsOrganizer?: AdminActionLogUpdateManyWithoutOrganizerNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutConferenceRegistrationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    organizedEvents?: EventUncheckedUpdateManyWithoutOrganizerNestedInput
    attendedEvents?: EventAttendeeUncheckedUpdateManyWithoutUserNestedInput
    favorites?: FavoriteUncheckedUpdateManyWithoutUserNestedInput
    authoredPresentations?: PresentationAuthorUncheckedUpdateManyWithoutUserNestedInput
    adminActionsTaken?: AdminActionLogUncheckedUpdateManyWithoutAdminNestedInput
    adminLogsAsOrganizer?: AdminActionLogUncheckedUpdateManyWithoutOrganizerNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
  }

  export type EventUpsertWithoutRegistrationsInput = {
    update: XOR<EventUpdateWithoutRegistrationsInput, EventUncheckedUpdateWithoutRegistrationsInput>
    create: XOR<EventCreateWithoutRegistrationsInput, EventUncheckedCreateWithoutRegistrationsInput>
    where?: EventWhereInput
  }

  export type EventUpdateToOneWithWhereWithoutRegistrationsInput = {
    where?: EventWhereInput
    data: XOR<EventUpdateWithoutRegistrationsInput, EventUncheckedUpdateWithoutRegistrationsInput>
  }

  export type EventUpdateWithoutRegistrationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    isFeatured?: BoolFieldUpdateOperationsInput | boolean
    maxCapacity?: IntFieldUpdateOperationsInput | number
    isEducational?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    attendeeCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: LocationUpdateOneRequiredWithoutEventsNestedInput
    images?: EventImageUpdateOneWithoutEventNestedInput
    organizer?: UserUpdateOneRequiredWithoutOrganizedEventsNestedInput
    category?: CategoryUpdateOneRequiredWithoutEventsNestedInput
    attendees?: EventAttendeeUpdateManyWithoutEventNestedInput
    days?: ConferenceDayUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutRegistrationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    isFeatured?: BoolFieldUpdateOperationsInput | boolean
    locationId?: StringFieldUpdateOperationsInput | string
    maxCapacity?: IntFieldUpdateOperationsInput | number
    isEducational?: BoolFieldUpdateOperationsInput | boolean
    organizerId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    viewCount?: IntFieldUpdateOperationsInput | number
    attendeeCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: EventImageUncheckedUpdateOneWithoutEventNestedInput
    attendees?: EventAttendeeUncheckedUpdateManyWithoutEventNestedInput
    days?: ConferenceDayUncheckedUpdateManyWithoutEventNestedInput
  }

  export type PresentationCreateWithoutMetricsInput = {
    id?: string
    title: string
    abstract: string
    durationMin: number
    keywords?: PresentationCreatekeywordsInput | string[]
    status?: $Enums.PresentationStatus
    submissionType: $Enums.SubmissionType
    sortOrder: number
    startTime?: Date | string | null
    endTime?: Date | string | null
    viewCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    submittedAt?: Date | string | null
    section: SectionCreateNestedOneWithoutPresentationsInput
    authors?: PresentationAuthorCreateNestedManyWithoutPresentationInput
    materials?: PresentationMaterialCreateNestedManyWithoutPresentationInput
    favorites?: FavoriteCreateNestedManyWithoutPresentationInput
  }

  export type PresentationUncheckedCreateWithoutMetricsInput = {
    id?: string
    title: string
    abstract: string
    durationMin: number
    keywords?: PresentationCreatekeywordsInput | string[]
    status?: $Enums.PresentationStatus
    submissionType: $Enums.SubmissionType
    sortOrder: number
    startTime?: Date | string | null
    endTime?: Date | string | null
    sectionId: string
    viewCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    submittedAt?: Date | string | null
    authors?: PresentationAuthorUncheckedCreateNestedManyWithoutPresentationInput
    materials?: PresentationMaterialUncheckedCreateNestedManyWithoutPresentationInput
    favorites?: FavoriteUncheckedCreateNestedManyWithoutPresentationInput
  }

  export type PresentationCreateOrConnectWithoutMetricsInput = {
    where: PresentationWhereUniqueInput
    create: XOR<PresentationCreateWithoutMetricsInput, PresentationUncheckedCreateWithoutMetricsInput>
  }

  export type PresentationUpsertWithoutMetricsInput = {
    update: XOR<PresentationUpdateWithoutMetricsInput, PresentationUncheckedUpdateWithoutMetricsInput>
    create: XOR<PresentationCreateWithoutMetricsInput, PresentationUncheckedCreateWithoutMetricsInput>
    where?: PresentationWhereInput
  }

  export type PresentationUpdateToOneWithWhereWithoutMetricsInput = {
    where?: PresentationWhereInput
    data: XOR<PresentationUpdateWithoutMetricsInput, PresentationUncheckedUpdateWithoutMetricsInput>
  }

  export type PresentationUpdateWithoutMetricsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    abstract?: StringFieldUpdateOperationsInput | string
    durationMin?: IntFieldUpdateOperationsInput | number
    keywords?: PresentationUpdatekeywordsInput | string[]
    status?: EnumPresentationStatusFieldUpdateOperationsInput | $Enums.PresentationStatus
    submissionType?: EnumSubmissionTypeFieldUpdateOperationsInput | $Enums.SubmissionType
    sortOrder?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    viewCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    section?: SectionUpdateOneRequiredWithoutPresentationsNestedInput
    authors?: PresentationAuthorUpdateManyWithoutPresentationNestedInput
    materials?: PresentationMaterialUpdateManyWithoutPresentationNestedInput
    favorites?: FavoriteUpdateManyWithoutPresentationNestedInput
  }

  export type PresentationUncheckedUpdateWithoutMetricsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    abstract?: StringFieldUpdateOperationsInput | string
    durationMin?: IntFieldUpdateOperationsInput | number
    keywords?: PresentationUpdatekeywordsInput | string[]
    status?: EnumPresentationStatusFieldUpdateOperationsInput | $Enums.PresentationStatus
    submissionType?: EnumSubmissionTypeFieldUpdateOperationsInput | $Enums.SubmissionType
    sortOrder?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sectionId?: StringFieldUpdateOperationsInput | string
    viewCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    authors?: PresentationAuthorUncheckedUpdateManyWithoutPresentationNestedInput
    materials?: PresentationMaterialUncheckedUpdateManyWithoutPresentationNestedInput
    favorites?: FavoriteUncheckedUpdateManyWithoutPresentationNestedInput
  }

  export type UserCreateWithoutRefreshTokensInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    logo?: string | null
    profile?: UserProfileCreateNestedOneWithoutUserInput
    organizedEvents?: EventCreateNestedManyWithoutOrganizerInput
    attendedEvents?: EventAttendeeCreateNestedManyWithoutUserInput
    favorites?: FavoriteCreateNestedManyWithoutUserInput
    authoredPresentations?: PresentationAuthorCreateNestedManyWithoutUserInput
    adminActionsTaken?: AdminActionLogCreateNestedManyWithoutAdminInput
    adminLogsAsOrganizer?: AdminActionLogCreateNestedManyWithoutOrganizerInput
    conferenceRegistrations?: ConferenceRegistrationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRefreshTokensInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    logo?: string | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    organizedEvents?: EventUncheckedCreateNestedManyWithoutOrganizerInput
    attendedEvents?: EventAttendeeUncheckedCreateNestedManyWithoutUserInput
    favorites?: FavoriteUncheckedCreateNestedManyWithoutUserInput
    authoredPresentations?: PresentationAuthorUncheckedCreateNestedManyWithoutUserInput
    adminActionsTaken?: AdminActionLogUncheckedCreateNestedManyWithoutAdminInput
    adminLogsAsOrganizer?: AdminActionLogUncheckedCreateNestedManyWithoutOrganizerInput
    conferenceRegistrations?: ConferenceRegistrationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRefreshTokensInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRefreshTokensInput, UserUncheckedCreateWithoutRefreshTokensInput>
  }

  export type UserUpsertWithoutRefreshTokensInput = {
    update: XOR<UserUpdateWithoutRefreshTokensInput, UserUncheckedUpdateWithoutRefreshTokensInput>
    create: XOR<UserCreateWithoutRefreshTokensInput, UserUncheckedCreateWithoutRefreshTokensInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRefreshTokensInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRefreshTokensInput, UserUncheckedUpdateWithoutRefreshTokensInput>
  }

  export type UserUpdateWithoutRefreshTokensInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    organizedEvents?: EventUpdateManyWithoutOrganizerNestedInput
    attendedEvents?: EventAttendeeUpdateManyWithoutUserNestedInput
    favorites?: FavoriteUpdateManyWithoutUserNestedInput
    authoredPresentations?: PresentationAuthorUpdateManyWithoutUserNestedInput
    adminActionsTaken?: AdminActionLogUpdateManyWithoutAdminNestedInput
    adminLogsAsOrganizer?: AdminActionLogUpdateManyWithoutOrganizerNestedInput
    conferenceRegistrations?: ConferenceRegistrationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRefreshTokensInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    organizedEvents?: EventUncheckedUpdateManyWithoutOrganizerNestedInput
    attendedEvents?: EventAttendeeUncheckedUpdateManyWithoutUserNestedInput
    favorites?: FavoriteUncheckedUpdateManyWithoutUserNestedInput
    authoredPresentations?: PresentationAuthorUncheckedUpdateManyWithoutUserNestedInput
    adminActionsTaken?: AdminActionLogUncheckedUpdateManyWithoutAdminNestedInput
    adminLogsAsOrganizer?: AdminActionLogUncheckedUpdateManyWithoutOrganizerNestedInput
    conferenceRegistrations?: ConferenceRegistrationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type EventCreateManyOrganizerInput = {
    id?: string
    title: string
    description: string
    startDate: Date | string
    endDate: Date | string
    slug: string
    status?: $Enums.EventStatus
    isFeatured?: boolean
    locationId: string
    maxCapacity?: number
    isEducational?: boolean
    categoryId: string
    viewCount?: number
    attendeeCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EventAttendeeCreateManyUserInput = {
    id?: string
    status?: $Enums.AttendeeStatus
    registeredAt?: Date | string
    eventId: string
  }

  export type FavoriteCreateManyUserInput = {
    id?: string
    presentationId: string
    createdAt?: Date | string
  }

  export type PresentationAuthorCreateManyUserInput = {
    id?: string
    presentationId: string
    affiliationId?: string | null
    isCorrespondingAuthor?: boolean
  }

  export type AdminActionLogCreateManyAdminInput = {
    id?: string
    organizerId: string
    action: string
    targetModel: string
    targetId: string
    reason?: string | null
    timestamp?: Date | string
  }

  export type AdminActionLogCreateManyOrganizerInput = {
    id?: string
    adminId: string
    action: string
    targetModel: string
    targetId: string
    reason?: string | null
    timestamp?: Date | string
  }

  export type ConferenceRegistrationCreateManyUserInput = {
    id?: string
    eventId: string
    registeredAt?: Date | string
  }

  export type RefreshTokenCreateManyUserInput = {
    id?: string
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type EventUpdateWithoutOrganizerInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    isFeatured?: BoolFieldUpdateOperationsInput | boolean
    maxCapacity?: IntFieldUpdateOperationsInput | number
    isEducational?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    attendeeCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: LocationUpdateOneRequiredWithoutEventsNestedInput
    images?: EventImageUpdateOneWithoutEventNestedInput
    category?: CategoryUpdateOneRequiredWithoutEventsNestedInput
    attendees?: EventAttendeeUpdateManyWithoutEventNestedInput
    days?: ConferenceDayUpdateManyWithoutEventNestedInput
    registrations?: ConferenceRegistrationUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutOrganizerInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    isFeatured?: BoolFieldUpdateOperationsInput | boolean
    locationId?: StringFieldUpdateOperationsInput | string
    maxCapacity?: IntFieldUpdateOperationsInput | number
    isEducational?: BoolFieldUpdateOperationsInput | boolean
    categoryId?: StringFieldUpdateOperationsInput | string
    viewCount?: IntFieldUpdateOperationsInput | number
    attendeeCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: EventImageUncheckedUpdateOneWithoutEventNestedInput
    attendees?: EventAttendeeUncheckedUpdateManyWithoutEventNestedInput
    days?: ConferenceDayUncheckedUpdateManyWithoutEventNestedInput
    registrations?: ConferenceRegistrationUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateManyWithoutOrganizerInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    isFeatured?: BoolFieldUpdateOperationsInput | boolean
    locationId?: StringFieldUpdateOperationsInput | string
    maxCapacity?: IntFieldUpdateOperationsInput | number
    isEducational?: BoolFieldUpdateOperationsInput | boolean
    categoryId?: StringFieldUpdateOperationsInput | string
    viewCount?: IntFieldUpdateOperationsInput | number
    attendeeCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventAttendeeUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumAttendeeStatusFieldUpdateOperationsInput | $Enums.AttendeeStatus
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventUpdateOneRequiredWithoutAttendeesNestedInput
  }

  export type EventAttendeeUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumAttendeeStatusFieldUpdateOperationsInput | $Enums.AttendeeStatus
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eventId?: StringFieldUpdateOperationsInput | string
  }

  export type EventAttendeeUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumAttendeeStatusFieldUpdateOperationsInput | $Enums.AttendeeStatus
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eventId?: StringFieldUpdateOperationsInput | string
  }

  export type FavoriteUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    presentation?: PresentationUpdateOneRequiredWithoutFavoritesNestedInput
  }

  export type FavoriteUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    presentationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    presentationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PresentationAuthorUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    isCorrespondingAuthor?: BoolFieldUpdateOperationsInput | boolean
    presentation?: PresentationUpdateOneRequiredWithoutAuthorsNestedInput
    affiliation?: AffiliationUpdateOneWithoutAuthorsNestedInput
  }

  export type PresentationAuthorUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    presentationId?: StringFieldUpdateOperationsInput | string
    affiliationId?: NullableStringFieldUpdateOperationsInput | string | null
    isCorrespondingAuthor?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PresentationAuthorUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    presentationId?: StringFieldUpdateOperationsInput | string
    affiliationId?: NullableStringFieldUpdateOperationsInput | string | null
    isCorrespondingAuthor?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AdminActionLogUpdateWithoutAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    targetModel?: StringFieldUpdateOperationsInput | string
    targetId?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    organizer?: UserUpdateOneRequiredWithoutAdminLogsAsOrganizerNestedInput
  }

  export type AdminActionLogUncheckedUpdateWithoutAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizerId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    targetModel?: StringFieldUpdateOperationsInput | string
    targetId?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminActionLogUncheckedUpdateManyWithoutAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizerId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    targetModel?: StringFieldUpdateOperationsInput | string
    targetId?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminActionLogUpdateWithoutOrganizerInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    targetModel?: StringFieldUpdateOperationsInput | string
    targetId?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    admin?: UserUpdateOneRequiredWithoutAdminActionsTakenNestedInput
  }

  export type AdminActionLogUncheckedUpdateWithoutOrganizerInput = {
    id?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    targetModel?: StringFieldUpdateOperationsInput | string
    targetId?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminActionLogUncheckedUpdateManyWithoutOrganizerInput = {
    id?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    targetModel?: StringFieldUpdateOperationsInput | string
    targetId?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConferenceRegistrationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventUpdateOneRequiredWithoutRegistrationsNestedInput
  }

  export type ConferenceRegistrationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConferenceRegistrationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefreshTokenUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefreshTokenUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefreshTokenUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventCreateManyCategoryInput = {
    id?: string
    title: string
    description: string
    startDate: Date | string
    endDate: Date | string
    slug: string
    status?: $Enums.EventStatus
    isFeatured?: boolean
    locationId: string
    maxCapacity?: number
    isEducational?: boolean
    organizerId: string
    viewCount?: number
    attendeeCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EventUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    isFeatured?: BoolFieldUpdateOperationsInput | boolean
    maxCapacity?: IntFieldUpdateOperationsInput | number
    isEducational?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    attendeeCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: LocationUpdateOneRequiredWithoutEventsNestedInput
    images?: EventImageUpdateOneWithoutEventNestedInput
    organizer?: UserUpdateOneRequiredWithoutOrganizedEventsNestedInput
    attendees?: EventAttendeeUpdateManyWithoutEventNestedInput
    days?: ConferenceDayUpdateManyWithoutEventNestedInput
    registrations?: ConferenceRegistrationUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    isFeatured?: BoolFieldUpdateOperationsInput | boolean
    locationId?: StringFieldUpdateOperationsInput | string
    maxCapacity?: IntFieldUpdateOperationsInput | number
    isEducational?: BoolFieldUpdateOperationsInput | boolean
    organizerId?: StringFieldUpdateOperationsInput | string
    viewCount?: IntFieldUpdateOperationsInput | number
    attendeeCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: EventImageUncheckedUpdateOneWithoutEventNestedInput
    attendees?: EventAttendeeUncheckedUpdateManyWithoutEventNestedInput
    days?: ConferenceDayUncheckedUpdateManyWithoutEventNestedInput
    registrations?: ConferenceRegistrationUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateManyWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    isFeatured?: BoolFieldUpdateOperationsInput | boolean
    locationId?: StringFieldUpdateOperationsInput | string
    maxCapacity?: IntFieldUpdateOperationsInput | number
    isEducational?: BoolFieldUpdateOperationsInput | boolean
    organizerId?: StringFieldUpdateOperationsInput | string
    viewCount?: IntFieldUpdateOperationsInput | number
    attendeeCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventAttendeeCreateManyEventInput = {
    id?: string
    status?: $Enums.AttendeeStatus
    registeredAt?: Date | string
    userId: string
  }

  export type ConferenceDayCreateManyEventInput = {
    id?: string
    date: Date | string
    sortOrder: number
  }

  export type ConferenceRegistrationCreateManyEventInput = {
    id?: string
    userId: string
    registeredAt?: Date | string
  }

  export type EventAttendeeUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumAttendeeStatusFieldUpdateOperationsInput | $Enums.AttendeeStatus
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAttendedEventsNestedInput
  }

  export type EventAttendeeUncheckedUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumAttendeeStatusFieldUpdateOperationsInput | $Enums.AttendeeStatus
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type EventAttendeeUncheckedUpdateManyWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumAttendeeStatusFieldUpdateOperationsInput | $Enums.AttendeeStatus
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ConferenceDayUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    sections?: SectionUpdateManyWithoutDayNestedInput
  }

  export type ConferenceDayUncheckedUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    sections?: SectionUncheckedUpdateManyWithoutDayNestedInput
  }

  export type ConferenceDayUncheckedUpdateManyWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    sortOrder?: IntFieldUpdateOperationsInput | number
  }

  export type ConferenceRegistrationUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutConferenceRegistrationsNestedInput
  }

  export type ConferenceRegistrationUncheckedUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConferenceRegistrationUncheckedUpdateManyWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventCreateManyLocationInput = {
    id?: string
    title: string
    description: string
    startDate: Date | string
    endDate: Date | string
    slug: string
    status?: $Enums.EventStatus
    isFeatured?: boolean
    maxCapacity?: number
    isEducational?: boolean
    organizerId: string
    categoryId: string
    viewCount?: number
    attendeeCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EventUpdateWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    isFeatured?: BoolFieldUpdateOperationsInput | boolean
    maxCapacity?: IntFieldUpdateOperationsInput | number
    isEducational?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    attendeeCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: EventImageUpdateOneWithoutEventNestedInput
    organizer?: UserUpdateOneRequiredWithoutOrganizedEventsNestedInput
    category?: CategoryUpdateOneRequiredWithoutEventsNestedInput
    attendees?: EventAttendeeUpdateManyWithoutEventNestedInput
    days?: ConferenceDayUpdateManyWithoutEventNestedInput
    registrations?: ConferenceRegistrationUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    isFeatured?: BoolFieldUpdateOperationsInput | boolean
    maxCapacity?: IntFieldUpdateOperationsInput | number
    isEducational?: BoolFieldUpdateOperationsInput | boolean
    organizerId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    viewCount?: IntFieldUpdateOperationsInput | number
    attendeeCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: EventImageUncheckedUpdateOneWithoutEventNestedInput
    attendees?: EventAttendeeUncheckedUpdateManyWithoutEventNestedInput
    days?: ConferenceDayUncheckedUpdateManyWithoutEventNestedInput
    registrations?: ConferenceRegistrationUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateManyWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    isFeatured?: BoolFieldUpdateOperationsInput | boolean
    maxCapacity?: IntFieldUpdateOperationsInput | number
    isEducational?: BoolFieldUpdateOperationsInput | boolean
    organizerId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    viewCount?: IntFieldUpdateOperationsInput | number
    attendeeCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SectionCreateManyDayInput = {
    id?: string
    title: string
    description?: string | null
    sortOrder: number
    startTime: Date | string
    endTime: Date | string
  }

  export type SectionUpdateWithoutDayInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    presentations?: PresentationUpdateManyWithoutSectionNestedInput
    breaks?: BreakUpdateManyWithoutSectionNestedInput
  }

  export type SectionUncheckedUpdateWithoutDayInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    presentations?: PresentationUncheckedUpdateManyWithoutSectionNestedInput
    breaks?: BreakUncheckedUpdateManyWithoutSectionNestedInput
  }

  export type SectionUncheckedUpdateManyWithoutDayInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PresentationCreateManySectionInput = {
    id?: string
    title: string
    abstract: string
    durationMin: number
    keywords?: PresentationCreatekeywordsInput | string[]
    status?: $Enums.PresentationStatus
    submissionType: $Enums.SubmissionType
    sortOrder: number
    startTime?: Date | string | null
    endTime?: Date | string | null
    viewCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    submittedAt?: Date | string | null
  }

  export type BreakCreateManySectionInput = {
    id?: string
    title: string
    description?: string | null
    startTime: Date | string
    endTime: Date | string
  }

  export type PresentationUpdateWithoutSectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    abstract?: StringFieldUpdateOperationsInput | string
    durationMin?: IntFieldUpdateOperationsInput | number
    keywords?: PresentationUpdatekeywordsInput | string[]
    status?: EnumPresentationStatusFieldUpdateOperationsInput | $Enums.PresentationStatus
    submissionType?: EnumSubmissionTypeFieldUpdateOperationsInput | $Enums.SubmissionType
    sortOrder?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    viewCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metrics?: PresentationMetricsUpdateOneWithoutPresentationNestedInput
    authors?: PresentationAuthorUpdateManyWithoutPresentationNestedInput
    materials?: PresentationMaterialUpdateManyWithoutPresentationNestedInput
    favorites?: FavoriteUpdateManyWithoutPresentationNestedInput
  }

  export type PresentationUncheckedUpdateWithoutSectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    abstract?: StringFieldUpdateOperationsInput | string
    durationMin?: IntFieldUpdateOperationsInput | number
    keywords?: PresentationUpdatekeywordsInput | string[]
    status?: EnumPresentationStatusFieldUpdateOperationsInput | $Enums.PresentationStatus
    submissionType?: EnumSubmissionTypeFieldUpdateOperationsInput | $Enums.SubmissionType
    sortOrder?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    viewCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metrics?: PresentationMetricsUncheckedUpdateOneWithoutPresentationNestedInput
    authors?: PresentationAuthorUncheckedUpdateManyWithoutPresentationNestedInput
    materials?: PresentationMaterialUncheckedUpdateManyWithoutPresentationNestedInput
    favorites?: FavoriteUncheckedUpdateManyWithoutPresentationNestedInput
  }

  export type PresentationUncheckedUpdateManyWithoutSectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    abstract?: StringFieldUpdateOperationsInput | string
    durationMin?: IntFieldUpdateOperationsInput | number
    keywords?: PresentationUpdatekeywordsInput | string[]
    status?: EnumPresentationStatusFieldUpdateOperationsInput | $Enums.PresentationStatus
    submissionType?: EnumSubmissionTypeFieldUpdateOperationsInput | $Enums.SubmissionType
    sortOrder?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    viewCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BreakUpdateWithoutSectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BreakUncheckedUpdateWithoutSectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BreakUncheckedUpdateManyWithoutSectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PresentationAuthorCreateManyPresentationInput = {
    id?: string
    userId: string
    affiliationId?: string | null
    isCorrespondingAuthor?: boolean
  }

  export type PresentationMaterialCreateManyPresentationInput = {
    id?: string
    fileUrl: string
    fileType: $Enums.MaterialType
    label?: string | null
    uploadedAt?: Date | string
  }

  export type FavoriteCreateManyPresentationInput = {
    id?: string
    userId: string
    createdAt?: Date | string
  }

  export type PresentationAuthorUpdateWithoutPresentationInput = {
    id?: StringFieldUpdateOperationsInput | string
    isCorrespondingAuthor?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutAuthoredPresentationsNestedInput
    affiliation?: AffiliationUpdateOneWithoutAuthorsNestedInput
  }

  export type PresentationAuthorUncheckedUpdateWithoutPresentationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    affiliationId?: NullableStringFieldUpdateOperationsInput | string | null
    isCorrespondingAuthor?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PresentationAuthorUncheckedUpdateManyWithoutPresentationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    affiliationId?: NullableStringFieldUpdateOperationsInput | string | null
    isCorrespondingAuthor?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PresentationMaterialUpdateWithoutPresentationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileType?: EnumMaterialTypeFieldUpdateOperationsInput | $Enums.MaterialType
    label?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PresentationMaterialUncheckedUpdateWithoutPresentationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileType?: EnumMaterialTypeFieldUpdateOperationsInput | $Enums.MaterialType
    label?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PresentationMaterialUncheckedUpdateManyWithoutPresentationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileType?: EnumMaterialTypeFieldUpdateOperationsInput | $Enums.MaterialType
    label?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteUpdateWithoutPresentationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFavoritesNestedInput
  }

  export type FavoriteUncheckedUpdateWithoutPresentationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteUncheckedUpdateManyWithoutPresentationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PresentationAuthorCreateManyAffiliationInput = {
    id?: string
    userId: string
    presentationId: string
    isCorrespondingAuthor?: boolean
  }

  export type PresentationAuthorUpdateWithoutAffiliationInput = {
    id?: StringFieldUpdateOperationsInput | string
    isCorrespondingAuthor?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutAuthoredPresentationsNestedInput
    presentation?: PresentationUpdateOneRequiredWithoutAuthorsNestedInput
  }

  export type PresentationAuthorUncheckedUpdateWithoutAffiliationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    presentationId?: StringFieldUpdateOperationsInput | string
    isCorrespondingAuthor?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PresentationAuthorUncheckedUpdateManyWithoutAffiliationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    presentationId?: StringFieldUpdateOperationsInput | string
    isCorrespondingAuthor?: BoolFieldUpdateOperationsInput | boolean
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}
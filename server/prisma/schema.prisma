generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// ENUMS
//
enum Role {
  attendee
  presenter
  organizer
  admin
}

enum ConferenceStatus {
  draft
  call_for_papers
  published
  canceled
  completed
}

enum AbstractSubmissionStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  REVISION_REQUESTED
  ACCEPTED
  REJECTED
  WITHDRAWN
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
  REVISION_REQUESTED
}

enum SectionType {
  presentation
  keynote
  workshop
  panel
  networking
  break
}

enum SlotType {
  PRESENTATION
  BREAK
  LUNCH
  NETWORKING
  OPENING
  CLOSING
}

enum BreakType {
  COFFEE_BREAK
  LUNCH_BREAK
  NETWORKING_BREAK
  REST_BREAK
  GENERAL_BREAK
}

//
// MODELS
//

model User {
  id        Int      @id @default(autoincrement())
  cognitoId String?  @unique
  name      String
  email     String   @unique
  password  String?
  roles     Role[]   @default([attendee])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  conferences          Conference[]        @relation("OrganizerConferences")
  conferenceMembership ConferenceMember[]
  abstractSubmissions  AbstractSubmission[]
  abstractReviews      AbstractReview[]
  presentations        PresentationAuthor[]
  notifications        Notification[]
  conferenceFeedback   ConferenceFeedback[]
  presentationFeedback PresentationFeedback[]

  refreshTokens        RefreshToken[]
}

model Conference {
  id          Int              @id @default(autoincrement())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  location    String?
  status      ConferenceStatus @default(draft)
  topics      String[]         @default([])
  createdById Int
  createdBy   User             @relation("OrganizerConferences", fields: [createdById], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  members             ConferenceMember[]
  days                Day[]
  sections            Section[]
  categories          Category[]
  presentationTypes   PresentationType[]
  submissionSettings  SubmissionSettings?
  abstractSubmissions AbstractSubmission[]
  presentations       Presentation[]
  feedback            ConferenceFeedback[]
}

model ConferenceMember {
  id           Int      @id @default(autoincrement())
  conferenceId Int
  userId       Int
  isAttendee   Boolean  @default(true)
  isSpeaker    Boolean  @default(false)
  registeredAt DateTime @default(now())

  conference Conference @relation(fields: [conferenceId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id])

  @@unique([conferenceId, userId])
}

model Day {
  id           Int      @id @default(autoincrement())
  conferenceId Int
  date         DateTime
  name         String
  order        Int      @default(0)

  conference Conference @relation(fields: [conferenceId], references: [id])
  sections   Section[]

  @@unique([conferenceId, date])
}

model Section {
  id           Int       @id @default(autoincrement())
  name         String
  startTime    DateTime?
  endTime      DateTime?
  conferenceId Int
  dayId        Int?
  type         SectionType @default(presentation)
  categoryId   Int?

  conference Conference @relation(fields: [conferenceId], references: [id])
  day        Day?       @relation(fields: [dayId], references: [id])
  category   Category?  @relation(fields: [categoryId], references: [id])
  timeSlots  TimeSlot[]
  presentations Presentation[]

  room        String?
  capacity    Int?
  description String?
}

model TimeSlot {
  id             Int        @id @default(autoincrement())
  sectionId      Int
  startTime      DateTime
  endTime        DateTime
  slotType       SlotType      @default(PRESENTATION)
  isOccupied     Boolean       @default(false)
  presentationId Int?          @unique
  title          String?

  // Break fields
  breakType      BreakType?
  description    String?

  section      Section        @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  presentation Presentation?  @relation(fields: [presentationId], references: [id])
}

model AbstractSubmission {
  id           Int                      @id @default(autoincrement())
  title        String
  abstractText String?                  @db.Text    // typed text version
  fileUrl      String?                               // uploaded document
  submitterId  Int
  conferenceId Int
  status       AbstractSubmissionStatus @default(SUBMITTED)
  keywords     String[]                 @default([])
  createdAt    DateTime                 @default(now())
  updatedAt    DateTime                 @updatedAt

  submitter   User              @relation(fields: [submitterId], references: [id])
  conference  Conference        @relation(fields: [conferenceId], references: [id])
  reviews     AbstractReview[]
  presentationTypeId Int?
  presentationType   PresentationType?  @relation(fields:[presentationTypeId], references:[id])
}

model AbstractReview {
  id         Int    @id @default(autoincrement())
  abstractId Int
  reviewerId Int
  score      Int
  comments   String?
  recommendation String

  abstract AbstractSubmission @relation(fields: [abstractId], references: [id])
  reviewer User               @relation(fields: [reviewerId], references: [id])
}

model Presentation {
  id           Int      @id @default(autoincrement())
  conferenceId Int
  title        String
  abstract     String?  @db.Text
  duration     Int?
  status       String
  createdAt    DateTime @default(now())
  sectionId    Int?

  conference Conference @relation(fields: [conferenceId], references: [id])
  section    Section?   @relation(fields: [sectionId], references: [id])
  authors    PresentationAuthor[]
  categoryId Int?
  category   Category? @relation(fields: [categoryId], references: [id])
  presentationTypeId Int?
  presentationType   PresentationType? @relation(fields: [presentationTypeId], references: [id])
  timeSlot   TimeSlot?
  feedback   PresentationFeedback[]
}

model PresentationAuthor {
  id             Int     @id @default(autoincrement())
  presentationId Int
  userId         Int?
  authorName     String
  authorEmail    String?
  affiliation    String?
  isPresenter    Boolean @default(false)
  isExternal     Boolean @default(true)

  presentation Presentation @relation(fields: [presentationId], references: [id], onDelete: Cascade)
  user         User?        @relation(fields: [userId], references: [id])
}

model Category {
  id           Int      @id @default(autoincrement())
  name         String
  conferenceId Int
  order        Int      @default(0)

  conference    Conference     @relation(fields: [conferenceId], references: [id], onDelete: Cascade)
  presentations Presentation[]
  sections      Section[]
}

model PresentationType {
  id              Int      @id @default(autoincrement())
  name            String
  description     String?
  defaultDuration Int      @default(20)
  conferenceId    Int
  order           Int      @default(0)

  conference          Conference          @relation(fields: [conferenceId], references: [id], onDelete: Cascade)
  presentations       Presentation[]
  abstractSubmissions AbstractSubmission[]
}

model SubmissionSettings {
  id                   Int      @id @default(autoincrement())
  conferenceId         Int      @unique
  submissionDeadline   DateTime
  requireAbstract      Boolean  @default(true)
  requireFullPaper     Boolean  @default(true)
  allowedFileTypes     String[] @default(["pdf", "doc", "docx"])
  maxFileSize          Int      @default(50)
  maxCoAuthors         Int      @default(10)
  minKeywords          Int      @default(5)
  maxKeywords          Int      @default(15)
  enableSubmissions    Boolean  @default(true)
  sendConfirmationEmail Boolean @default(true)

  conference Conference @relation(fields: [conferenceId], references: [id], onDelete: Cascade)
}

model ConferenceFeedback {
  id           Int      @id @default(autoincrement())
  conferenceId Int
  userId       Int
  rating       Int
  comments     String?
  submittedAt  DateTime @default(now())

  conference Conference @relation(fields: [conferenceId], references: [id])
  user       User       @relation(fields: [userId], references: [id])
}

model PresentationFeedback {
  id             Int      @id @default(autoincrement())
  presentationId Int
  userId         Int
  rating         Int
  comments       String?
  submittedAt    DateTime @default(now())

  presentation Presentation @relation(fields: [presentationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  title     String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model RefreshToken {
  id         Int      @id @default(autoincrement())
  tokenHash  String   // hashed refresh token
  userId     Int
  user       User     @relation(fields:[userId], references:[id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  revoked    Boolean  @default(false)
  expiresAt  DateTime

  @@index([userId])
}
